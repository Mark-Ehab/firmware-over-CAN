
Gateway_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08002d54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002d54  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000786f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001751  00000000  00000000  000278a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  00029808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165c7  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006669  00000000  00000000  00040547  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080f82  00000000  00000000  00046bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7b32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe8  00000000  00000000  000c7bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cfc 	.word	0x08002cfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002cfc 	.word	0x08002cfc

0800014c <MUSART1_voidInit>:
#include "USART_private.h"
#include "USART_config.h"


void MUSART1_voidInit(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	/*	baud rate = 9600		*/
	USART1_ -> BRR = 0x341;
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MUSART1_voidInit+0x40>)
 8000152:	f240 3241 	movw	r2, #833	; 0x341
 8000156:	609a      	str	r2, [r3, #8]

	SET_BIT((USART1_-> CR[0]), 3);			/* Enabling Transmitter */
 8000158:	4b0c      	ldr	r3, [pc, #48]	; (800018c <MUSART1_voidInit+0x40>)
 800015a:	68db      	ldr	r3, [r3, #12]
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <MUSART1_voidInit+0x40>)
 800015e:	f043 0308 	orr.w	r3, r3, #8
 8000162:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1_-> CR[0]), 2);			/* Enabling Receiver */
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <MUSART1_voidInit+0x40>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <MUSART1_voidInit+0x40>)
 800016a:	f043 0304 	orr.w	r3, r3, #4
 800016e:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1_-> CR[0]), 13);			/* Enabling USART */
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <MUSART1_voidInit+0x40>)
 8000172:	68db      	ldr	r3, [r3, #12]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <MUSART1_voidInit+0x40>)
 8000176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800017a:	60d3      	str	r3, [r2, #12]

	USART1_ -> SR = 0;						/* Clearing status register */
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <MUSART1_voidInit+0x40>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40013800 	.word	0x40013800

08000190 <MUSART1_voidTransmit>:

void MUSART1_voidTransmit(uint8_t arr)
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
	//	while(arr[i] != '\0'){
	USART1_ -> DR = arr;
 800019e:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <MUSART1_voidTransmit+0x34>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART1_ -> SR), 6)) == 0);
 80001a4:	bf00      	nop
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <MUSART1_voidTransmit+0x34>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	119b      	asrs	r3, r3, #6
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0f8      	beq.n	80001a6 <MUSART1_voidTransmit+0x16>
	i++;
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	3301      	adds	r3, #1
 80001b8:	73fb      	strb	r3, [r7, #15]
	//	}

}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40013800 	.word	0x40013800

080001c8 <MUSART1_u8Receive>:

uint8_t MUSART1_u8Receive(uint8_t* Copy_u8Data)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8Result = 1;
 80001d0:	2301      	movs	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]

	if ( (GET_BIT((USART1_ -> SR), 5)) == 1 )
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <MUSART1_u8Receive+0x38>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	115b      	asrs	r3, r3, #5
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d105      	bne.n	80001ee <MUSART1_u8Receive+0x26>
	{
		*Copy_u8Data = USART1_ -> DR;
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <MUSART1_u8Receive+0x38>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	701a      	strb	r2, [r3, #0]
 80001ec:	e001      	b.n	80001f2 <MUSART1_u8Receive+0x2a>
	}
	else
	{
		Local_u8Result = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
	}

	return (Local_u8Result);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40013800 	.word	0x40013800

08000204 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t IndexBuffer = 0;
uint8_t record[100] = {0};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &RxData);
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000210:	2100      	movs	r1, #0
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 fe8e 	bl	8000f34 <HAL_CAN_GetRxMessage>
	flag = 1;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800021a:	2201      	movs	r2, #1
 800021c:	701a      	strb	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000100 	.word	0x20000100
 800022c:	2000011c 	.word	0x2000011c
 8000230:	20000028 	.word	0x20000028

08000234 <CLEAR_RxBuffer>:

void CLEAR_RxBuffer(void){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<100 ; i++){
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	e006      	b.n	800024e <CLEAR_RxBuffer+0x1a>
		record[i] = 0;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <CLEAR_RxBuffer+0x2c>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<100 ; i++){
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3301      	adds	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b63      	cmp	r3, #99	; 0x63
 8000252:	d9f5      	bls.n	8000240 <CLEAR_RxBuffer+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	2000002c 	.word	0x2000002c

08000264 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t dummyVal = 3;
 800026a:	2303      	movs	r3, #3
 800026c:	70fb      	strb	r3, [r7, #3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800026e:	f000 fb1d 	bl	80008ac <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000272:	f000 f8b5 	bl	80003e0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000276:	f000 f96b 	bl	8000550 <MX_GPIO_Init>
	MX_CAN_Init();
 800027a:	f000 f8ed 	bl	8000458 <MX_CAN_Init>
	MX_USART1_UART_Init();
 800027e:	f000 f93d 	bl	80004fc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000282:	484f      	ldr	r0, [pc, #316]	; (80003c0 <main+0x15c>)
 8000284:	f000 fd38 	bl	8000cf8 <HAL_CAN_Start>
	MUSART1_voidInit();
 8000288:	f7ff ff60 	bl	800014c <MUSART1_voidInit>

	/* USER CODE END 2 */
	RxHeader.DLC = 1;  // data length
 800028c:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <main+0x160>)
 800028e:	2201      	movs	r2, #1
 8000290:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000292:	4b4c      	ldr	r3, [pc, #304]	; (80003c4 <main+0x160>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000298:	4b4a      	ldr	r3, [pc, #296]	; (80003c4 <main+0x160>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x030;  // ID
 800029e:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <main+0x160>)
 80002a0:	2230      	movs	r2, #48	; 0x30
 80002a2:	601a      	str	r2, [r3, #0]


	TxHeader.DLC = 1;  // data length
 80002a4:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <main+0x164>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80002aa:	4b47      	ldr	r3, [pc, #284]	; (80003c8 <main+0x164>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80002b0:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <main+0x164>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103;  // ID
 80002b6:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <main+0x164>)
 80002b8:	f240 1203 	movw	r2, #259	; 0x103
 80002bc:	601a      	str	r2, [r3, #0]

	TxHeader_2.DLC = 1;  // data length
 80002be:	4b43      	ldr	r3, [pc, #268]	; (80003cc <main+0x168>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	611a      	str	r2, [r3, #16]
	TxHeader_2.IDE = CAN_ID_STD;
 80002c4:	4b41      	ldr	r3, [pc, #260]	; (80003cc <main+0x168>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
	TxHeader_2.RTR = CAN_RTR_DATA;
 80002ca:	4b40      	ldr	r3, [pc, #256]	; (80003cc <main+0x168>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
	TxHeader_2.StdId = 0x100;  // ID
 80002d0:	4b3e      	ldr	r3, [pc, #248]	; (80003cc <main+0x168>)
 80002d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d6:	601a      	str	r2, [r3, #0]

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002d8:	2102      	movs	r1, #2
 80002da:	4839      	ldr	r0, [pc, #228]	; (80003c0 <main+0x15c>)
 80002dc:	f000 ff3b 	bl	8001156 <HAL_CAN_ActivateNotification>

	uint8_t Local_u8RecStatus = 0 , u8RecCounter = 0 , finishRecordFlag = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	713b      	strb	r3, [r7, #4]
 80002e4:	2300      	movs	r3, #0
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	2300      	movs	r3, #0
 80002ea:	71bb      	strb	r3, [r7, #6]
	while(1){
		Local_u8RecStatus = 0 , u8RecCounter = 0 , finishRecordFlag = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	713b      	strb	r3, [r7, #4]
 80002f0:	2300      	movs	r3, #0
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	2300      	movs	r3, #0
 80002f6:	71bb      	strb	r3, [r7, #6]
		while(!(finishRecordFlag)){
 80002f8:	e017      	b.n	800032a <main+0xc6>
			Local_u8RecStatus = MUSART1_u8Receive( &(record[u8RecCounter]) );
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4a34      	ldr	r2, [pc, #208]	; (80003d0 <main+0x16c>)
 80002fe:	4413      	add	r3, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff61 	bl	80001c8 <MUSART1_u8Receive>
 8000306:	4603      	mov	r3, r0
 8000308:	713b      	strb	r3, [r7, #4]
			if(Local_u8RecStatus){
 800030a:	793b      	ldrb	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00c      	beq.n	800032a <main+0xc6>
				if(record[u8RecCounter] == '\n'){
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a2f      	ldr	r2, [pc, #188]	; (80003d0 <main+0x16c>)
 8000314:	5cd3      	ldrb	r3, [r2, r3]
 8000316:	2b0a      	cmp	r3, #10
 8000318:	d104      	bne.n	8000324 <main+0xc0>
					u8RecCounter = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
					finishRecordFlag = 1;
 800031e:	2301      	movs	r3, #1
 8000320:	71bb      	strb	r3, [r7, #6]
 8000322:	e002      	b.n	800032a <main+0xc6>
				} else{
					u8RecCounter ++ ;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3301      	adds	r3, #1
 8000328:	71fb      	strb	r3, [r7, #7]
		while(!(finishRecordFlag)){
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0e4      	beq.n	80002fa <main+0x96>
			}else{

			}
		}
		/* CAN: */
		if(record[8] == '4'){
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <main+0x16c>)
 8000332:	7a1b      	ldrb	r3, [r3, #8]
 8000334:	2b34      	cmp	r3, #52	; 0x34
 8000336:	d10d      	bne.n	8000354 <main+0xf0>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader_2, &dummyVal, &TxMailbox);
 8000338:	1cfa      	adds	r2, r7, #3
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <main+0x170>)
 800033c:	4923      	ldr	r1, [pc, #140]	; (80003cc <main+0x168>)
 800033e:	4820      	ldr	r0, [pc, #128]	; (80003c0 <main+0x15c>)
 8000340:	f000 fd1e 	bl	8000d80 <HAL_CAN_AddTxMessage>
			while(flag == 0);
 8000344:	bf00      	nop
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <main+0x174>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0fb      	beq.n	8000346 <main+0xe2>
			flag = 0;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <main+0x174>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
		}
		uint8_t i = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	717b      	strb	r3, [r7, #5]
		while(record[i] != '\n'){
 8000358:	e017      	b.n	800038a <main+0x126>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, &record[i], &TxMailbox);
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	4a1c      	ldr	r2, [pc, #112]	; (80003d0 <main+0x16c>)
 800035e:	441a      	add	r2, r3
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0x170>)
 8000362:	4919      	ldr	r1, [pc, #100]	; (80003c8 <main+0x164>)
 8000364:	4816      	ldr	r0, [pc, #88]	; (80003c0 <main+0x15c>)
 8000366:	f000 fd0b 	bl	8000d80 <HAL_CAN_AddTxMessage>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800036a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036e:	481b      	ldr	r0, [pc, #108]	; (80003dc <main+0x178>)
 8000370:	f001 fc64 	bl	8001c3c <HAL_GPIO_TogglePin>
			i++;
 8000374:	797b      	ldrb	r3, [r7, #5]
 8000376:	3301      	adds	r3, #1
 8000378:	717b      	strb	r3, [r7, #5]
			while(flag == 0);
 800037a:	bf00      	nop
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <main+0x174>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0fb      	beq.n	800037c <main+0x118>
			flag = 0;
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <main+0x174>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
		while(record[i] != '\n'){
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <main+0x16c>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	2b0a      	cmp	r3, #10
 8000392:	d1e2      	bne.n	800035a <main+0xf6>
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, &record[i], &TxMailbox);
 8000394:	797b      	ldrb	r3, [r7, #5]
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <main+0x16c>)
 8000398:	441a      	add	r2, r3
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <main+0x170>)
 800039c:	490a      	ldr	r1, [pc, #40]	; (80003c8 <main+0x164>)
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <main+0x15c>)
 80003a0:	f000 fcee 	bl	8000d80 <HAL_CAN_AddTxMessage>
		while(flag == 0);
 80003a4:	bf00      	nop
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <main+0x174>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0fb      	beq.n	80003a6 <main+0x142>
		flag = 0;
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <main+0x174>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
		CLEAR_RxBuffer();
 80003b4:	f7ff ff3e 	bl	8000234 <CLEAR_RxBuffer>
		MUSART1_voidTransmit(4);
 80003b8:	2004      	movs	r0, #4
 80003ba:	f7ff fee9 	bl	8000190 <MUSART1_voidTransmit>
	while(1){
 80003be:	e795      	b.n	80002ec <main+0x88>
 80003c0:	20000090 	.word	0x20000090
 80003c4:	2000011c 	.word	0x2000011c
 80003c8:	20000104 	.word	0x20000104
 80003cc:	20000138 	.word	0x20000138
 80003d0:	2000002c 	.word	0x2000002c
 80003d4:	200000fc 	.word	0x200000fc
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40011000 	.word	0x40011000

080003e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	; 0x40
 80003e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fc7c 	bl	8002cec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000402:	2302      	movs	r3, #2
 8000404:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040a:	2310      	movs	r3, #16
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800040e:	2300      	movs	r3, #0
 8000410:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fc2a 	bl	8001c70 <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000422:	f000 f8e9 	bl	80005f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fe96 	bl	8002170 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800044a:	f000 f8d5 	bl	80005f8 <Error_Handler>
	}
}
 800044e:	bf00      	nop
 8000450:	3740      	adds	r7, #64	; 0x40
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000460:	4a25      	ldr	r2, [pc, #148]	; (80004f8 <MX_CAN_Init+0xa0>)
 8000462:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000466:	2210      	movs	r2, #16
 8000468:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_CAN_Init+0x9c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800047c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000486:	2200      	movs	r2, #0
 8000488:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_CAN_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_CAN_Init+0x9c>)
 8000498:	2200      	movs	r2, #0
 800049a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_CAN_Init+0x9c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_CAN_Init+0x9c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004a8:	4812      	ldr	r0, [pc, #72]	; (80004f4 <MX_CAN_Init+0x9c>)
 80004aa:	f000 fa61 	bl	8000970 <HAL_CAN_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 80004b4:	f000 f8a0 	bl	80005f8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80004b8:	2301      	movs	r3, #1
 80004ba:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80004bc:	230a      	movs	r3, #10
 80004be:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 80004c4:	2300      	movs	r3, #0
 80004c6:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004d8:	2301      	movs	r3, #1
 80004da:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80004dc:	2300      	movs	r3, #0
 80004de:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80004e0:	463b      	mov	r3, r7
 80004e2:	4619      	mov	r1, r3
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <MX_CAN_Init+0x9c>)
 80004e6:	f000 fb3e 	bl	8000b66 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	3728      	adds	r7, #40	; 0x28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <MX_USART1_UART_Init+0x50>)
 8000504:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800050c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000522:	220c      	movs	r2, #12
 8000524:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_USART1_UART_Init+0x4c>)
 8000534:	f001 ffb8 	bl	80024a8 <HAL_UART_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800053e:	f000 f85b 	bl	80005f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000b8 	.word	0x200000b8
 800054c:	40013800 	.word	0x40013800

08000550 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_GPIO_Init+0x9c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <MX_GPIO_Init+0x9c>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_GPIO_Init+0x9c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_GPIO_Init+0x9c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <MX_GPIO_Init+0x9c>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_GPIO_Init+0x9c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <MX_GPIO_Init+0xa0>)
 800059c:	f001 fb36 	bl	8001c0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <MX_GPIO_Init+0xa4>)
 80005a6:	f001 fb31 	bl	8001c0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_GPIO_Init+0xa0>)
 80005c4:	f001 f9c8 	bl	8001958 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c8:	2302      	movs	r3, #2
 80005ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	4619      	mov	r1, r3
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_GPIO_Init+0xa4>)
 80005e0:	f001 f9ba 	bl	8001958 <HAL_GPIO_Init>

}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40010800 	.word	0x40010800

080005f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005fe:	e7fe      	b.n	80005fe <Error_Handler+0x6>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <HAL_CAN_MspInit+0xac>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d141      	bne.n	8000708 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_CAN_MspInit+0xb0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <HAL_CAN_MspInit+0xb4>)
 80006ca:	f001 f945 	bl	8001958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <HAL_CAN_MspInit+0xb4>)
 80006e4:	f001 f938 	bl	8001958 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2014      	movs	r0, #20
 80006ee:	f001 f84c 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006f2:	2014      	movs	r0, #20
 80006f4:	f001 f865 	bl	80017c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2015      	movs	r0, #21
 80006fe:	f001 f844 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000702:	2015      	movs	r0, #21
 8000704:	f001 f85d 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40006400 	.word	0x40006400
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <HAL_UART_MspInit+0x9c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d139      	bne.n	80007b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <HAL_UART_MspInit+0xa0>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <HAL_UART_MspInit+0xa0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_UART_MspInit+0xa0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_UART_MspInit+0xa0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_UART_MspInit+0xa0>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_UART_MspInit+0xa0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800076c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <HAL_UART_MspInit+0xa4>)
 8000782:	f001 f8e9 	bl	8001958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <HAL_UART_MspInit+0xa4>)
 800079c:	f001 f8dc 	bl	8001958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2025      	movs	r0, #37	; 0x25
 80007a6:	f000 fff0 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007aa:	2025      	movs	r0, #37	; 0x25
 80007ac:	f001 f809 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <HardFault_Handler+0x4>

080007d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <BusFault_Handler+0x4>

080007e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f892 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800081e:	f000 fcbf 	bl	80011a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090

0800082c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <CAN1_RX1_IRQHandler+0x10>)
 8000832:	f000 fcb5 	bl	80011a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000090 	.word	0x20000090

08000840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <USART1_IRQHandler+0x10>)
 8000846:	f001 fe7d 	bl	8002544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000b8 	.word	0x200000b8

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 fa0b 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fce9 	bl	8000264 <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	08002d48 	.word	0x08002d48
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	20000154 	.word	0x20000154

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 ff59 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe9a 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ff71 	bl	80017de <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 ff39 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000008 	.word	0x20000008
 8000958:	20000150 	.word	0x20000150

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000150 	.word	0x20000150

08000970 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e0ed      	b.n	8000b5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fe68 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a4:	f7ff ffda 	bl	800095c <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009aa:	e012      	b.n	80009d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009ac:	f7ff ffd6 	bl	800095c <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d90b      	bls.n	80009d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2205      	movs	r2, #5
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e0c5      	b.n	8000b5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0e5      	beq.n	80009ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0202 	bic.w	r2, r2, #2
 80009ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f0:	f7ff ffb4 	bl	800095c <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009f6:	e012      	b.n	8000a1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f8:	f7ff ffb0 	bl	800095c <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d90b      	bls.n	8000a1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e09f      	b.n	8000b5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1e5      	bne.n	80009f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7e1b      	ldrb	r3, [r3, #24]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d108      	bne.n	8000a46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e007      	b.n	8000a56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7e5b      	ldrb	r3, [r3, #25]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e007      	b.n	8000a80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7e9b      	ldrb	r3, [r3, #26]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d108      	bne.n	8000a9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0220 	orr.w	r2, r2, #32
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0220 	bic.w	r2, r2, #32
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7edb      	ldrb	r3, [r3, #27]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d108      	bne.n	8000ac4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0210 	bic.w	r2, r2, #16
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e007      	b.n	8000ad4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0210 	orr.w	r2, r2, #16
 8000ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7f1b      	ldrb	r3, [r3, #28]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d108      	bne.n	8000aee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0208 	orr.w	r2, r2, #8
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e007      	b.n	8000afe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0208 	bic.w	r2, r2, #8
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7f5b      	ldrb	r3, [r3, #29]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d108      	bne.n	8000b18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0204 	orr.w	r2, r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e007      	b.n	8000b28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0204 	bic.w	r2, r2, #4
 8000b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	ea42 0103 	orr.w	r1, r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	1e5a      	subs	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b7c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b7e:	7cfb      	ldrb	r3, [r7, #19]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d003      	beq.n	8000b8c <HAL_CAN_ConfigFilter+0x26>
 8000b84:	7cfb      	ldrb	r3, [r7, #19]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	f040 80aa 	bne.w	8000ce0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d123      	bne.n	8000c0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000be8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3248      	adds	r2, #72	; 0x48
 8000bee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	3348      	adds	r3, #72	; 0x48
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	440b      	add	r3, r1
 8000c0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d122      	bne.n	8000c5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3248      	adds	r2, #72	; 0x48
 8000c3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c52:	6979      	ldr	r1, [r7, #20]
 8000c54:	3348      	adds	r3, #72	; 0x48
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c76:	e007      	b.n	8000c88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ca2:	e007      	b.n	8000cb4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d107      	bne.n	8000ccc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cd2:	f023 0201 	bic.w	r2, r3, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e006      	b.n	8000cee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
  }
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d12e      	bne.n	8000d6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d24:	f7ff fe1a 	bl	800095c <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d2a:	e012      	b.n	8000d52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2c:	f7ff fe16 	bl	800095c <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d90b      	bls.n	8000d52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e012      	b.n	8000d78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e006      	b.n	8000d78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
  }
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d9e:	7ffb      	ldrb	r3, [r7, #31]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d003      	beq.n	8000dac <HAL_CAN_AddTxMessage+0x2c>
 8000da4:	7ffb      	ldrb	r3, [r7, #31]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	f040 80b8 	bne.w	8000f1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80a0 	beq.w	8000f0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	0e1b      	lsrs	r3, r3, #24
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d907      	bls.n	8000dec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e09e      	b.n	8000f2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dec:	2201      	movs	r2, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	409a      	lsls	r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e08:	68f9      	ldr	r1, [r7, #12]
 8000e0a:	6809      	ldr	r1, [r1, #0]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3318      	adds	r3, #24
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e00f      	b.n	8000e3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e2a:	68f9      	ldr	r1, [r7, #12]
 8000e2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3318      	adds	r3, #24
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	440b      	add	r3, r1
 8000e38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3318      	adds	r3, #24
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	440b      	add	r3, r1
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	7d1b      	ldrb	r3, [r3, #20]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d111      	bne.n	8000e7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3318      	adds	r3, #24
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	440b      	add	r3, r1
 8000e76:	3304      	adds	r3, #4
 8000e78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	061a      	lsls	r2, r3, #24
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3306      	adds	r3, #6
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3305      	adds	r3, #5
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	4313      	orrs	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	3204      	adds	r2, #4
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	ea43 0200 	orr.w	r2, r3, r0
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	440b      	add	r3, r1
 8000eac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000eb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	061a      	lsls	r2, r3, #24
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	041b      	lsls	r3, r3, #16
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	6811      	ldr	r1, [r2, #0]
 8000ed8:	ea43 0200 	orr.w	r2, r3, r0
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	440b      	add	r3, r1
 8000ee2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ee6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3318      	adds	r3, #24
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	f043 0201 	orr.w	r2, r3, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3318      	adds	r3, #24
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e00e      	b.n	8000f2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e006      	b.n	8000f2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
  }
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <HAL_CAN_GetRxMessage+0x24>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	f040 80f3 	bne.w	800113e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10e      	bne.n	8000f7c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d116      	bne.n	8000f9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e0e7      	b.n	800114c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d107      	bne.n	8000f9a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0d8      	b.n	800114c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	331b      	adds	r3, #27
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0204 	and.w	r2, r3, #4
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	331b      	adds	r3, #27
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0d5b      	lsrs	r3, r3, #21
 8000fc8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e00b      	b.n	8000fea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	331b      	adds	r3, #27
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	331b      	adds	r3, #27
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0202 	and.w	r2, r3, #2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	331b      	adds	r3, #27
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 020f 	and.w	r2, r3, #15
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	331b      	adds	r3, #27
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b2da      	uxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	331b      	adds	r3, #27
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	3304      	adds	r3, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0c1b      	lsrs	r3, r3, #16
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4413      	add	r3, r2
 8001052:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4413      	add	r3, r2
 8001068:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0a1a      	lsrs	r2, r3, #8
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0c1a      	lsrs	r2, r3, #16
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0e1a      	lsrs	r2, r3, #24
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3303      	adds	r3, #3
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3304      	adds	r3, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0a1a      	lsrs	r2, r3, #8
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3305      	adds	r3, #5
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0c1a      	lsrs	r2, r3, #16
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3306      	adds	r3, #6
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0e1a      	lsrs	r2, r3, #24
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3307      	adds	r3, #7
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0220 	orr.w	r2, r2, #32
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	e007      	b.n	800113a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0220 	orr.w	r2, r2, #32
 8001138:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e006      	b.n	800114c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
  }
}
 800114c:	4618      	mov	r0, r3
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d002      	beq.n	8001174 <HAL_CAN_ActivateNotification+0x1e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d109      	bne.n	8001188 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6959      	ldr	r1, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e006      	b.n	8001196 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
  }
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d07c      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f97d 	bl	8001502 <HAL_CAN_TxMailbox0CompleteCallback>
 8001208:	e016      	b.n	8001238 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e00c      	b.n	8001238 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	e002      	b.n	8001238 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f980 	bl	8001538 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f95c 	bl	8001514 <HAL_CAN_TxMailbox1CompleteCallback>
 800125c:	e016      	b.n	800128c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
 8001270:	e00c      	b.n	800128c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
 8001284:	e002      	b.n	800128c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f95f 	bl	800154a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d024      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f93b 	bl	8001526 <HAL_CAN_TxMailbox2CompleteCallback>
 80012b0:	e016      	b.n	80012e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
 80012c4:	e00c      	b.n	80012e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	e002      	b.n	80012e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f93e 	bl	800155c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2210      	movs	r2, #16
 8001302:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2208      	movs	r2, #8
 800131e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f924 	bl	800156e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d009      	beq.n	8001344 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7fe ff60 	bl	8000204 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2210      	movs	r2, #16
 8001366:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2208      	movs	r2, #8
 8001382:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f904 	bl	8001592 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f8ec 	bl	8001580 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2210      	movs	r2, #16
 80013c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8ed 	bl	80015a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00b      	beq.n	80013ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2208      	movs	r2, #8
 80013e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f8e5 	bl	80015b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d075      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d06c      	beq.n	80014da <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03d      	beq.n	80014da <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d038      	beq.n	80014da <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800146e:	2b30      	cmp	r3, #48	; 0x30
 8001470:	d017      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x302>
 8001472:	2b30      	cmp	r3, #48	; 0x30
 8001474:	d804      	bhi.n	8001480 <HAL_CAN_IRQHandler+0x2e0>
 8001476:	2b10      	cmp	r3, #16
 8001478:	d009      	beq.n	800148e <HAL_CAN_IRQHandler+0x2ee>
 800147a:	2b20      	cmp	r3, #32
 800147c:	d00c      	beq.n	8001498 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800147e:	e024      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001480:	2b50      	cmp	r3, #80	; 0x50
 8001482:	d018      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x316>
 8001484:	2b60      	cmp	r3, #96	; 0x60
 8001486:	d01b      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x320>
 8001488:	2b40      	cmp	r3, #64	; 0x40
 800148a:	d00f      	beq.n	80014ac <HAL_CAN_IRQHandler+0x30c>
            break;
 800148c:	e01d      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001496:	e018      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a0:	e013      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014aa:	e00e      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b4:	e009      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014be:	e004      	b.n	80014ca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2204      	movs	r2, #4
 80014e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f867 	bl	80015c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff2d 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff42 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff35 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001808:	2b02      	cmp	r3, #2
 800180a:	d008      	beq.n	800181e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e020      	b.n	8001860 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020e 	bic.w	r2, r2, #14
 800182c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
	...

0800186c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800187e:	2b02      	cmp	r3, #2
 8001880:	d005      	beq.n	800188e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2204      	movs	r2, #4
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e051      	b.n	8001932 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 020e 	bic.w	r2, r2, #14
 800189c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_DMA_Abort_IT+0xd0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d029      	beq.n	800190c <HAL_DMA_Abort_IT+0xa0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <HAL_DMA_Abort_IT+0xd4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d022      	beq.n	8001908 <HAL_DMA_Abort_IT+0x9c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_DMA_Abort_IT+0xd8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d01a      	beq.n	8001902 <HAL_DMA_Abort_IT+0x96>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_DMA_Abort_IT+0xdc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d012      	beq.n	80018fc <HAL_DMA_Abort_IT+0x90>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <HAL_DMA_Abort_IT+0xe0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00a      	beq.n	80018f6 <HAL_DMA_Abort_IT+0x8a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_DMA_Abort_IT+0xe4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d102      	bne.n	80018f0 <HAL_DMA_Abort_IT+0x84>
 80018ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ee:	e00e      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 80018f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018f4:	e00b      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 80018f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fa:	e008      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	e005      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	e002      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 8001908:	2310      	movs	r3, #16
 800190a:	e000      	b.n	800190e <HAL_DMA_Abort_IT+0xa2>
 800190c:	2301      	movs	r3, #1
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_DMA_Abort_IT+0xe8>)
 8001910:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
    } 
  }
  return status;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020008 	.word	0x40020008
 8001940:	4002001c 	.word	0x4002001c
 8001944:	40020030 	.word	0x40020030
 8001948:	40020044 	.word	0x40020044
 800194c:	40020058 	.word	0x40020058
 8001950:	4002006c 	.word	0x4002006c
 8001954:	40020000 	.word	0x40020000

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	e127      	b.n	8001bbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800196c:	2201      	movs	r2, #1
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8116 	bne.w	8001bb6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b12      	cmp	r3, #18
 8001990:	d034      	beq.n	80019fc <HAL_GPIO_Init+0xa4>
 8001992:	2b12      	cmp	r3, #18
 8001994:	d80d      	bhi.n	80019b2 <HAL_GPIO_Init+0x5a>
 8001996:	2b02      	cmp	r3, #2
 8001998:	d02b      	beq.n	80019f2 <HAL_GPIO_Init+0x9a>
 800199a:	2b02      	cmp	r3, #2
 800199c:	d804      	bhi.n	80019a8 <HAL_GPIO_Init+0x50>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d031      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d01c      	beq.n	80019e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a6:	e048      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d043      	beq.n	8001a34 <HAL_GPIO_Init+0xdc>
 80019ac:	2b11      	cmp	r3, #17
 80019ae:	d01b      	beq.n	80019e8 <HAL_GPIO_Init+0x90>
          break;
 80019b0:	e043      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b2:	4a89      	ldr	r2, [pc, #548]	; (8001bd8 <HAL_GPIO_Init+0x280>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d026      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
 80019b8:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <HAL_GPIO_Init+0x280>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d806      	bhi.n	80019cc <HAL_GPIO_Init+0x74>
 80019be:	4a87      	ldr	r2, [pc, #540]	; (8001bdc <HAL_GPIO_Init+0x284>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d020      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
 80019c4:	4a86      	ldr	r2, [pc, #536]	; (8001be0 <HAL_GPIO_Init+0x288>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
          break;
 80019ca:	e036      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019cc:	4a85      	ldr	r2, [pc, #532]	; (8001be4 <HAL_GPIO_Init+0x28c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
 80019d2:	4a85      	ldr	r2, [pc, #532]	; (8001be8 <HAL_GPIO_Init+0x290>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d016      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
 80019d8:	4a84      	ldr	r2, [pc, #528]	; (8001bec <HAL_GPIO_Init+0x294>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xae>
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e028      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e023      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01e      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e019      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e012      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e008      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2bff      	cmp	r3, #255	; 0xff
 8001a3e:	d801      	bhi.n	8001a44 <HAL_GPIO_Init+0xec>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	e001      	b.n	8001a48 <HAL_GPIO_Init+0xf0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2bff      	cmp	r3, #255	; 0xff
 8001a4e:	d802      	bhi.n	8001a56 <HAL_GPIO_Init+0xfe>
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x104>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3b08      	subs	r3, #8
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	210f      	movs	r1, #15
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	6a39      	ldr	r1, [r7, #32]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8096 	beq.w	8001bb6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_GPIO_Init+0x298>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_GPIO_Init+0x298>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_GPIO_Init+0x298>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa2:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x29c>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_GPIO_Init+0x2a0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x19e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_GPIO_Init+0x2a4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x19a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <HAL_GPIO_Init+0x2a8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x196>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2ac>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x192>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x1a0>
 8001aea:	2304      	movs	r3, #4
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x1a0>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x1a0>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x1a0>
 8001af6:	2300      	movs	r3, #0
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b08:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x29c>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4938      	ldr	r1, [pc, #224]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4933      	ldr	r1, [pc, #204]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	492e      	ldr	r1, [pc, #184]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4929      	ldr	r1, [pc, #164]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	491f      	ldr	r1, [pc, #124]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	491a      	ldr	r1, [pc, #104]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4915      	ldr	r1, [pc, #84]	; (8001c08 <HAL_GPIO_Init+0x2b0>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f47f aed0 	bne.w	800196c <HAL_GPIO_Init+0x14>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	372c      	adds	r7, #44	; 0x2c
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10310000 	.word	0x10310000
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40011400 	.word	0x40011400
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c28:	e003      	b.n	8001c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	041a      	lsls	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43d9      	mvns	r1, r3
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	611a      	str	r2, [r3, #16]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e26c      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8087 	beq.w	8001d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c90:	4b92      	ldr	r3, [pc, #584]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c9c:	4b8f      	ldr	r3, [pc, #572]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d112      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d06c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x12c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d168      	bne.n	8001d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e246      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x76>
 8001cd8:	4b80      	ldr	r3, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a7f      	ldr	r2, [pc, #508]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e02e      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7a      	ldr	r2, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b78      	ldr	r3, [pc, #480]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a77      	ldr	r2, [pc, #476]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e01d      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0xbc>
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a71      	ldr	r2, [pc, #452]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a67      	ldr	r2, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fe06 	bl	800095c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe fe02 	bl	800095c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1fa      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0xe4>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe fdf2 	bl	800095c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7fe fdee 	bl	800095c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1e6      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x10c>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
 8001dc2:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1ba      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4939      	ldr	r1, [pc, #228]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fda7 	bl	800095c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7fe fda3 	bl	800095c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e19b      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4927      	ldr	r1, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fd86 	bl	800095c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7fe fd82 	bl	800095c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e17a      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fd66 	bl	800095c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7fe fd62 	bl	800095c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e15a      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 fada 	bl	800246c <RCC_Delay>
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fd4c 	bl	800095c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7fe fd48 	bl	800095c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e140      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	42420000 	.word	0x42420000
 8001ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b9e      	ldr	r3, [pc, #632]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e9      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a6 	beq.w	800204e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b97      	ldr	r3, [pc, #604]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b94      	ldr	r3, [pc, #592]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a93      	ldr	r2, [pc, #588]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b91      	ldr	r3, [pc, #580]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b8e      	ldr	r3, [pc, #568]	; (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4b8b      	ldr	r3, [pc, #556]	; (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a8a      	ldr	r2, [pc, #552]	; (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7fe fd09 	bl	800095c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7fe fd05 	bl	800095c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0fd      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x312>
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e02d      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x334>
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a75      	ldr	r2, [pc, #468]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a72      	ldr	r2, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	e01c      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x356>
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a6c      	ldr	r2, [pc, #432]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a69      	ldr	r2, [pc, #420]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a66      	ldr	r2, [pc, #408]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d015      	beq.n	8002012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fcb9 	bl	800095c <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe fcb5 	bl	800095c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0ab      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ee      	beq.n	8001fee <HAL_RCC_OscConfig+0x37e>
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7fe fca3 	bl	800095c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fc9f 	bl	800095c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e095      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ee      	bne.n	800201a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b48      	ldr	r3, [pc, #288]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8081 	beq.w	800215a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d061      	beq.n	8002128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d146      	bne.n	80020fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_OscConfig+0x4fc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fc73 	bl	800095c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe fc6f 	bl	800095c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e067      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	492d      	ldr	r1, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a19      	ldr	r1, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	430b      	orrs	r3, r1
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x4fc>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fc43 	bl	800095c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe fc3f 	bl	800095c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e037      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x46a>
 80020f8:	e02f      	b.n	800215a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_RCC_OscConfig+0x4fc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fc2c 	bl	800095c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe fc28 	bl	800095c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e020      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x498>
 8002126:	e018      	b.n	800215a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e013      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	42420060 	.word	0x42420060

08002170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d0      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4965      	ldr	r1, [pc, #404]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d040      	beq.n	8002290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e073      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4936      	ldr	r1, [pc, #216]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7fe fb7c 	bl	800095c <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7fe fb78 	bl	800095c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e053      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d210      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4922      	ldr	r1, [pc, #136]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4601      	mov	r1, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	fa21 f303 	lsr.w	r3, r1, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1cc>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fada 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	08002d28 	.word	0x08002d28
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b490      	push	{r4, r7}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800234c:	1d3c      	adds	r4, r7, #4
 800234e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x40>
 800237e:	2b08      	cmp	r3, #8
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x46>
 8002382:	e02d      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002386:	623b      	str	r3, [r7, #32]
      break;
 8002388:	e02d      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002396:	4413      	add	r3, r2
 8002398:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800239c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c5b      	lsrs	r3, r3, #17
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b6:	4413      	add	r3, r2
 80023b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c2:	fb02 f203 	mul.w	r2, r2, r3
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	e004      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	623b      	str	r3, [r7, #32]
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023e2:	623b      	str	r3, [r7, #32]
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc90      	pop	{r4, r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	08002d14 	.word	0x08002d14
 80023f8:	08002d24 	.word	0x08002d24
 80023fc:	40021000 	.word	0x40021000
 8002400:	007a1200 	.word	0x007a1200
 8002404:	003d0900 	.word	0x003d0900

08002408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <HAL_RCC_GetHCLKFreq+0x10>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000000 	.word	0x20000000

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002420:	f7ff fff2 	bl	8002408 <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08002d38 	.word	0x08002d38

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002448:	f7ff ffde 	bl	8002408 <HAL_RCC_GetHCLKFreq>
 800244c:	4601      	mov	r1, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0adb      	lsrs	r3, r3, #11
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	08002d38 	.word	0x08002d38

0800246c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <RCC_Delay+0x34>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <RCC_Delay+0x38>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002488:	bf00      	nop
  }
  while (Delay --);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f9      	bne.n	8002488 <RCC_Delay+0x1c>
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000
 80024a4:	10624dd3 	.word	0x10624dd3

080024a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e03f      	b.n	800253a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe f924 	bl	800071c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fb4b 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_UART_IRQHandler+0x52>
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa51 	bl	8002a36 <UART_Receive_IT>
      return;
 8002594:	e17c      	b.n	8002890 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80b1 	beq.w	8002700 <HAL_UART_IRQHandler+0x1bc>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_UART_IRQHandler+0x70>
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80a6 	beq.w	8002700 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_UART_IRQHandler+0x90>
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_UART_IRQHandler+0xb0>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_UART_IRQHandler+0xd0>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00f      	beq.n	800263e <HAL_UART_IRQHandler+0xfa>
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_UART_IRQHandler+0xee>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 811f 	beq.w	8002886 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_UART_IRQHandler+0x11e>
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9ea 	bl	8002a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_UART_IRQHandler+0x146>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d031      	beq.n	80026ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f92c 	bl	80028e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4a77      	ldr	r2, [pc, #476]	; (8002898 <HAL_UART_IRQHandler+0x354>)
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f8d2 	bl	800186c <HAL_DMA_Abort_IT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d8:	4610      	mov	r0, r2
 80026da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00e      	b.n	80026fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8ee 	bl	80028c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e00a      	b.n	80026fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8ea 	bl	80028c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	e006      	b.n	80026fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8e6 	bl	80028c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026fa:	e0c4      	b.n	8002886 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fc:	bf00      	nop
    return;
 80026fe:	e0c2      	b.n	8002886 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 80a1 	bne.w	800284c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 809b 	beq.w	800284c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8095 	beq.w	800284c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04e      	beq.n	80027e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002750:	8a3b      	ldrh	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8099 	beq.w	800288a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275c:	8a3a      	ldrh	r2, [r7, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	f080 8093 	bcs.w	800288a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8a3a      	ldrh	r2, [r7, #16]
 8002768:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b20      	cmp	r3, #32
 8002772:	d02b      	beq.n	80027cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002782:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0210 	bic.w	r2, r2, #16
 80027c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f815 	bl	80017f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f878 	bl	80028d2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027e2:	e052      	b.n	800288a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d048      	beq.n	800288e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80027fc:	8a7b      	ldrh	r3, [r7, #18]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d045      	beq.n	800288e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002810:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0210 	bic.w	r2, r2, #16
 800283e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f844 	bl	80028d2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800284a:	e020      	b.n	800288e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_UART_IRQHandler+0x324>
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f881 	bl	8002968 <UART_Transmit_IT>
    return;
 8002866:	e013      	b.n	8002890 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <HAL_UART_IRQHandler+0x34c>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d009      	beq.n	8002890 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f8c2 	bl	8002a06 <UART_EndTransmit_IT>
    return;
 8002882:	bf00      	nop
 8002884:	e004      	b.n	8002890 <HAL_UART_IRQHandler+0x34c>
    return;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <HAL_UART_IRQHandler+0x34c>
      return;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HAL_UART_IRQHandler+0x34c>
      return;
 800288e:	bf00      	nop
  }
}
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	08002941 	.word	0x08002941

0800289c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0210 	bic.w	r2, r2, #16
 8002926:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff ffb0 	bl	80028c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b21      	cmp	r3, #33	; 0x21
 800297a:	d13e      	bne.n	80029fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d114      	bne.n	80029b0 <UART_Transmit_IT+0x48>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d110      	bne.n	80029b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]
 80029ae:	e008      	b.n	80029c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	1c59      	adds	r1, r3, #1
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6211      	str	r1, [r2, #32]
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4619      	mov	r1, r3
 80029d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff38 	bl	800289c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b22      	cmp	r3, #34	; 0x22
 8002a48:	f040 8099 	bne.w	8002b7e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d117      	bne.n	8002a86 <UART_Receive_IT+0x50>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
 8002a84:	e026      	b.n	8002ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d007      	beq.n	8002aaa <UART_Receive_IT+0x74>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <UART_Receive_IT+0x82>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e008      	b.n	8002aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d148      	bne.n	8002b7a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0220 	bic.w	r2, r2, #32
 8002af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d123      	bne.n	8002b70 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0210 	bic.w	r2, r2, #16
 8002b3c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d10a      	bne.n	8002b62 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff feb2 	bl	80028d2 <HAL_UARTEx_RxEventCallback>
 8002b6e:	e002      	b.n	8002b76 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fe9c 	bl	80028ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e002      	b.n	8002b80 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bc2:	f023 030c 	bic.w	r3, r3, #12
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <UART_SetConfig+0x114>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fc28 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff fc10 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	0119      	lsls	r1, r3, #4
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	4419      	add	r1, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	440a      	add	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	4e0c      	ldr	r6, [pc, #48]	; (8002cdc <__libc_init_array+0x38>)
 8002caa:	4c0d      	ldr	r4, [pc, #52]	; (8002ce0 <__libc_init_array+0x3c>)
 8002cac:	1ba4      	subs	r4, r4, r6
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	42a5      	cmp	r5, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	f000 f822 	bl	8002cfc <_init>
 8002cb8:	2500      	movs	r5, #0
 8002cba:	4e0a      	ldr	r6, [pc, #40]	; (8002ce4 <__libc_init_array+0x40>)
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	; (8002ce8 <__libc_init_array+0x44>)
 8002cbe:	1ba4      	subs	r4, r4, r6
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	42a5      	cmp	r5, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ccc:	4798      	blx	r3
 8002cce:	3501      	adds	r5, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cd6:	4798      	blx	r3
 8002cd8:	3501      	adds	r5, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08002d40 	.word	0x08002d40
 8002ce0:	08002d40 	.word	0x08002d40
 8002ce4:	08002d40 	.word	0x08002d40
 8002ce8:	08002d44 	.word	0x08002d44

08002cec <memset>:
 8002cec:	4603      	mov	r3, r0
 8002cee:	4402      	add	r2, r0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <memset+0xa>
 8002cf4:	4770      	bx	lr
 8002cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfa:	e7f9      	b.n	8002cf0 <memset+0x4>

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
