
CAN_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e3c  08001e3c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001e3c  08001e3c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e3c  08001e3c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e40  08001e40  00011e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000018  08001e5c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001e5c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ea3  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011af  00000000  00000000  00024ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000540  00000000  00000000  00026098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000498  00000000  00000000  000265d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f93  00000000  00000000  00026a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004884  00000000  00000000  0003ca03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e64e  00000000  00000000  00041287  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf8d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001364  00000000  00000000  000bf950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e14 	.word	0x08001e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001e14 	.word	0x08001e14

0800014c <FPEC_voidEraseAppArea>:
#include "FPEC_interface.h"
#include "FPEC_private.h"
#include "FPEC_config.h"

void FPEC_voidEraseAppArea(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint8_t i;
	
	for (i=12;i<127;i++)
 8000152:	230c      	movs	r3, #12
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e006      	b.n	8000166 <FPEC_voidEraseAppArea+0x1a>
	{
		FPEC_voidFlashPageErase(i);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4618      	mov	r0, r3
 800015c:	f000 f80a 	bl	8000174 <FPEC_voidFlashPageErase>
	for (i=12;i<127;i++)
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	3301      	adds	r3, #1
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b7e      	cmp	r3, #126	; 0x7e
 800016a:	d9f5      	bls.n	8000158 <FPEC_voidEraseAppArea+0xc>
	}
}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <FPEC_voidFlashPageErase>:

void FPEC_voidFlashPageErase(uint8_t Copy_u8PageNumber)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	/* Wait Busy Flag */
	while (READ_BIT(FPEC->SR,0) == 1);
 800017e:	bf00      	nop
 8000180:	4b1e      	ldr	r3, [pc, #120]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	f003 0301 	and.w	r3, r3, #1
 8000188:	2b01      	cmp	r3, #1
 800018a:	d0f9      	beq.n	8000180 <FPEC_voidFlashPageErase+0xc>

	/* Check if FPEC is locked or not */
	if ( READ_BIT(FPEC->CR,7) == 1)
 800018c:	4b1b      	ldr	r3, [pc, #108]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 800018e:	691b      	ldr	r3, [r3, #16]
 8000190:	11db      	asrs	r3, r3, #7
 8000192:	f003 0301 	and.w	r3, r3, #1
 8000196:	2b01      	cmp	r3, #1
 8000198:	d105      	bne.n	80001a6 <FPEC_voidFlashPageErase+0x32>
	{
		FPEC -> KEYR = 0x45670123;
 800019a:	4b18      	ldr	r3, [pc, #96]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 800019c:	4a18      	ldr	r2, [pc, #96]	; (8000200 <FPEC_voidFlashPageErase+0x8c>)
 800019e:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 80001a0:	4b16      	ldr	r3, [pc, #88]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001a2:	4a18      	ldr	r2, [pc, #96]	; (8000204 <FPEC_voidFlashPageErase+0x90>)
 80001a4:	605a      	str	r2, [r3, #4]
	}
	
	/* Page Erase Operation */
	SET_BIT(FPEC->CR,1);
 80001a6:	4b15      	ldr	r3, [pc, #84]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001a8:	691b      	ldr	r3, [r3, #16]
 80001aa:	4a14      	ldr	r2, [pc, #80]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001ac:	f043 0302 	orr.w	r3, r3, #2
 80001b0:	6113      	str	r3, [r2, #16]

	/* Write Page address */
	FPEC->AR = (uint32_t)(Copy_u8PageNumber * 1024) + 0x08000000 ;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80001b8:	4a10      	ldr	r2, [pc, #64]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001ba:	029b      	lsls	r3, r3, #10
 80001bc:	6153      	str	r3, [r2, #20]

	/* Start operation */
	SET_BIT(FPEC->CR,6);
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001c0:	691b      	ldr	r3, [r3, #16]
 80001c2:	4a0e      	ldr	r2, [pc, #56]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001c8:	6113      	str	r3, [r2, #16]

	/* Wait Busy Flag */
	while (READ_BIT(FPEC->SR,0) == 1);
 80001ca:	bf00      	nop
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d0f9      	beq.n	80001cc <FPEC_voidFlashPageErase+0x58>

	/* EOP */
	SET_BIT(FPEC->SR,5);
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(FPEC->CR,1);
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <FPEC_voidFlashPageErase+0x88>)
 80001ea:	f023 0302 	bic.w	r3, r3, #2
 80001ee:	6113      	str	r3, [r2, #16]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000
 8000200:	45670123 	.word	0x45670123
 8000204:	cdef89ab 	.word	0xcdef89ab

08000208 <FPEC_voidFlashWrite>:

void FPEC_voidFlashWrite(uint32_t Copy_u32Address, uint16_t* Copy_u16Data, uint8_t Copy_u8Length)
{
 8000208:	b480      	push	{r7}
 800020a:	b087      	sub	sp, #28
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	4613      	mov	r3, r2
 8000214:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	volatile uint16_t Temp;

	while (READ_BIT(FPEC->SR,0) == 1);
 8000216:	bf00      	nop
 8000218:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	f003 0301 	and.w	r3, r3, #1
 8000220:	2b01      	cmp	r3, #1
 8000222:	d0f9      	beq.n	8000218 <FPEC_voidFlashWrite+0x10>

	/* Check if FPEC is locked or not */
	if ( /* FPEC_CR->BitAccess.LOCK == 1 */ READ_BIT(FPEC->CR,7) == 1 )
 8000224:	4b23      	ldr	r3, [pc, #140]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	11db      	asrs	r3, r3, #7
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b01      	cmp	r3, #1
 8000230:	d105      	bne.n	800023e <FPEC_voidFlashWrite+0x36>
	{
		FPEC -> KEYR = 0x45670123;
 8000232:	4b20      	ldr	r3, [pc, #128]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000234:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <FPEC_voidFlashWrite+0xb0>)
 8000236:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 8000238:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 800023a:	4a20      	ldr	r2, [pc, #128]	; (80002bc <FPEC_voidFlashWrite+0xb4>)
 800023c:	605a      	str	r2, [r3, #4]
	}
	
	
	for (i = 0; i< Copy_u8Length; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	75fb      	strb	r3, [r7, #23]
 8000242:	e02d      	b.n	80002a0 <FPEC_voidFlashWrite+0x98>
	{
		/* Write Flash Programming */
		SET_BIT(FPEC->CR,0);
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6113      	str	r3, [r2, #16]

		/* Half word operation */

		Temp = Copy_u16Data[(uint32_t)i];
 8000250:	7dfb      	ldrb	r3, [r7, #23]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	4413      	add	r3, r2
 8000258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800025c:	82bb      	strh	r3, [r7, #20]
		*((volatile uint16_t*)Copy_u32Address) = Copy_u16Data[(uint32_t)i];
 800025e:	7dfb      	ldrb	r3, [r7, #23]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	441a      	add	r2, r3
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	f9b2 2000 	ldrsh.w	r2, [r2]
 800026c:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2 ;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3302      	adds	r3, #2
 8000272:	60fb      	str	r3, [r7, #12]

		/* Wait Busy Flag */
		while (READ_BIT(FPEC->SR,0) == 1);
 8000274:	bf00      	nop
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b01      	cmp	r3, #1
 8000280:	d0f9      	beq.n	8000276 <FPEC_voidFlashWrite+0x6e>
	
		/* EOP */
		SET_BIT(FPEC->SR,5);
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000288:	f043 0320 	orr.w	r3, r3, #32
 800028c:	60d3      	str	r3, [r2, #12]
		CLEAR_BIT(FPEC->CR,0);
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4a08      	ldr	r2, [pc, #32]	; (80002b4 <FPEC_voidFlashWrite+0xac>)
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6113      	str	r3, [r2, #16]
	for (i = 0; i< Copy_u8Length; i++)
 800029a:	7dfb      	ldrb	r3, [r7, #23]
 800029c:	3301      	adds	r3, #1
 800029e:	75fb      	strb	r3, [r7, #23]
 80002a0:	7dfa      	ldrb	r2, [r7, #23]
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d3cd      	bcc.n	8000244 <FPEC_voidFlashWrite+0x3c>
	}

}
 80002a8:	bf00      	nop
 80002aa:	371c      	adds	r7, #28
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40022000 	.word	0x40022000
 80002b8:	45670123 	.word	0x45670123
 80002bc:	cdef89ab 	.word	0xcdef89ab

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	db0a      	blt.n	80002ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <__NVIC_SetPriority+0x4c>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	0112      	lsls	r2, r2, #4
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	440b      	add	r3, r1
 80002e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e8:	e00a      	b.n	8000300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <__NVIC_SetPriority+0x50>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3b04      	subs	r3, #4
 80002f8:	0112      	lsls	r2, r2, #4
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	440b      	add	r3, r1
 80002fe:	761a      	strb	r2, [r3, #24]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3b01      	subs	r3, #1
 8000320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000324:	d301      	bcc.n	800032a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000326:	2301      	movs	r3, #1
 8000328:	e00f      	b.n	800034a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <SysTick_Config+0x40>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3b01      	subs	r3, #1
 8000330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000332:	210f      	movs	r1, #15
 8000334:	f04f 30ff 	mov.w	r0, #4294967295
 8000338:	f7ff ffc2 	bl	80002c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <SysTick_Config+0x40>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <SysTick_Config+0x40>)
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	e000e010 	.word	0xe000e010

08000358 <HAL_CAN_RxFifo0MsgPendingCallback>:
typedef void(* fun_ptr)(void);
fun_ptr addr_to_call = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	flag = 1;
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000362:	2201      	movs	r2, #1
 8000364:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000366:	2102      	movs	r1, #2
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800036a:	f001 fd15 	bl	8001d98 <HAL_GPIO_TogglePin>
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &RxData[g_i]);
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000376:	4413      	add	r3, r2
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800037a:	2100      	movs	r1, #0
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f000 ff37 	bl	80011f0 <HAL_CAN_GetRxMessage>
	g_i++;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800038c:	701a      	strb	r2, [r3, #0]

}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000009e 	.word	0x2000009e
 800039c:	40010800 	.word	0x40010800
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	20000038 	.word	0x20000038
 80003a8:	200001b4 	.word	0x200001b4

080003ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t firstRecordReceived = 1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003b6:	f000 fbcb 	bl	8000b50 <HAL_Init>

	/* USER CODE BEGIN Init */

	RxHeader.DLC = 1;
 80003ba:	4b3a      	ldr	r3, [pc, #232]	; (80004a4 <main+0xf8>)
 80003bc:	2201      	movs	r2, #1
 80003be:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 80003c0:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <main+0xf8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 80003c6:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <main+0xf8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x103;
 80003cc:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <main+0xf8>)
 80003ce:	f240 1203 	movw	r2, #259	; 0x103
 80003d2:	601a      	str	r2, [r3, #0]

	TxHeader.DLC = 1;
 80003d4:	4b34      	ldr	r3, [pc, #208]	; (80004a8 <main+0xfc>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80003da:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <main+0xfc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80003e0:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <main+0xfc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x030;
 80003e6:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <main+0xfc>)
 80003e8:	2230      	movs	r2, #48	; 0x30
 80003ea:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003ec:	f000 f8cc 	bl	8000588 <MX_GPIO_Init>
	MX_CAN_Init();
 80003f0:	f000 f878 	bl	80004e4 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan);
 80003f4:	482d      	ldr	r0, [pc, #180]	; (80004ac <main+0x100>)
 80003f6:	f000 fddd 	bl	8000fb4 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003fa:	2102      	movs	r1, #2
 80003fc:	482b      	ldr	r0, [pc, #172]	; (80004ac <main+0x100>)
 80003fe:	f001 f808 	bl	8001412 <HAL_CAN_ActivateNotification>


	SystemCoreClockUpdate();
 8000402:	f000 fb13 	bl	8000a2c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/100);
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <main+0x104>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a2a      	ldr	r2, [pc, #168]	; (80004b4 <main+0x108>)
 800040c:	fba2 2303 	umull	r2, r3, r2, r3
 8000410:	095b      	lsrs	r3, r3, #5
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff7e 	bl	8000314 <SysTick_Config>
	USER_SysTickInit();
 8000418:	f000 f8e8 	bl	80005ec <USER_SysTickInit>
	timerOn = 1;
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <main+0x10c>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		while(timeOutFlag == 0)
 8000422:	e02d      	b.n	8000480 <main+0xd4>
		{
			/* USER CODE END WHILE */
			if(flag == 1){
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <main+0x110>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d129      	bne.n	8000480 <main+0xd4>
				flag = 0;
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <main+0x110>)
 800042e:	2200      	movs	r2, #0
 8000430:	801a      	strh	r2, [r3, #0]
				USER_SysTickDeinit();
 8000432:	f000 f8ed 	bl	8000610 <USER_SysTickDeinit>
				if(RxData[g_i-1] == '\n'){
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <main+0x114>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3b01      	subs	r3, #1
 800043c:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <main+0x118>)
 800043e:	5cd3      	ldrb	r3, [r2, r3]
 8000440:	2b0a      	cmp	r3, #10
 8000442:	d115      	bne.n	8000470 <main+0xc4>
					g_i = 0;
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <main+0x114>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
					// flash
					if (firstRecordReceived == 1)
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d103      	bne.n	8000458 <main+0xac>
					{
						FPEC_voidEraseAppArea();
 8000450:	f7ff fe7c 	bl	800014c <FPEC_voidEraseAppArea>
						firstRecordReceived = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	71fb      	strb	r3, [r7, #7]
					}
					Parser_voidParseRecord(RxData);
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <main+0x118>)
 800045a:	f000 f9ea 	bl	8000832 <Parser_voidParseRecord>
					USER_clearRxBuffer();
 800045e:	f000 f8f5 	bl	800064c <USER_clearRxBuffer>
					HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox);
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <main+0x11c>)
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <main+0x120>)
 8000466:	4910      	ldr	r1, [pc, #64]	; (80004a8 <main+0xfc>)
 8000468:	4810      	ldr	r0, [pc, #64]	; (80004ac <main+0x100>)
 800046a:	f000 fde7 	bl	800103c <HAL_CAN_AddTxMessage>
 800046e:	e005      	b.n	800047c <main+0xd0>
				} else{
					HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox);
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <main+0x11c>)
 8000472:	4a16      	ldr	r2, [pc, #88]	; (80004cc <main+0x120>)
 8000474:	490c      	ldr	r1, [pc, #48]	; (80004a8 <main+0xfc>)
 8000476:	480d      	ldr	r0, [pc, #52]	; (80004ac <main+0x100>)
 8000478:	f000 fde0 	bl	800103c <HAL_CAN_AddTxMessage>
				}
				USER_SysTickInit();
 800047c:	f000 f8b6 	bl	80005ec <USER_SysTickInit>
		while(timeOutFlag == 0)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <main+0x124>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0cd      	beq.n	8000424 <main+0x78>
			} else{

			}
			/* USER CODE BEGIN 3 */
		}
		SCB_VTOR = 0x08010000;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <main+0x128>)
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <main+0x12c>)
 800048c:	601a      	str	r2, [r3, #0]
		HAL_DeInit();
 800048e:	f000 fb75 	bl	8000b7c <HAL_DeInit>
		addr_to_call = *(fun_ptr*)(0x08010004);
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <main+0x130>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <main+0x134>)
 8000498:	6013      	str	r3, [r2, #0]
		addr_to_call();
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <main+0x134>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4798      	blx	r3
		while(timeOutFlag == 0)
 80004a0:	e7ee      	b.n	8000480 <main+0xd4>
 80004a2:	bf00      	nop
 80004a4:	200001b4 	.word	0x200001b4
 80004a8:	2000019c 	.word	0x2000019c
 80004ac:	20000170 	.word	0x20000170
 80004b0:	2000000c 	.word	0x2000000c
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	20000035 	.word	0x20000035
 80004bc:	2000009e 	.word	0x2000009e
 80004c0:	2000009c 	.word	0x2000009c
 80004c4:	20000038 	.word	0x20000038
 80004c8:	20000198 	.word	0x20000198
 80004cc:	20000004 	.word	0x20000004
 80004d0:	20000034 	.word	0x20000034
 80004d4:	e000ed08 	.word	0xe000ed08
 80004d8:	08010000 	.word	0x08010000
 80004dc:	08010004 	.word	0x08010004
 80004e0:	200000a0 	.word	0x200000a0

080004e4 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <MX_CAN_Init+0x9c>)
 80004ec:	4a25      	ldr	r2, [pc, #148]	; (8000584 <MX_CAN_Init+0xa0>)
 80004ee:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_CAN_Init+0x9c>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <MX_CAN_Init+0x9c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_CAN_Init+0x9c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MX_CAN_Init+0x9c>)
 8000504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000508:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_CAN_Init+0x9c>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_CAN_Init+0x9c>)
 8000512:	2200      	movs	r2, #0
 8000514:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_CAN_Init+0x9c>)
 8000518:	2200      	movs	r2, #0
 800051a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_CAN_Init+0x9c>)
 800051e:	2200      	movs	r2, #0
 8000520:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_CAN_Init+0x9c>)
 8000524:	2200      	movs	r2, #0
 8000526:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_CAN_Init+0x9c>)
 800052a:	2200      	movs	r2, #0
 800052c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_CAN_Init+0x9c>)
 8000530:	2200      	movs	r2, #0
 8000532:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <MX_CAN_Init+0x9c>)
 8000536:	f000 fb79 	bl	8000c2c <HAL_CAN_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000540:	f000 f89c 	bl	800067c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;


	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000548:	230a      	movs	r3, #10
 800054a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assigned to CAN1
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <MX_CAN_Init+0x9c>)
 8000572:	f000 fc56 	bl	8000e22 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	; 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000170 	.word	0x20000170
 8000584:	40006400 	.word	0x40006400

08000588 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x5c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x5c>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x5c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2106      	movs	r1, #6
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x60>)
 80005ba:	f001 fbd5 	bl	8001d68 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x60>)
 80005d6:	f001 fa6d 	bl	8001ab4 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <USER_SysTickInit>:

/* USER CODE BEGIN 4 */
void USER_SysTickInit(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <USER_SysTickInit+0x20>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <USER_SysTickInit+0x20>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk|
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <USER_SysTickInit+0x20>)
 80005fe:	2207      	movs	r2, #7
 8000600:	601a      	str	r2, [r3, #0]
			SysTick_CTRL_ENABLE_Msk|
			SysTick_CTRL_CLKSOURCE_Msk);
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e010 	.word	0xe000e010

08000610 <USER_SysTickDeinit>:

void USER_SysTickDeinit(void){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <USER_SysTickDeinit+0x18>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <USER_SysTickDeinit+0x18>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e010 	.word	0xe000e010

0800062c <USER_SysTickCallBack>:

void USER_SysTickCallBack(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000630:	2104      	movs	r1, #4
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <USER_SysTickCallBack+0x18>)
 8000634:	f001 fbb0 	bl	8001d98 <HAL_GPIO_TogglePin>
	timeOutFlag = 1;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <USER_SysTickCallBack+0x1c>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800
 8000648:	20000034 	.word	0x20000034

0800064c <USER_clearRxBuffer>:

void USER_clearRxBuffer(void){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
	for(uint8_t clear_i = 0; clear_i<100 ; clear_i++){
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e006      	b.n	8000666 <USER_clearRxBuffer+0x1a>
		RxData[clear_i] = 0;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <USER_clearRxBuffer+0x2c>)
 800065c:	2100      	movs	r1, #0
 800065e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t clear_i = 0; clear_i<100 ; clear_i++){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	3301      	adds	r3, #1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b63      	cmp	r3, #99	; 0x63
 800066a:	d9f5      	bls.n	8000658 <USER_clearRxBuffer+0xc>
	}
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000038 	.word	0x20000038

0800067c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000682:	e7fe      	b.n	8000682 <Error_Handler+0x6>

08000684 <AsciToHex>:

uint16_t Data[100] = {0};
uint32_t Address= 0x08010000;

uint8_t AsciToHex(uint8_t Copy_u8Asci)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	uint8_t Result;
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b2f      	cmp	r3, #47	; 0x2f
 8000692:	d906      	bls.n	80006a2 <AsciToHex+0x1e>
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b39      	cmp	r3, #57	; 0x39
 8000698:	d803      	bhi.n	80006a2 <AsciToHex+0x1e>
	{
		Result = Copy_u8Asci - 48;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	3b30      	subs	r3, #48	; 0x30
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e002      	b.n	80006a8 <AsciToHex+0x24>
	}

	else
	{
		Result = Copy_u8Asci - 55;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3b37      	subs	r3, #55	; 0x37
 80006a6:	73fb      	strb	r3, [r7, #15]
	}

	return Result;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <ParseData>:


void ParseData(uint8_t* Copy_u8BufData)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint8_t DigitLow,DigitHigh,CC,i;
	uint8_t DataDigit0,DataDigit1,DataDigit2,DataDigit3;
	uint8_t DataCounter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	75bb      	strb	r3, [r7, #22]

	/* Get Character Count */
	DigitHigh = AsciToHex (Copy_u8BufData[1]);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffdc 	bl	8000684 <AsciToHex>
 80006cc:	4603      	mov	r3, r0
 80006ce:	757b      	strb	r3, [r7, #21]
	DigitLow  = AsciToHex (Copy_u8BufData[2]);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3302      	adds	r3, #2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffd4 	bl	8000684 <AsciToHex>
 80006dc:	4603      	mov	r3, r0
 80006de:	753b      	strb	r3, [r7, #20]
	CC        = (DigitHigh<<4) | DigitLow ;
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	b25a      	sxtb	r2, r3
 80006e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	DataDigit0 = AsciToHex (Copy_u8BufData[3]);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3303      	adds	r3, #3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ffc4 	bl	8000684 <AsciToHex>
 80006fc:	4603      	mov	r3, r0
 80006fe:	74bb      	strb	r3, [r7, #18]
	DataDigit1 = AsciToHex (Copy_u8BufData[4]);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3304      	adds	r3, #4
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffbc 	bl	8000684 <AsciToHex>
 800070c:	4603      	mov	r3, r0
 800070e:	747b      	strb	r3, [r7, #17]
	DataDigit2 = AsciToHex (Copy_u8BufData[5]);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3305      	adds	r3, #5
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffb4 	bl	8000684 <AsciToHex>
 800071c:	4603      	mov	r3, r0
 800071e:	743b      	strb	r3, [r7, #16]
	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3306      	adds	r3, #6
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffac 	bl	8000684 <AsciToHex>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	Address = Address & 0xFFFF0000;
 8000730:	4b39      	ldr	r3, [pc, #228]	; (8000818 <ParseData+0x164>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	041b      	lsls	r3, r3, #16
 8000738:	4a37      	ldr	r2, [pc, #220]	; (8000818 <ParseData+0x164>)
 800073a:	6013      	str	r3, [r2, #0]
	Address = Address | (DataDigit3) | (DataDigit2 << 4) | (DataDigit1 << 8) | (DataDigit0<<12);
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <ParseData+0x164>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4313      	orrs	r3, r2
 8000744:	7c3a      	ldrb	r2, [r7, #16]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	4313      	orrs	r3, r2
 800074a:	7c7a      	ldrb	r2, [r7, #17]
 800074c:	0212      	lsls	r2, r2, #8
 800074e:	4313      	orrs	r3, r2
 8000750:	7cba      	ldrb	r2, [r7, #18]
 8000752:	0312      	lsls	r2, r2, #12
 8000754:	4313      	orrs	r3, r2
 8000756:	4a30      	ldr	r2, [pc, #192]	; (8000818 <ParseData+0x164>)
 8000758:	6013      	str	r3, [r2, #0]

	for (i=0;i<CC/2; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	75fb      	strb	r3, [r7, #23]
 800075e:	e047      	b.n	80007f0 <ParseData+0x13c>
	{
		DataDigit0 = AsciToHex (Copy_u8BufData[4*i+9 ]);
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	3309      	adds	r3, #9
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff89 	bl	8000684 <AsciToHex>
 8000772:	4603      	mov	r3, r0
 8000774:	74bb      	strb	r3, [r7, #18]
		DataDigit1 = AsciToHex (Copy_u8BufData[4*i+10]);
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	330a      	adds	r3, #10
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff7e 	bl	8000684 <AsciToHex>
 8000788:	4603      	mov	r3, r0
 800078a:	747b      	strb	r3, [r7, #17]
		DataDigit2 = AsciToHex (Copy_u8BufData[4*i+11]);
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	330b      	adds	r3, #11
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff73 	bl	8000684 <AsciToHex>
 800079e:	4603      	mov	r3, r0
 80007a0:	743b      	strb	r3, [r7, #16]
		DataDigit3 = AsciToHex (Copy_u8BufData[4*i+12]);
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	330c      	adds	r3, #12
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff68 	bl	8000684 <AsciToHex>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]

		Data[DataCounter] = (DataDigit3 << 8) | (DataDigit2 << 12) | (DataDigit1) | (DataDigit0<<4);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21a      	sxth	r2, r3
 80007be:	7c3b      	ldrb	r3, [r7, #16]
 80007c0:	031b      	lsls	r3, r3, #12
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	7c7b      	ldrb	r3, [r7, #17]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	7cbb      	ldrb	r3, [r7, #18]
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21a      	sxth	r2, r3
 80007da:	7dbb      	ldrb	r3, [r7, #22]
 80007dc:	b291      	uxth	r1, r2
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <ParseData+0x168>)
 80007e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		DataCounter++;
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	3301      	adds	r3, #1
 80007e8:	75bb      	strb	r3, [r7, #22]
	for (i=0;i<CC/2; i++)
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	3301      	adds	r3, #1
 80007ee:	75fb      	strb	r3, [r7, #23]
 80007f0:	7cfb      	ldrb	r3, [r7, #19]
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	7dfa      	ldrb	r2, [r7, #23]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3b1      	bcc.n	8000760 <ParseData+0xac>
	}

	FPEC_voidFlashWrite(Address,Data,CC/2);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <ParseData+0x164>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	4904      	ldr	r1, [pc, #16]	; (800081c <ParseData+0x168>)
 800080a:	f7ff fcfd 	bl	8000208 <FPEC_voidFlashWrite>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	200000a4 	.word	0x200000a4

08000820 <ParseUpperAddress>:

void ParseUpperAddress(uint8_t* Copy_u8BufData)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
//	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
//
//	/* Clear Low Part of Address */
//	Address = Address & (u32)0x0000FFFF;
//	Address = Address | (u32)((u32)(DataDigit3 << 28) | (u32)(DataDigit2 << 24) | (u32)(DataDigit1 << 20) | (u32)(DataDigit0 << 16));
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <Parser_voidParseRecord>:

void Parser_voidParseRecord(uint8_t* Copy_u8BufData)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufData[8])
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3308      	adds	r3, #8
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b30      	cmp	r3, #48	; 0x30
 8000842:	d002      	beq.n	800084a <Parser_voidParseRecord+0x18>
 8000844:	2b34      	cmp	r3, #52	; 0x34
 8000846:	d004      	beq.n	8000852 <Parser_voidParseRecord+0x20>
	{
	case '0': ParseData(Copy_u8BufData); break;
	case '4': ParseUpperAddress(Copy_u8BufData); break;
	}
}
 8000848:	e007      	b.n	800085a <Parser_voidParseRecord+0x28>
	case '0': ParseData(Copy_u8BufData); break;
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff32 	bl	80006b4 <ParseData>
 8000850:	e003      	b.n	800085a <Parser_voidParseRecord+0x28>
	case '4': ParseUpperAddress(Copy_u8BufData); break;
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffe4 	bl	8000820 <ParseUpperAddress>
 8000858:	bf00      	nop
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <HAL_MspInit+0x5c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x5c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_MspInit+0x60>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_MspInit+0x60>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a24      	ldr	r2, [pc, #144]	; (8000974 <HAL_CAN_MspInit+0xac>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d141      	bne.n	800096c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 80008ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_CAN_MspInit+0xb0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800091c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <HAL_CAN_MspInit+0xb4>)
 800092e:	f001 f8c1 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <HAL_CAN_MspInit+0xb4>)
 8000948:	f001 f8b4 	bl	8001ab4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2014      	movs	r0, #20
 8000952:	f001 f878 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000956:	2014      	movs	r0, #20
 8000958:	f001 f891 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2015      	movs	r0, #21
 8000962:	f001 f870 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000966:	2015      	movs	r0, #21
 8000968:	f001 f889 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40006400 	.word	0x40006400
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <HardFault_Handler+0x4>

08000992 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <BusFault_Handler+0x4>

0800099e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	USER_tick++;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <SysTick_Handler+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <SysTick_Handler+0x28>)
 80009d4:	6013      	str	r3, [r2, #0]
	if(USER_tick == USER_definedTicks){
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SysTick_Handler+0x28>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SysTick_Handler+0x2c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d104      	bne.n	80009ec <SysTick_Handler+0x24>
	USER_SysTickCallBack();
 80009e2:	f7ff fe23 	bl	800062c <USER_SysTickCallBack>
	USER_tick = 0;
 80009e6:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <SysTick_Handler+0x28>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000016c 	.word	0x2000016c
 80009f4:	20000000 	.word	0x20000000

080009f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009fe:	f000 fd2d 	bl	800145c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000170 	.word	0x20000170

08000a0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <CAN1_RX1_IRQHandler+0x10>)
 8000a12:	f000 fd23 	bl	800145c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000170 	.word	0x20000170

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <SystemCoreClockUpdate+0xc4>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d007      	beq.n	8000a5e <SystemCoreClockUpdate+0x32>
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d009      	beq.n	8000a66 <SystemCoreClockUpdate+0x3a>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d133      	bne.n	8000abe <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemCoreClockUpdate+0xcc>)
 8000a5a:	601a      	str	r2, [r3, #0]
      break;
 8000a5c:	e033      	b.n	8000ac6 <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <SystemCoreClockUpdate+0xcc>)
 8000a62:	601a      	str	r2, [r3, #0]
      break;
 8000a64:	e02f      	b.n	8000ac6 <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemCoreClockUpdate+0xc4>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a6e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemCoreClockUpdate+0xc4>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a78:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	0c9b      	lsrs	r3, r3, #18
 8000a7e:	3302      	adds	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d106      	bne.n	8000a96 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <SystemCoreClockUpdate+0xd0>)
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000a92:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000a94:	e017      	b.n	8000ac6 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <SystemCoreClockUpdate+0xc4>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <SystemCoreClockUpdate+0xd0>)
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000aac:	6013      	str	r3, [r2, #0]
      break;
 8000aae:	e00a      	b.n	8000ac6 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <SystemCoreClockUpdate+0xcc>)
 8000ab4:	fb02 f303 	mul.w	r3, r2, r3
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000aba:	6013      	str	r3, [r2, #0]
      break;
 8000abc:	e003      	b.n	8000ac6 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <SystemCoreClockUpdate+0xcc>)
 8000ac2:	601a      	str	r2, [r3, #0]
      break;
 8000ac4:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemCoreClockUpdate+0xc4>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <SystemCoreClockUpdate+0xd4>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <SystemCoreClockUpdate+0xc8>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	007a1200 	.word	0x007a1200
 8000afc:	003d0900 	.word	0x003d0900
 8000b00:	08001e2c 	.word	0x08001e2c

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ff79 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f001 f94d 	bl	8001dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fc3b 	bl	80003ac <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b40:	08001e44 	.word	0x08001e44
  ldr r2, =_sbss
 8000b44:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b48:	200001d4 	.word	0x200001d4

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 ff65 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f826 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe7a 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_DeInit+0x2c>)
 8000b82:	f04f 32ff 	mov.w	r2, #4294967295
 8000b86:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_DeInit+0x2c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_DeInit+0x2c>)
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_DeInit+0x2c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000b9c:	f000 f806 	bl	8000bac <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 ff5f 	bl	8001a9a <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 ff27 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000014 	.word	0x20000014
 8000c14:	20000010 	.word	0x20000010

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	200001d0 	.word	0x200001d0

08000c2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0ed      	b.n	8000e1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe3c 	bl	80008c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c60:	f7ff ffda 	bl	8000c18 <HAL_GetTick>
 8000c64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c66:	e012      	b.n	8000c8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c68:	f7ff ffd6 	bl	8000c18 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b0a      	cmp	r3, #10
 8000c74:	d90b      	bls.n	8000c8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2205      	movs	r2, #5
 8000c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0c5      	b.n	8000e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0e5      	beq.n	8000c68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0202 	bic.w	r2, r2, #2
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cac:	f7ff ffb4 	bl	8000c18 <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cb2:	e012      	b.n	8000cda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb4:	f7ff ffb0 	bl	8000c18 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d90b      	bls.n	8000cda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e09f      	b.n	8000e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e5      	bne.n	8000cb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7e1b      	ldrb	r3, [r3, #24]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7e5b      	ldrb	r3, [r3, #25]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7e9b      	ldrb	r3, [r3, #26]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d108      	bne.n	8000d56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0220 	orr.w	r2, r2, #32
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	e007      	b.n	8000d66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0220 	bic.w	r2, r2, #32
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7edb      	ldrb	r3, [r3, #27]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d108      	bne.n	8000d80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0210 	bic.w	r2, r2, #16
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e007      	b.n	8000d90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0210 	orr.w	r2, r2, #16
 8000d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d108      	bne.n	8000daa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0208 	orr.w	r2, r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e007      	b.n	8000dba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0208 	bic.w	r2, r2, #8
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7f5b      	ldrb	r3, [r3, #29]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d108      	bne.n	8000dd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 0204 	orr.w	r2, r2, #4
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0204 	bic.w	r2, r2, #4
 8000de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	ea42 0103 	orr.w	r1, r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e3a:	7cfb      	ldrb	r3, [r7, #19]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d003      	beq.n	8000e48 <HAL_CAN_ConfigFilter+0x26>
 8000e40:	7cfb      	ldrb	r3, [r7, #19]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	f040 80aa 	bne.w	8000f9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	2201      	movs	r2, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d123      	bne.n	8000eca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ea4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3248      	adds	r2, #72	; 0x48
 8000eaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ebe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ec0:	6979      	ldr	r1, [r7, #20]
 8000ec2:	3348      	adds	r3, #72	; 0x48
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d122      	bne.n	8000f18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ef2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3248      	adds	r2, #72	; 0x48
 8000ef8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f0e:	6979      	ldr	r1, [r7, #20]
 8000f10:	3348      	adds	r3, #72	; 0x48
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f8e:	f023 0201 	bic.w	r2, r3, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e006      	b.n	8000faa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
  }
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d12e      	bne.n	8001026 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fe1a 	bl	8000c18 <HAL_GetTick>
 8000fe4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fe6:	e012      	b.n	800100e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe8:	f7ff fe16 	bl	8000c18 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d90b      	bls.n	800100e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2205      	movs	r2, #5
 8001006:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e012      	b.n	8001034 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e5      	bne.n	8000fe8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e006      	b.n	8001034 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d003      	beq.n	8001068 <HAL_CAN_AddTxMessage+0x2c>
 8001060:	7ffb      	ldrb	r3, [r7, #31]
 8001062:	2b02      	cmp	r3, #2
 8001064:	f040 80b8 	bne.w	80011d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10a      	bne.n	8001088 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001078:	2b00      	cmp	r3, #0
 800107a:	d105      	bne.n	8001088 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80a0 	beq.w	80011c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	0e1b      	lsrs	r3, r3, #24
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d907      	bls.n	80010a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e09e      	b.n	80011e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010a8:	2201      	movs	r2, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	409a      	lsls	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	6809      	ldr	r1, [r1, #0]
 80010c8:	431a      	orrs	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3318      	adds	r3, #24
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	440b      	add	r3, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00f      	b.n	80010f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3318      	adds	r3, #24
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3318      	adds	r3, #24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	440b      	add	r3, r1
 8001106:	3304      	adds	r3, #4
 8001108:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	7d1b      	ldrb	r3, [r3, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d111      	bne.n	8001136 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3318      	adds	r3, #24
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	3304      	adds	r3, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6811      	ldr	r1, [r2, #0]
 8001126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3318      	adds	r3, #24
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	3304      	adds	r3, #4
 8001134:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3307      	adds	r3, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	061a      	lsls	r2, r3, #24
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3306      	adds	r3, #6
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3305      	adds	r3, #5
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	4313      	orrs	r3, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	3204      	adds	r2, #4
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	4610      	mov	r0, r2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	6811      	ldr	r1, [r2, #0]
 800115e:	ea43 0200 	orr.w	r2, r3, r0
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	440b      	add	r3, r1
 8001168:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800116c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3303      	adds	r3, #3
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	061a      	lsls	r2, r3, #24
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3302      	adds	r3, #2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	4313      	orrs	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4610      	mov	r0, r2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	ea43 0200 	orr.w	r2, r3, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3318      	adds	r3, #24
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6811      	ldr	r1, [r2, #0]
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3318      	adds	r3, #24
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e00e      	b.n	80011e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e006      	b.n	80011e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
  }
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d003      	beq.n	8001214 <HAL_CAN_GetRxMessage+0x24>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b02      	cmp	r3, #2
 8001210:	f040 80f3 	bne.w	80013fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10e      	bne.n	8001238 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d116      	bne.n	8001256 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0e7      	b.n	8001408 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0d8      	b.n	8001408 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	331b      	adds	r3, #27
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0204 	and.w	r2, r3, #4
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10c      	bne.n	800128e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	331b      	adds	r3, #27
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e00b      	b.n	80012a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0202 	and.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	331b      	adds	r3, #27
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	3304      	adds	r3, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 020f 	and.w	r2, r3, #15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	331b      	adds	r3, #27
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	3304      	adds	r3, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	331b      	adds	r3, #27
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	3304      	adds	r3, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0a1a      	lsrs	r2, r3, #8
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1a      	lsrs	r2, r3, #16
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3302      	adds	r3, #2
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0e1a      	lsrs	r2, r3, #24
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3303      	adds	r3, #3
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0a1a      	lsrs	r2, r3, #8
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3305      	adds	r3, #5
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0c1a      	lsrs	r2, r3, #16
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3306      	adds	r3, #6
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0e1a      	lsrs	r2, r3, #24
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3307      	adds	r3, #7
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d108      	bne.n	80013e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0220 	orr.w	r2, r2, #32
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0220 	orr.w	r2, r2, #32
 80013f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e006      	b.n	8001408 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
  }
}
 8001408:	4618      	mov	r0, r3
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d002      	beq.n	8001430 <HAL_CAN_ActivateNotification+0x1e>
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d109      	bne.n	8001444 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6959      	ldr	r1, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	e006      	b.n	8001452 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d07c      	beq.n	800159c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d023      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f97d 	bl	80017be <HAL_CAN_TxMailbox0CompleteCallback>
 80014c4:	e016      	b.n	80014f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
 80014d8:	e00c      	b.n	80014f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	e002      	b.n	80014f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f980 	bl	80017f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d024      	beq.n	8001548 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f95c 	bl	80017d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001518:	e016      	b.n	8001548 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
 800152c:	e00c      	b.n	8001548 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	e002      	b.n	8001548 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f95f 	bl	8001806 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d024      	beq.n	800159c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f93b 	bl	80017e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800156c:	e016      	b.n	800159c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	e00c      	b.n	800159c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	e002      	b.n	800159c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f93e 	bl	8001818 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2210      	movs	r2, #16
 80015be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2208      	movs	r2, #8
 80015da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f924 	bl	800182a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7fe feac 	bl	8000358 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f904 	bl	800184e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f8ec 	bl	800183c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2210      	movs	r2, #16
 800167e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f8ed 	bl	8001860 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2208      	movs	r2, #8
 80016a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8e5 	bl	8001872 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d075      	beq.n	800179e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d06c      	beq.n	8001796 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001716:	2b00      	cmp	r3, #0
 8001718:	d03d      	beq.n	8001796 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d038      	beq.n	8001796 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800172a:	2b30      	cmp	r3, #48	; 0x30
 800172c:	d017      	beq.n	800175e <HAL_CAN_IRQHandler+0x302>
 800172e:	2b30      	cmp	r3, #48	; 0x30
 8001730:	d804      	bhi.n	800173c <HAL_CAN_IRQHandler+0x2e0>
 8001732:	2b10      	cmp	r3, #16
 8001734:	d009      	beq.n	800174a <HAL_CAN_IRQHandler+0x2ee>
 8001736:	2b20      	cmp	r3, #32
 8001738:	d00c      	beq.n	8001754 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800173a:	e024      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800173c:	2b50      	cmp	r3, #80	; 0x50
 800173e:	d018      	beq.n	8001772 <HAL_CAN_IRQHandler+0x316>
 8001740:	2b60      	cmp	r3, #96	; 0x60
 8001742:	d01b      	beq.n	800177c <HAL_CAN_IRQHandler+0x320>
 8001744:	2b40      	cmp	r3, #64	; 0x40
 8001746:	d00f      	beq.n	8001768 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001748:	e01d      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001752:	e018      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800175c:	e013      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001766:	e00e      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001770:	e009      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800177a:	e004      	b.n	8001786 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001784:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001794:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2204      	movs	r2, #4
 800179c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f867 	bl	8001884 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <__NVIC_SetPriorityGrouping>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4906      	ldr	r1, [pc, #24]	; (8001930 <__NVIC_EnableIRQ+0x34>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	; (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <SysTick_Config>:
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff90 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff2d 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff42 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff35 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e127      	b.n	8001d18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8116 	bne.w	8001d12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d034      	beq.n	8001b58 <HAL_GPIO_Init+0xa4>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d80d      	bhi.n	8001b0e <HAL_GPIO_Init+0x5a>
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x9a>
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d804      	bhi.n	8001b04 <HAL_GPIO_Init+0x50>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d031      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d01c      	beq.n	8001b3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b02:	e048      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d043      	beq.n	8001b90 <HAL_GPIO_Init+0xdc>
 8001b08:	2b11      	cmp	r3, #17
 8001b0a:	d01b      	beq.n	8001b44 <HAL_GPIO_Init+0x90>
          break;
 8001b0c:	e043      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b0e:	4a89      	ldr	r2, [pc, #548]	; (8001d34 <HAL_GPIO_Init+0x280>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d026      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
 8001b14:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <HAL_GPIO_Init+0x280>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d806      	bhi.n	8001b28 <HAL_GPIO_Init+0x74>
 8001b1a:	4a87      	ldr	r2, [pc, #540]	; (8001d38 <HAL_GPIO_Init+0x284>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d020      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
 8001b20:	4a86      	ldr	r2, [pc, #536]	; (8001d3c <HAL_GPIO_Init+0x288>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01d      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
          break;
 8001b26:	e036      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b28:	4a85      	ldr	r2, [pc, #532]	; (8001d40 <HAL_GPIO_Init+0x28c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
 8001b2e:	4a85      	ldr	r2, [pc, #532]	; (8001d44 <HAL_GPIO_Init+0x290>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d016      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
 8001b34:	4a84      	ldr	r2, [pc, #528]	; (8001d48 <HAL_GPIO_Init+0x294>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0xae>
          break;
 8001b3a:	e02c      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e028      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e023      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	3308      	adds	r3, #8
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e01e      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e019      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e012      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	611a      	str	r2, [r3, #16]
          break;
 8001b82:	e008      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	615a      	str	r2, [r3, #20]
          break;
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d801      	bhi.n	8001ba0 <HAL_GPIO_Init+0xec>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	e001      	b.n	8001ba4 <HAL_GPIO_Init+0xf0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d802      	bhi.n	8001bb2 <HAL_GPIO_Init+0xfe>
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x104>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	3b08      	subs	r3, #8
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	401a      	ands	r2, r3
 8001bca:	6a39      	ldr	r1, [r7, #32]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8096 	beq.w	8001d12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_GPIO_Init+0x298>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_GPIO_Init+0x298>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x298>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bfe:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_GPIO_Init+0x29c>)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x19e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x19a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x196>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x192>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x1a0>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x1a0>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x1a0>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x1a0>
 8001c52:	2300      	movs	r3, #0
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c64:	493a      	ldr	r1, [pc, #232]	; (8001d50 <HAL_GPIO_Init+0x29c>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4938      	ldr	r1, [pc, #224]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4933      	ldr	r1, [pc, #204]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	492e      	ldr	r1, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4929      	ldr	r1, [pc, #164]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	4924      	ldr	r1, [pc, #144]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	491f      	ldr	r1, [pc, #124]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	491a      	ldr	r1, [pc, #104]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60cb      	str	r3, [r1, #12]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4915      	ldr	r1, [pc, #84]	; (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	3301      	adds	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f aed0 	bne.w	8001ac8 <HAL_GPIO_Init+0x14>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	372c      	adds	r7, #44	; 0x2c
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	10210000 	.word	0x10210000
 8001d38:	10110000 	.word	0x10110000
 8001d3c:	10120000 	.word	0x10120000
 8001d40:	10310000 	.word	0x10310000
 8001d44:	10320000 	.word	0x10320000
 8001d48:	10220000 	.word	0x10220000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40011400 	.word	0x40011400
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43d9      	mvns	r1, r3
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	400b      	ands	r3, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <__libc_init_array>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	2500      	movs	r5, #0
 8001dd0:	4e0c      	ldr	r6, [pc, #48]	; (8001e04 <__libc_init_array+0x38>)
 8001dd2:	4c0d      	ldr	r4, [pc, #52]	; (8001e08 <__libc_init_array+0x3c>)
 8001dd4:	1ba4      	subs	r4, r4, r6
 8001dd6:	10a4      	asrs	r4, r4, #2
 8001dd8:	42a5      	cmp	r5, r4
 8001dda:	d109      	bne.n	8001df0 <__libc_init_array+0x24>
 8001ddc:	f000 f81a 	bl	8001e14 <_init>
 8001de0:	2500      	movs	r5, #0
 8001de2:	4e0a      	ldr	r6, [pc, #40]	; (8001e0c <__libc_init_array+0x40>)
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <__libc_init_array+0x44>)
 8001de6:	1ba4      	subs	r4, r4, r6
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	42a5      	cmp	r5, r4
 8001dec:	d105      	bne.n	8001dfa <__libc_init_array+0x2e>
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df4:	4798      	blx	r3
 8001df6:	3501      	adds	r5, #1
 8001df8:	e7ee      	b.n	8001dd8 <__libc_init_array+0xc>
 8001dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dfe:	4798      	blx	r3
 8001e00:	3501      	adds	r5, #1
 8001e02:	e7f2      	b.n	8001dea <__libc_init_array+0x1e>
 8001e04:	08001e3c 	.word	0x08001e3c
 8001e08:	08001e3c 	.word	0x08001e3c
 8001e0c:	08001e3c 	.word	0x08001e3c
 8001e10:	08001e40 	.word	0x08001e40

08001e14 <_init>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr

08001e20 <_fini>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	bf00      	nop
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr
