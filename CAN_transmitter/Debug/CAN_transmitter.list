
CAN_transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cfc  08002cfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cfc  08002cfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08002d10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002d10  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000784f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001751  00000000  00000000  00027884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  00028fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  000297e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165c7  00000000  00000000  00029f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000665a  00000000  00000000  00040527  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080f74  00000000  00000000  00046b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe8  00000000  00000000  000c7b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cb8 	.word	0x08002cb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002cb8 	.word	0x08002cb8

0800014c <MUSART1_voidInit>:
#include "USART_private.h"
#include "USART_config.h"


void MUSART1_voidInit(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	/*	baud rate = 9600		*/
	USART1_ -> BRR = 0x341;
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <MUSART1_voidInit+0x40>)
 8000152:	f240 3241 	movw	r2, #833	; 0x341
 8000156:	609a      	str	r2, [r3, #8]

	SET_BIT((USART1_-> CR[0]), 3);			/* Enabling Transmitter */
 8000158:	4b0c      	ldr	r3, [pc, #48]	; (800018c <MUSART1_voidInit+0x40>)
 800015a:	68db      	ldr	r3, [r3, #12]
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <MUSART1_voidInit+0x40>)
 800015e:	f043 0308 	orr.w	r3, r3, #8
 8000162:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1_-> CR[0]), 2);			/* Enabling Receiver */
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <MUSART1_voidInit+0x40>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <MUSART1_voidInit+0x40>)
 800016a:	f043 0304 	orr.w	r3, r3, #4
 800016e:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1_-> CR[0]), 13);			/* Enabling USART */
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <MUSART1_voidInit+0x40>)
 8000172:	68db      	ldr	r3, [r3, #12]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <MUSART1_voidInit+0x40>)
 8000176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800017a:	60d3      	str	r3, [r2, #12]

	USART1_ -> SR = 0;						/* Clearing status register */
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <MUSART1_voidInit+0x40>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40013800 	.word	0x40013800

08000190 <MUSART1_voidTransmit>:

void MUSART1_voidTransmit(uint8_t arr)
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
	//	while(arr[i] != '\0'){
	USART1_ -> DR = arr;
 800019e:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <MUSART1_voidTransmit+0x34>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART1_ -> SR), 6)) == 0);
 80001a4:	bf00      	nop
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <MUSART1_voidTransmit+0x34>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	119b      	asrs	r3, r3, #6
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0f8      	beq.n	80001a6 <MUSART1_voidTransmit+0x16>
	i++;
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	3301      	adds	r3, #1
 80001b8:	73fb      	strb	r3, [r7, #15]
	//	}

}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40013800 	.word	0x40013800

080001c8 <MUSART1_u8Receive>:

uint8_t MUSART1_u8Receive(uint8_t* Copy_u8Data)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8Result = 1;
 80001d0:	2301      	movs	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]

	if ( (GET_BIT((USART1_ -> SR), 5)) == 1 )
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <MUSART1_u8Receive+0x38>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	115b      	asrs	r3, r3, #5
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d105      	bne.n	80001ee <MUSART1_u8Receive+0x26>
	{
		*Copy_u8Data = USART1_ -> DR;
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <MUSART1_u8Receive+0x38>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	701a      	strb	r2, [r3, #0]
 80001ec:	e001      	b.n	80001f2 <MUSART1_u8Receive+0x2a>
	}
	else
	{
		Local_u8Result = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
	}

	return (Local_u8Result);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40013800 	.word	0x40013800

08000204 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t IndexBuffer = 0;
uint8_t record[100] = {0};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, &RxData);
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000210:	2100      	movs	r1, #0
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 fe6c 	bl	8000ef0 <HAL_CAN_GetRxMessage>
	flag = 1;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800021a:	2201      	movs	r2, #1
 800021c:	701a      	strb	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000100 	.word	0x20000100
 800022c:	2000011c 	.word	0x2000011c
 8000230:	20000028 	.word	0x20000028

08000234 <CLEAR_RxBuffer>:

void CLEAR_RxBuffer(void){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<100 ; i++){
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	e006      	b.n	800024e <CLEAR_RxBuffer+0x1a>
		record[i] = 0;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <CLEAR_RxBuffer+0x2c>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<100 ; i++){
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3301      	adds	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b63      	cmp	r3, #99	; 0x63
 8000252:	d9f5      	bls.n	8000240 <CLEAR_RxBuffer+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	2000002c 	.word	0x2000002c

08000264 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800026a:	f000 fafd 	bl	8000868 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800026e:	f000 f895 	bl	800039c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000272:	f000 f94b 	bl	800050c <MX_GPIO_Init>
	MX_CAN_Init();
 8000276:	f000 f8cd 	bl	8000414 <MX_CAN_Init>
	MX_USART1_UART_Init();
 800027a:	f000 f91d 	bl	80004b8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 800027e:	4840      	ldr	r0, [pc, #256]	; (8000380 <main+0x11c>)
 8000280:	f000 fd18 	bl	8000cb4 <HAL_CAN_Start>
	MUSART1_voidInit();
 8000284:	f7ff ff62 	bl	800014c <MUSART1_voidInit>

	/* USER CODE END 2 */
	RxHeader.DLC = 1;  // data length
 8000288:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <main+0x120>)
 800028a:	2201      	movs	r2, #1
 800028c:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 800028e:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <main+0x120>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000294:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <main+0x120>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x030;  // I
 800029a:	4b3a      	ldr	r3, [pc, #232]	; (8000384 <main+0x120>)
 800029c:	2230      	movs	r2, #48	; 0x30
 800029e:	601a      	str	r2, [r3, #0]


	TxHeader.DLC = 1;  // data length
 80002a0:	4b39      	ldr	r3, [pc, #228]	; (8000388 <main+0x124>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80002a6:	4b38      	ldr	r3, [pc, #224]	; (8000388 <main+0x124>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80002ac:	4b36      	ldr	r3, [pc, #216]	; (8000388 <main+0x124>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103;  // ID
 80002b2:	4b35      	ldr	r3, [pc, #212]	; (8000388 <main+0x124>)
 80002b4:	f240 1203 	movw	r2, #259	; 0x103
 80002b8:	601a      	str	r2, [r3, #0]

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002ba:	2102      	movs	r1, #2
 80002bc:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x11c>)
 80002be:	f000 ff28 	bl	8001112 <HAL_CAN_ActivateNotification>

	uint8_t Local_u8RecStatus = 0 , u8RecCounter = 0 , finishRecordFlag = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	713b      	strb	r3, [r7, #4]
 80002c6:	2300      	movs	r3, #0
 80002c8:	71fb      	strb	r3, [r7, #7]
 80002ca:	2300      	movs	r3, #0
 80002cc:	71bb      	strb	r3, [r7, #6]
	while(1){
		Local_u8RecStatus = 0 , u8RecCounter = 0 , finishRecordFlag = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	713b      	strb	r3, [r7, #4]
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	2300      	movs	r3, #0
 80002d8:	71bb      	strb	r3, [r7, #6]
		while(!(finishRecordFlag)){
 80002da:	e017      	b.n	800030c <main+0xa8>
			Local_u8RecStatus = MUSART1_u8Receive( &(record[u8RecCounter]) );
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4a2b      	ldr	r2, [pc, #172]	; (800038c <main+0x128>)
 80002e0:	4413      	add	r3, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff70 	bl	80001c8 <MUSART1_u8Receive>
 80002e8:	4603      	mov	r3, r0
 80002ea:	713b      	strb	r3, [r7, #4]
			if(Local_u8RecStatus){
 80002ec:	793b      	ldrb	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d00c      	beq.n	800030c <main+0xa8>
				if(record[u8RecCounter] == '\n'){
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <main+0x128>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	2b0a      	cmp	r3, #10
 80002fa:	d104      	bne.n	8000306 <main+0xa2>
					u8RecCounter = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	71fb      	strb	r3, [r7, #7]
					finishRecordFlag = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	71bb      	strb	r3, [r7, #6]
 8000304:	e002      	b.n	800030c <main+0xa8>
				} else{
					u8RecCounter ++ ;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	3301      	adds	r3, #1
 800030a:	71fb      	strb	r3, [r7, #7]
		while(!(finishRecordFlag)){
 800030c:	79bb      	ldrb	r3, [r7, #6]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0e4      	beq.n	80002dc <main+0x78>
			}else{

			}
		}
		/* CAN: */
		uint8_t i = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	717b      	strb	r3, [r7, #5]
		while(record[i] != '\n'){
 8000316:	e017      	b.n	8000348 <main+0xe4>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, &record[i], &TxMailbox);
 8000318:	797b      	ldrb	r3, [r7, #5]
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <main+0x128>)
 800031c:	441a      	add	r2, r3
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <main+0x12c>)
 8000320:	4919      	ldr	r1, [pc, #100]	; (8000388 <main+0x124>)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <main+0x11c>)
 8000324:	f000 fd0a 	bl	8000d3c <HAL_CAN_AddTxMessage>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032c:	4819      	ldr	r0, [pc, #100]	; (8000394 <main+0x130>)
 800032e:	f001 fc63 	bl	8001bf8 <HAL_GPIO_TogglePin>
			i++;
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	3301      	adds	r3, #1
 8000336:	717b      	strb	r3, [r7, #5]
			while(flag == 0);
 8000338:	bf00      	nop
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <main+0x134>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0fb      	beq.n	800033a <main+0xd6>
			flag = 0;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <main+0x134>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
		while(record[i] != '\n'){
 8000348:	797b      	ldrb	r3, [r7, #5]
 800034a:	4a10      	ldr	r2, [pc, #64]	; (800038c <main+0x128>)
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	2b0a      	cmp	r3, #10
 8000350:	d1e2      	bne.n	8000318 <main+0xb4>
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, &record[i], &TxMailbox);
 8000352:	797b      	ldrb	r3, [r7, #5]
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <main+0x128>)
 8000356:	441a      	add	r2, r3
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <main+0x12c>)
 800035a:	490b      	ldr	r1, [pc, #44]	; (8000388 <main+0x124>)
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <main+0x11c>)
 800035e:	f000 fced 	bl	8000d3c <HAL_CAN_AddTxMessage>
		while(flag == 0);
 8000362:	bf00      	nop
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <main+0x134>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0fb      	beq.n	8000364 <main+0x100>
		flag = 0;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <main+0x134>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
		CLEAR_RxBuffer();
 8000372:	f7ff ff5f 	bl	8000234 <CLEAR_RxBuffer>
		MUSART1_voidTransmit(4);
 8000376:	2004      	movs	r0, #4
 8000378:	f7ff ff0a 	bl	8000190 <MUSART1_voidTransmit>
	while(1){
 800037c:	e7a7      	b.n	80002ce <main+0x6a>
 800037e:	bf00      	nop
 8000380:	20000090 	.word	0x20000090
 8000384:	2000011c 	.word	0x2000011c
 8000388:	20000104 	.word	0x20000104
 800038c:	2000002c 	.word	0x2000002c
 8000390:	200000fc 	.word	0x200000fc
 8000394:	40011000 	.word	0x40011000
 8000398:	20000028 	.word	0x20000028

0800039c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fc7c 	bl	8002ca8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fc2a 	bl	8001c2c <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x46>
	{
		Error_Handler();
 80003de:	f000 f8e9 	bl	80005b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fe96 	bl	800212c <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000406:	f000 f8d5 	bl	80005b4 <Error_Handler>
	}
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_CAN_Init+0x9c>)
 800041c:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <MX_CAN_Init+0xa0>)
 800041e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000422:	2210      	movs	r2, #16
 8000424:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_CAN_Init+0x9c>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000438:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_CAN_Init+0x9c>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000442:	2200      	movs	r2, #0
 8000444:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000448:	2200      	movs	r2, #0
 800044a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_CAN_Init+0x9c>)
 800044e:	2200      	movs	r2, #0
 8000450:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000454:	2200      	movs	r2, #0
 8000456:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_CAN_Init+0x9c>)
 800045a:	2200      	movs	r2, #0
 800045c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000460:	2200      	movs	r2, #0
 8000462:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000464:	4812      	ldr	r0, [pc, #72]	; (80004b0 <MX_CAN_Init+0x9c>)
 8000466:	f000 fa61 	bl	800092c <HAL_CAN_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000470:	f000 f8a0 	bl	80005b4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000474:	2301      	movs	r3, #1
 8000476:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000478:	230a      	movs	r3, #10
 800047a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000494:	2301      	movs	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800049c:	463b      	mov	r3, r7
 800049e:	4619      	mov	r1, r3
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <MX_CAN_Init+0x9c>)
 80004a2:	f000 fb3e 	bl	8000b22 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000090 	.word	0x20000090
 80004b4:	40006400 	.word	0x40006400

080004b8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <MX_USART1_UART_Init+0x50>)
 80004c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_USART1_UART_Init+0x4c>)
 80004f0:	f001 ffb8 	bl	8002464 <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80004fa:	f000 f85b 	bl	80005b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000b8 	.word	0x200000b8
 8000508:	40013800 	.word	0x40013800

0800050c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_GPIO_Init+0x9c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a20      	ldr	r2, [pc, #128]	; (80005a8 <MX_GPIO_Init+0x9c>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_GPIO_Init+0x9c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0310 	and.w	r3, r3, #16
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_GPIO_Init+0x9c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <MX_GPIO_Init+0x9c>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_GPIO_Init+0x9c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <MX_GPIO_Init+0xa0>)
 8000558:	f001 fb36 	bl	8001bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2102      	movs	r1, #2
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <MX_GPIO_Init+0xa4>)
 8000562:	f001 fb31 	bl	8001bc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4619      	mov	r1, r3
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_GPIO_Init+0xa0>)
 8000580:	f001 f9c8 	bl	8001914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000584:	2302      	movs	r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xa4>)
 800059c:	f001 f9ba 	bl	8001914 <HAL_GPIO_Init>

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40011000 	.word	0x40011000
 80005b0:	40010800 	.word	0x40010800

080005b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005ba:	e7fe      	b.n	80005ba <Error_Handler+0x6>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <HAL_MspInit+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x5c>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_MspInit+0x60>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_MspInit+0x60>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <HAL_CAN_MspInit+0xac>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d141      	bne.n	80006c4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a22      	ldr	r2, [pc, #136]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064a:	61d3      	str	r3, [r2, #28]
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_CAN_MspInit+0xb0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <HAL_CAN_MspInit+0xb4>)
 8000686:	f001 f945 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <HAL_CAN_MspInit+0xb4>)
 80006a0:	f001 f938 	bl	8001914 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2014      	movs	r0, #20
 80006aa:	f001 f84c 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006ae:	2014      	movs	r0, #20
 80006b0:	f001 f865 	bl	800177e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2015      	movs	r0, #21
 80006ba:	f001 f844 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006be:	2015      	movs	r0, #21
 80006c0:	f001 f85d 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40006400 	.word	0x40006400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_UART_MspInit+0x9c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d139      	bne.n	800076c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_UART_MspInit+0xa4>)
 800073e:	f001 f8e9 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_UART_MspInit+0xa4>)
 8000758:	f001 f8dc 	bl	8001914 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	2025      	movs	r0, #37	; 0x25
 8000762:	f000 fff0 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000766:	2025      	movs	r0, #37	; 0x25
 8000768:	f001 f809 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <HardFault_Handler+0x4>

08000792 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <BusFault_Handler+0x4>

0800079e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f892 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007da:	f000 fcbf 	bl	800115c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000090 	.word	0x20000090

080007e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <CAN1_RX1_IRQHandler+0x10>)
 80007ee:	f000 fcb5 	bl	800115c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000090 	.word	0x20000090

080007fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART1_IRQHandler+0x10>)
 8000802:	f001 fe7d 	bl	8002500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000b8 	.word	0x200000b8

08000810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000842:	f7ff ffe5 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f002 fa0b 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fd0b 	bl	8000264 <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000858:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 800085c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000860:	2000013c 	.word	0x2000013c

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 ff59 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff fe9a 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ff71 	bl	800179a <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 ff39 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000008 	.word	0x20000008
 8000914:	20000138 	.word	0x20000138

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000138 	.word	0x20000138

0800092c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e0ed      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe68 	bl	8000620 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000960:	f7ff ffda 	bl	8000918 <HAL_GetTick>
 8000964:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000966:	e012      	b.n	800098e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000968:	f7ff ffd6 	bl	8000918 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d90b      	bls.n	800098e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2205      	movs	r2, #5
 8000986:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e0c5      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0e5      	beq.n	8000968 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 0202 	bic.w	r2, r2, #2
 80009aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ac:	f7ff ffb4 	bl	8000918 <HAL_GetTick>
 80009b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009b2:	e012      	b.n	80009da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b4:	f7ff ffb0 	bl	8000918 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d90b      	bls.n	80009da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2205      	movs	r2, #5
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e09f      	b.n	8000b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e5      	bne.n	80009b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7e1b      	ldrb	r3, [r3, #24]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d108      	bne.n	8000a02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e007      	b.n	8000a12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7e5b      	ldrb	r3, [r3, #25]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d108      	bne.n	8000a2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e007      	b.n	8000a3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7e9b      	ldrb	r3, [r3, #26]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d108      	bne.n	8000a56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0220 	orr.w	r2, r2, #32
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e007      	b.n	8000a66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0220 	bic.w	r2, r2, #32
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7edb      	ldrb	r3, [r3, #27]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d108      	bne.n	8000a80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0210 	bic.w	r2, r2, #16
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e007      	b.n	8000a90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0210 	orr.w	r2, r2, #16
 8000a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7f1b      	ldrb	r3, [r3, #28]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d108      	bne.n	8000aaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0208 	orr.w	r2, r2, #8
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e007      	b.n	8000aba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0208 	bic.w	r2, r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7f5b      	ldrb	r3, [r3, #29]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d108      	bne.n	8000ad4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f042 0204 	orr.w	r2, r2, #4
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0204 	bic.w	r2, r2, #4
 8000ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	431a      	orrs	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	ea42 0103 	orr.w	r1, r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b087      	sub	sp, #28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d003      	beq.n	8000b48 <HAL_CAN_ConfigFilter+0x26>
 8000b40:	7cfb      	ldrb	r3, [r7, #19]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	f040 80aa 	bne.w	8000c9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	2201      	movs	r2, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d123      	bne.n	8000bca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3248      	adds	r2, #72	; 0x48
 8000baa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc0:	6979      	ldr	r1, [r7, #20]
 8000bc2:	3348      	adds	r3, #72	; 0x48
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d122      	bne.n	8000c18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3248      	adds	r2, #72	; 0x48
 8000bf8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c0e:	6979      	ldr	r1, [r7, #20]
 8000c10:	3348      	adds	r3, #72	; 0x48
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c5e:	e007      	b.n	8000c70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d107      	bne.n	8000c88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c8e:	f023 0201 	bic.w	r2, r3, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e006      	b.n	8000caa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
  }
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d12e      	bne.n	8000d26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ce0:	f7ff fe1a 	bl	8000918 <HAL_GetTick>
 8000ce4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ce6:	e012      	b.n	8000d0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce8:	f7ff fe16 	bl	8000918 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	d90b      	bls.n	8000d0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2205      	movs	r2, #5
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e012      	b.n	8000d34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1e5      	bne.n	8000ce8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e006      	b.n	8000d34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
  }
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d5a:	7ffb      	ldrb	r3, [r7, #31]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d003      	beq.n	8000d68 <HAL_CAN_AddTxMessage+0x2c>
 8000d60:	7ffb      	ldrb	r3, [r7, #31]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	f040 80b8 	bne.w	8000ed8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10a      	bne.n	8000d88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d105      	bne.n	8000d88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80a0 	beq.w	8000ec8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	0e1b      	lsrs	r3, r3, #24
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d907      	bls.n	8000da8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e09e      	b.n	8000ee6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000da8:	2201      	movs	r2, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	409a      	lsls	r2, r3
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10d      	bne.n	8000dd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	6809      	ldr	r1, [r1, #0]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3318      	adds	r3, #24
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	440b      	add	r3, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e00f      	b.n	8000df6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de6:	68f9      	ldr	r1, [r7, #12]
 8000de8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3318      	adds	r3, #24
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	440b      	add	r3, r1
 8000df4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3318      	adds	r3, #24
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	440b      	add	r3, r1
 8000e06:	3304      	adds	r3, #4
 8000e08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	7d1b      	ldrb	r3, [r3, #20]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d111      	bne.n	8000e36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3318      	adds	r3, #24
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	6811      	ldr	r1, [r2, #0]
 8000e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	440b      	add	r3, r1
 8000e32:	3304      	adds	r3, #4
 8000e34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3307      	adds	r3, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	061a      	lsls	r2, r3, #24
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3306      	adds	r3, #6
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	041b      	lsls	r3, r3, #16
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3305      	adds	r3, #5
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	4313      	orrs	r3, r2
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	3204      	adds	r2, #4
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	4610      	mov	r0, r2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	6811      	ldr	r1, [r2, #0]
 8000e5e:	ea43 0200 	orr.w	r2, r3, r0
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	440b      	add	r3, r1
 8000e68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3303      	adds	r3, #3
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	061a      	lsls	r2, r3, #24
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3302      	adds	r3, #2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	4610      	mov	r0, r2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	6811      	ldr	r1, [r2, #0]
 8000e94:	ea43 0200 	orr.w	r2, r3, r0
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	440b      	add	r3, r1
 8000e9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ea2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3318      	adds	r3, #24
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	6811      	ldr	r1, [r2, #0]
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3318      	adds	r3, #24
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	440b      	add	r3, r1
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e00e      	b.n	8000ee6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e006      	b.n	8000ee6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
  }
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d003      	beq.n	8000f14 <HAL_CAN_GetRxMessage+0x24>
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f040 80f3 	bne.w	80010fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10e      	bne.n	8000f38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d116      	bne.n	8000f56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0e7      	b.n	8001108 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d107      	bne.n	8000f56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0d8      	b.n	8001108 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	331b      	adds	r3, #27
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0204 	and.w	r2, r3, #4
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10c      	bne.n	8000f8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	331b      	adds	r3, #27
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0d5b      	lsrs	r3, r3, #21
 8000f84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	331b      	adds	r3, #27
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	331b      	adds	r3, #27
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0202 	and.w	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	331b      	adds	r3, #27
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3304      	adds	r3, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 020f 	and.w	r2, r3, #15
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	331b      	adds	r3, #27
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	331b      	adds	r3, #27
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0a1a      	lsrs	r2, r3, #8
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4413      	add	r3, r2
 800103e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0c1a      	lsrs	r2, r3, #16
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3302      	adds	r3, #2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	4413      	add	r3, r2
 8001058:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0e1a      	lsrs	r2, r3, #24
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3303      	adds	r3, #3
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	4413      	add	r3, r2
 8001072:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3304      	adds	r3, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0a1a      	lsrs	r2, r3, #8
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3305      	adds	r3, #5
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0c1a      	lsrs	r2, r3, #16
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3306      	adds	r3, #6
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0e1a      	lsrs	r2, r3, #24
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3307      	adds	r3, #7
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	e007      	b.n	80010f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0220 	orr.w	r2, r2, #32
 80010f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e006      	b.n	8001108 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d002      	beq.n	8001130 <HAL_CAN_ActivateNotification+0x1e>
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d109      	bne.n	8001144 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6959      	ldr	r1, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e006      	b.n	8001152 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d07c      	beq.n	800129c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2201      	movs	r2, #1
 80011b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f97d 	bl	80014be <HAL_CAN_TxMailbox0CompleteCallback>
 80011c4:	e016      	b.n	80011f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	e00c      	b.n	80011f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
 80011ec:	e002      	b.n	80011f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f980 	bl	80014f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d024      	beq.n	8001248 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001206:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f95c 	bl	80014d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001218:	e016      	b.n	8001248 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	e00c      	b.n	8001248 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e002      	b.n	8001248 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f95f 	bl	8001506 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d024      	beq.n	800129c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800125a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f93b 	bl	80014e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800126c:	e016      	b.n	800129c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e00c      	b.n	800129c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	e002      	b.n	800129c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f93e 	bl	8001518 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00c      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2210      	movs	r2, #16
 80012be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2208      	movs	r2, #8
 80012da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f924 	bl	800152a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7fe ff82 	bl	8000204 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00c      	beq.n	8001324 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2210      	movs	r2, #16
 8001322:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2208      	movs	r2, #8
 800133e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f904 	bl	800154e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8ec 	bl	800153c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2210      	movs	r2, #16
 800137e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f8ed 	bl	8001560 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2208      	movs	r2, #8
 80013a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f8e5 	bl	8001572 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d075      	beq.n	800149e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d06c      	beq.n	8001496 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001416:	2b00      	cmp	r3, #0
 8001418:	d03d      	beq.n	8001496 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d038      	beq.n	8001496 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800142a:	2b30      	cmp	r3, #48	; 0x30
 800142c:	d017      	beq.n	800145e <HAL_CAN_IRQHandler+0x302>
 800142e:	2b30      	cmp	r3, #48	; 0x30
 8001430:	d804      	bhi.n	800143c <HAL_CAN_IRQHandler+0x2e0>
 8001432:	2b10      	cmp	r3, #16
 8001434:	d009      	beq.n	800144a <HAL_CAN_IRQHandler+0x2ee>
 8001436:	2b20      	cmp	r3, #32
 8001438:	d00c      	beq.n	8001454 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800143a:	e024      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800143c:	2b50      	cmp	r3, #80	; 0x50
 800143e:	d018      	beq.n	8001472 <HAL_CAN_IRQHandler+0x316>
 8001440:	2b60      	cmp	r3, #96	; 0x60
 8001442:	d01b      	beq.n	800147c <HAL_CAN_IRQHandler+0x320>
 8001444:	2b40      	cmp	r3, #64	; 0x40
 8001446:	d00f      	beq.n	8001468 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001448:	e01d      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001452:	e018      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800145c:	e013      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001466:	e00e      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001470:	e009      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147a:	e004      	b.n	8001486 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001484:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001494:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d008      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f867 	bl	8001584 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
	...

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <__NVIC_EnableIRQ+0x34>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff90 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2d 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff42 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e020      	b.n	800181c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183a:	2b02      	cmp	r3, #2
 800183c:	d005      	beq.n	800184a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e051      	b.n	80018ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020e 	bic.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_DMA_Abort_IT+0xd0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d029      	beq.n	80018c8 <HAL_DMA_Abort_IT+0xa0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_DMA_Abort_IT+0xd4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d022      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x9c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_DMA_Abort_IT+0xd8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d01a      	beq.n	80018be <HAL_DMA_Abort_IT+0x96>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_DMA_Abort_IT+0xdc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d012      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x90>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_DMA_Abort_IT+0xe0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00a      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x8a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_DMA_Abort_IT+0xe4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d102      	bne.n	80018ac <HAL_DMA_Abort_IT+0x84>
 80018a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018aa:	e00e      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	e00b      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b6:	e008      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	e005      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c2:	e002      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018c4:	2310      	movs	r3, #16
 80018c6:	e000      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018c8:	2301      	movs	r3, #1
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_DMA_Abort_IT+0xe8>)
 80018cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
    } 
  }
  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020008 	.word	0x40020008
 80018fc:	4002001c 	.word	0x4002001c
 8001900:	40020030 	.word	0x40020030
 8001904:	40020044 	.word	0x40020044
 8001908:	40020058 	.word	0x40020058
 800190c:	4002006c 	.word	0x4002006c
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e127      	b.n	8001b78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001928:	2201      	movs	r2, #1
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8116 	bne.w	8001b72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b12      	cmp	r3, #18
 800194c:	d034      	beq.n	80019b8 <HAL_GPIO_Init+0xa4>
 800194e:	2b12      	cmp	r3, #18
 8001950:	d80d      	bhi.n	800196e <HAL_GPIO_Init+0x5a>
 8001952:	2b02      	cmp	r3, #2
 8001954:	d02b      	beq.n	80019ae <HAL_GPIO_Init+0x9a>
 8001956:	2b02      	cmp	r3, #2
 8001958:	d804      	bhi.n	8001964 <HAL_GPIO_Init+0x50>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d031      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d01c      	beq.n	800199c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001962:	e048      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001964:	2b03      	cmp	r3, #3
 8001966:	d043      	beq.n	80019f0 <HAL_GPIO_Init+0xdc>
 8001968:	2b11      	cmp	r3, #17
 800196a:	d01b      	beq.n	80019a4 <HAL_GPIO_Init+0x90>
          break;
 800196c:	e043      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800196e:	4a89      	ldr	r2, [pc, #548]	; (8001b94 <HAL_GPIO_Init+0x280>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d026      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
 8001974:	4a87      	ldr	r2, [pc, #540]	; (8001b94 <HAL_GPIO_Init+0x280>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d806      	bhi.n	8001988 <HAL_GPIO_Init+0x74>
 800197a:	4a87      	ldr	r2, [pc, #540]	; (8001b98 <HAL_GPIO_Init+0x284>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d020      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
 8001980:	4a86      	ldr	r2, [pc, #536]	; (8001b9c <HAL_GPIO_Init+0x288>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01d      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
          break;
 8001986:	e036      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001988:	4a85      	ldr	r2, [pc, #532]	; (8001ba0 <HAL_GPIO_Init+0x28c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
 800198e:	4a85      	ldr	r2, [pc, #532]	; (8001ba4 <HAL_GPIO_Init+0x290>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d016      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
 8001994:	4a84      	ldr	r2, [pc, #528]	; (8001ba8 <HAL_GPIO_Init+0x294>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0xae>
          break;
 800199a:	e02c      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e028      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	3304      	adds	r3, #4
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e023      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	3308      	adds	r3, #8
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e01e      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	330c      	adds	r3, #12
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e019      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ca:	2304      	movs	r3, #4
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e012      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	611a      	str	r2, [r3, #16]
          break;
 80019e2:	e008      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	615a      	str	r2, [r3, #20]
          break;
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2bff      	cmp	r3, #255	; 0xff
 80019fa:	d801      	bhi.n	8001a00 <HAL_GPIO_Init+0xec>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	e001      	b.n	8001a04 <HAL_GPIO_Init+0xf0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2bff      	cmp	r3, #255	; 0xff
 8001a0a:	d802      	bhi.n	8001a12 <HAL_GPIO_Init+0xfe>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x104>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3b08      	subs	r3, #8
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	210f      	movs	r1, #15
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	6a39      	ldr	r1, [r7, #32]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	431a      	orrs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8096 	beq.w	8001b72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_GPIO_Init+0x298>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_GPIO_Init+0x298>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_GPIO_Init+0x298>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a5e:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x29c>)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <HAL_GPIO_Init+0x2a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x19e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4a      	ldr	r2, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x2a4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x19a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <HAL_GPIO_Init+0x2a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x196>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x192>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x1a0>
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x1a0>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x1a0>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x1a0>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ac4:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <HAL_GPIO_Init+0x29c>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4938      	ldr	r1, [pc, #224]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
 8001aea:	e006      	b.n	8001afa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aec:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4933      	ldr	r1, [pc, #204]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4929      	ldr	r1, [pc, #164]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	491f      	ldr	r1, [pc, #124]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	491a      	ldr	r1, [pc, #104]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4915      	ldr	r1, [pc, #84]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f aed0 	bne.w	8001928 <HAL_GPIO_Init+0x14>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	372c      	adds	r7, #44	; 0x2c
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10110000 	.word	0x10110000
 8001b9c:	10120000 	.word	0x10120000
 8001ba0:	10310000 	.word	0x10310000
 8001ba4:	10320000 	.word	0x10320000
 8001ba8:	10220000 	.word	0x10220000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40010800 	.word	0x40010800
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	40011400 	.word	0x40011400
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43d9      	mvns	r1, r3
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	400b      	ands	r3, r1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e26c      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8087 	beq.w	8001d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d00c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c58:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d112      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c64:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x12c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d168      	bne.n	8001d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e246      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x76>
 8001c94:	4b80      	ldr	r3, [pc, #512]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a7f      	ldr	r2, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e02e      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a71      	ldr	r2, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe fe06 	bl	8000918 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fe02 	bl	8000918 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1fa      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe4>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fdf2 	bl	8000918 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe fdee 	bl	8000918 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1e6      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x10c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1ba      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4939      	ldr	r1, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fda7 	bl	8000918 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe fda3 	bl	8000918 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e19b      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe fd86 	bl	8000918 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe fd82 	bl	8000918 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e17a      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03a      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fd66 	bl	8000918 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe fd62 	bl	8000918 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e15a      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 fada 	bl	8002428 <RCC_Delay>
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fd4c 	bl	8000918 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe fd48 	bl	8000918 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d908      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e140      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420000 	.word	0x42420000
 8001ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e9      	bne.n	8001e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a6 	beq.w	800200a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b97      	ldr	r3, [pc, #604]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a93      	ldr	r2, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fd09 	bl	8000918 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe fd05 	bl	8000918 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0fd      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a7a      	ldr	r2, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x334>
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a72      	ldr	r2, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x356>
 8001f68:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a6c      	ldr	r2, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fcb9 	bl	8000918 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fcb5 	bl	8000918 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0ab      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x37e>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fca3 	bl	8000918 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fc9f 	bl	8000918 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e095      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8081 	beq.w	8002116 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d061      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d146      	bne.n	80020b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fc73 	bl	8000918 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fc6f 	bl	8000918 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e067      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	430b      	orrs	r3, r1
 8002082:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fc43 	bl	8000918 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fc3f 	bl	8000918 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e037      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
 80020b4:	e02f      	b.n	8002116 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fc2c 	bl	8000918 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fc28 	bl	8000918 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e020      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x498>
 80020e2:	e018      	b.n	8002116 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e013      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	42420060 	.word	0x42420060

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7fe fb7c 	bl	8000918 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fb78 	bl	8000918 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4601      	mov	r1, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	fa21 f303 	lsr.w	r3, r1, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fada 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08002ce4 	.word	0x08002ce4
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b490      	push	{r4, r7}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002308:	1d3c      	adds	r4, r7, #4
 800230a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800230c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d002      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x40>
 800233a:	2b08      	cmp	r3, #8
 800233c:	d003      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x46>
 800233e:	e02d      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002342:	623b      	str	r3, [r7, #32]
      break;
 8002344:	e02d      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002352:	4413      	add	r3, r2
 8002354:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002358:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0c5b      	lsrs	r3, r3, #17
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002372:	4413      	add	r3, r2
 8002374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002378:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800237e:	fb02 f203 	mul.w	r2, r2, r3
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e004      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	623b      	str	r3, [r7, #32]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc90      	pop	{r4, r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	08002cd0 	.word	0x08002cd0
 80023b4:	08002ce0 	.word	0x08002ce0
 80023b8:	40021000 	.word	0x40021000
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	003d0900 	.word	0x003d0900

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023dc:	f7ff fff2 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e0:	4601      	mov	r1, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4a03      	ldr	r2, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08002cf4 	.word	0x08002cf4

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002404:	f7ff ffde 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 8002408:	4601      	mov	r1, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4a03      	ldr	r2, [pc, #12]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	08002cf4 	.word	0x08002cf4

08002428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <RCC_Delay+0x34>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <RCC_Delay+0x38>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002444:	bf00      	nop
  }
  while (Delay --);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <RCC_Delay+0x1c>
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03f      	b.n	80024f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f924 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb4b 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_UART_IRQHandler+0x52>
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa51 	bl	80029f2 <UART_Receive_IT>
      return;
 8002550:	e17c      	b.n	800284c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80b1 	beq.w	80026bc <HAL_UART_IRQHandler+0x1bc>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_UART_IRQHandler+0x70>
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a6 	beq.w	80026bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_UART_IRQHandler+0x90>
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_UART_IRQHandler+0xb0>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f043 0202 	orr.w	r2, r3, #2
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_UART_IRQHandler+0xd0>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00f      	beq.n	80025fa <HAL_UART_IRQHandler+0xfa>
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_UART_IRQHandler+0xee>
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f043 0208 	orr.w	r2, r3, #8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 811f 	beq.w	8002842 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_UART_IRQHandler+0x11e>
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9ea 	bl	80029f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_UART_IRQHandler+0x146>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d031      	beq.n	80026aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f92c 	bl	80028a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d023      	beq.n	80026a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002668:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	2b00      	cmp	r3, #0
 8002670:	d013      	beq.n	800269a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	4a77      	ldr	r2, [pc, #476]	; (8002854 <HAL_UART_IRQHandler+0x354>)
 8002678:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f8d2 	bl	8001828 <HAL_DMA_Abort_IT>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002694:	4610      	mov	r0, r2
 8002696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	e00e      	b.n	80026b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8ee 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	e00a      	b.n	80026b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8ea 	bl	800287c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	e006      	b.n	80026b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8e6 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026b6:	e0c4      	b.n	8002842 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b8:	bf00      	nop
    return;
 80026ba:	e0c2      	b.n	8002842 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	f040 80a1 	bne.w	8002808 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 809b 	beq.w	8002808 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8095 	beq.w	8002808 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04e      	beq.n	80027a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800270c:	8a3b      	ldrh	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8099 	beq.w	8002846 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002718:	8a3a      	ldrh	r2, [r7, #16]
 800271a:	429a      	cmp	r2, r3
 800271c:	f080 8093 	bcs.w	8002846 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8a3a      	ldrh	r2, [r7, #16]
 8002724:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d02b      	beq.n	8002788 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800273e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0210 	bic.w	r2, r2, #16
 800277c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f815 	bl	80017b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002790:	b29b      	uxth	r3, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	b29b      	uxth	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f878 	bl	800288e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800279e:	e052      	b.n	8002846 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d048      	beq.n	800284a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80027b8:	8a7b      	ldrh	r3, [r7, #18]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d045      	beq.n	800284a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0210 	bic.w	r2, r2, #16
 80027fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027fc:	8a7b      	ldrh	r3, [r7, #18]
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f844 	bl	800288e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002806:	e020      	b.n	800284a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_UART_IRQHandler+0x324>
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f881 	bl	8002924 <UART_Transmit_IT>
    return;
 8002822:	e013      	b.n	800284c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <HAL_UART_IRQHandler+0x34c>
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8c2 	bl	80029c2 <UART_EndTransmit_IT>
    return;
 800283e:	bf00      	nop
 8002840:	e004      	b.n	800284c <HAL_UART_IRQHandler+0x34c>
    return;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <HAL_UART_IRQHandler+0x34c>
      return;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_UART_IRQHandler+0x34c>
      return;
 800284a:	bf00      	nop
  }
}
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	080028fd 	.word	0x080028fd

08002858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0210 	bic.w	r2, r2, #16
 80028e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ffb0 	bl	800287c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b21      	cmp	r3, #33	; 0x21
 8002936:	d13e      	bne.n	80029b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d114      	bne.n	800296c <UART_Transmit_IT+0x48>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d110      	bne.n	800296c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	1c9a      	adds	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	e008      	b.n	800297e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6211      	str	r1, [r2, #32]
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff38 	bl	8002858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b22      	cmp	r3, #34	; 0x22
 8002a04:	f040 8099 	bne.w	8002b3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d117      	bne.n	8002a42 <UART_Receive_IT+0x50>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a40:	e026      	b.n	8002a90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d007      	beq.n	8002a66 <UART_Receive_IT+0x74>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <UART_Receive_IT+0x82>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e008      	b.n	8002a86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d148      	bne.n	8002b36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0220 	bic.w	r2, r2, #32
 8002ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d123      	bne.n	8002b2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0210 	bic.w	r2, r2, #16
 8002af8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d10a      	bne.n	8002b1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff feb2 	bl	800288e <HAL_UARTEx_RxEventCallback>
 8002b2a:	e002      	b.n	8002b32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fe9c 	bl	800286a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e002      	b.n	8002b3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b7e:	f023 030c 	bic.w	r3, r3, #12
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <UART_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff fc28 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff fc10 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	0119      	lsls	r1, r3, #4
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <UART_SetConfig+0x118>)
 8002bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <UART_SetConfig+0x118>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4419      	add	r1, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	51eb851f 	.word	0x51eb851f

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2500      	movs	r5, #0
 8002c64:	4e0c      	ldr	r6, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1ba4      	subs	r4, r4, r6
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a5      	cmp	r5, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	f000 f822 	bl	8002cb8 <_init>
 8002c74:	2500      	movs	r5, #0
 8002c76:	4e0a      	ldr	r6, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1ba4      	subs	r4, r4, r6
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a5      	cmp	r5, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c88:	4798      	blx	r3
 8002c8a:	3501      	adds	r5, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c92:	4798      	blx	r3
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08002cfc 	.word	0x08002cfc
 8002c9c:	08002cfc 	.word	0x08002cfc
 8002ca0:	08002cfc 	.word	0x08002cfc
 8002ca4:	08002d00 	.word	0x08002d00

08002ca8 <memset>:
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4402      	add	r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
