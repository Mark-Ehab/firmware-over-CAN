
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08009fbc  08009fbc  00009fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fec  08009fec  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08009fec  08009fec  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fec  08009fec  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009ff4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800a000  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800a000  00010078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051ee  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c4  00000000  00000000  00015223  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  000164e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00016b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164b2  00000000  00000000  000170d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000482d  00000000  00000000  0002d582  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806d1  00000000  00000000  00031daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2480  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001738  00000000  00000000  000b24fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	2000000c 	.word	0x2000000c
 8008128:	00000000 	.word	0x00000000
 800812c:	08009fa4 	.word	0x08009fa4

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000010 	.word	0x20000010
 8008148:	08009fa4 	.word	0x08009fa4

0800814c <CLCD_Init>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Initialize Character LCD								          */
/*--------------------------------------------------------------------------------*/
void CLCD_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
	/* Set the direction of control pins */
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_E_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8008150:	2202      	movs	r2, #2
 8008152:	2108      	movs	r1, #8
 8008154:	2000      	movs	r0, #0
 8008156:	f000 fa15 	bl	8008584 <GPIO_SetPinMode>
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_RS_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 800815a:	2202      	movs	r2, #2
 800815c:	2109      	movs	r1, #9
 800815e:	2000      	movs	r0, #0
 8008160:	f000 fa10 	bl	8008584 <GPIO_SetPinMode>

	/* Check Selected CLCD Mode */
	#if CLCD_MODE == FOUR_BIT_MODE

		/* Set the direction of data pins */
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D4_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8008164:	2202      	movs	r2, #2
 8008166:	210f      	movs	r1, #15
 8008168:	2001      	movs	r0, #1
 800816a:	f000 fa0b 	bl	8008584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D5_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 800816e:	2202      	movs	r2, #2
 8008170:	210e      	movs	r1, #14
 8008172:	2001      	movs	r0, #1
 8008174:	f000 fa06 	bl	8008584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D6_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8008178:	2202      	movs	r2, #2
 800817a:	210d      	movs	r1, #13
 800817c:	2001      	movs	r0, #1
 800817e:	f000 fa01 	bl	8008584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D7_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8008182:	2202      	movs	r2, #2
 8008184:	210c      	movs	r1, #12
 8008186:	2001      	movs	r0, #1
 8008188:	f000 f9fc 	bl	8008584 <GPIO_SetPinMode>

		/* Delay for 40 ms */
		SERV_Delay_ms(40);
 800818c:	2028      	movs	r0, #40	; 0x28
 800818e:	f000 fbbd 	bl	800890c <SERV_Delay_ms>

		/* Set up CLCD on the 4-bit mode */
		CLCD_SetFourBitMode();
 8008192:	f000 f97f 	bl	8008494 <CLCD_SetFourBitMode>
		#error "Wrong CLCD Mode Configuration"

	#endif

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 8008196:	2001      	movs	r0, #1
 8008198:	f000 fbb8 	bl	800890c <SERV_Delay_ms>

	/* Display on CLCD and turn off cursor */
	CLCD_DisplayOnCursorOff();
 800819c:	f000 f981 	bl	80084a2 <CLCD_DisplayOnCursorOff>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 80081a0:	2001      	movs	r0, #1
 80081a2:	f000 fbb3 	bl	800890c <SERV_Delay_ms>

	/* Clear CLCD */
	CLCD_ClearDisplay();
 80081a6:	f000 f98a 	bl	80084be <CLCD_ClearDisplay>

	/* Delay for 3 ms */
	SERV_Delay_ms(3);
 80081aa:	2003      	movs	r0, #3
 80081ac:	f000 fbae 	bl	800890c <SERV_Delay_ms>

	/* Setting up CLCD on entry mode */
	CLCD_SetEntryMode();
 80081b0:	f000 f98c 	bl	80084cc <CLCD_SetEntryMode>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 80081b4:	2001      	movs	r0, #1
 80081b6:	f000 fba9 	bl	800890c <SERV_Delay_ms>
}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}

080081be <CLCD_SendCommand>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Send a command to Character LCD controller	                  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_SendCommand(uint8_t Copy_Command)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	4603      	mov	r3, r0
 80081c6:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
	uint8_t Local_Bit0 , Local_Bit1 , Local_Bit2 , Local_Bit3 , Local_Bit4 , Local_Bit5 , Local_Bit6 , Local_Bit7;

	/* Check if passed command is valid or not */
	if(Copy_Command == CLCD_FUNCTION_SET_EIGHT_BIT_MODE_CMD || Copy_Command == CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD  ||
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	2b38      	cmp	r3, #56	; 0x38
 80081d0:	d02a      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	2b28      	cmp	r3, #40	; 0x28
 80081d6:	d027      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d024      	beq.n	8008228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_OFF_CMD   	|| Copy_Command == CLCD_DISPLAY_OFF_CURSOR_OFF_CMD    	||
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d021      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b0e      	cmp	r3, #14
 80081e8:	d01e      	beq.n	8008228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_ON_CMD   	    || Copy_Command == CLCD_DISPLAY_OFF_CURSOR_ON_CMD    	||
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	2b0a      	cmp	r3, #10
 80081ee:	d01b      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	2b0f      	cmp	r3, #15
 80081f4:	d018      	beq.n	8008228 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_BLINK_CURSOR_CMD				|| Copy_Command == CLCD_SHIFT_LEFT_CURSOR_CMD			||
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d015      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	2b14      	cmp	r3, #20
 8008200:	d012      	beq.n	8008228 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_SHIFT_RIGHT_CURSOR_CMD			|| Copy_Command == CLCD_SHIFT_LEFT_DISPLAY_CMD			||
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2b18      	cmp	r3, #24
 8008206:	d00f      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b1c      	cmp	r3, #28
 800820c:	d00c      	beq.n	8008228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_SHIFT_RIGHT_DISPLAY_CMD		    || Copy_Command == CLCD_BEGIN_AT_FIRST_LINE_CMD		    ||
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d009      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2bc0      	cmp	r3, #192	; 0xc0
 8008218:	d006      	beq.n	8008228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_BEGIN_AT_SECOND_LINE_CMD		|| Copy_Command == CLCD_DISPLAY_CLEAR_CMD 				||
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d003      	beq.n	8008228 <CLCD_SendCommand+0x6a>
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	2b06      	cmp	r3, #6
 8008224:	f040 8092 	bne.w	800834c <CLCD_SendCommand+0x18e>
       Copy_Command == CLCD_ENTRY_MODE_CMD)
	{
		/* Set RS to LOW to tell CLCD to receive a command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_LOW);
 8008228:	2200      	movs	r2, #0
 800822a:	2109      	movs	r1, #9
 800822c:	2000      	movs	r0, #0
 800822e:	f000 fa97 	bl	8008760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8008232:	2001      	movs	r0, #1
 8008234:	f000 fb6a 	bl	800890c <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8008238:	2200      	movs	r2, #0
 800823a:	2108      	movs	r1, #8
 800823c:	2000      	movs	r0, #0
 800823e:	f000 fa8f 	bl	8008760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8008242:	2001      	movs	r0, #1
 8008244:	f000 fb62 	bl	800890c <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get command most significant bits */
			Local_Bit7 = READ_BIT(Copy_Command,7);
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	09db      	lsrs	r3, r3, #7
 800824c:	75bb      	strb	r3, [r7, #22]
			Local_Bit6 = READ_BIT(Copy_Command,6);
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	099b      	lsrs	r3, r3, #6
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	757b      	strb	r3, [r7, #21]
			Local_Bit5 = READ_BIT(Copy_Command,5);
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	753b      	strb	r3, [r7, #20]
			Local_Bit4 = READ_BIT(Copy_Command,4);
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	74fb      	strb	r3, [r7, #19]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8008272:	2201      	movs	r2, #1
 8008274:	2108      	movs	r1, #8
 8008276:	2000      	movs	r0, #0
 8008278:	f000 fa72 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 800827c:	2001      	movs	r0, #1
 800827e:	f000 fb45 	bl	800890c <SERV_Delay_ms>

			/* Set command most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8008282:	7dbb      	ldrb	r3, [r7, #22]
 8008284:	461a      	mov	r2, r3
 8008286:	210c      	movs	r1, #12
 8008288:	2001      	movs	r0, #1
 800828a:	f000 fa69 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 800828e:	7d7b      	ldrb	r3, [r7, #21]
 8008290:	461a      	mov	r2, r3
 8008292:	210d      	movs	r1, #13
 8008294:	2001      	movs	r0, #1
 8008296:	f000 fa63 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 800829a:	7d3b      	ldrb	r3, [r7, #20]
 800829c:	461a      	mov	r2, r3
 800829e:	210e      	movs	r1, #14
 80082a0:	2001      	movs	r0, #1
 80082a2:	f000 fa5d 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 80082a6:	7cfb      	ldrb	r3, [r7, #19]
 80082a8:	461a      	mov	r2, r3
 80082aa:	210f      	movs	r1, #15
 80082ac:	2001      	movs	r0, #1
 80082ae:	f000 fa57 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80082b2:	2001      	movs	r0, #1
 80082b4:	f000 fb2a 	bl	800890c <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 80082b8:	2200      	movs	r2, #0
 80082ba:	2108      	movs	r1, #8
 80082bc:	2000      	movs	r0, #0
 80082be:	f000 fa4f 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80082c2:	2001      	movs	r0, #1
 80082c4:	f000 fb22 	bl	800890c <SERV_Delay_ms>

			/* Get command least significant bits */
			Local_Bit3 = READ_BIT(Copy_Command,3);
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	74bb      	strb	r3, [r7, #18]
			Local_Bit2 = READ_BIT(Copy_Command,2);
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	089b      	lsrs	r3, r3, #2
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	747b      	strb	r3, [r7, #17]
			Local_Bit1 = READ_BIT(Copy_Command,1);
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	743b      	strb	r3, [r7, #16]
			Local_Bit0 = READ_BIT(Copy_Command,0);
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 80082f4:	2201      	movs	r2, #1
 80082f6:	2108      	movs	r1, #8
 80082f8:	2000      	movs	r0, #0
 80082fa:	f000 fa31 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80082fe:	2001      	movs	r0, #1
 8008300:	f000 fb04 	bl	800890c <SERV_Delay_ms>

			/* Set command least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit3);
 8008304:	7cbb      	ldrb	r3, [r7, #18]
 8008306:	461a      	mov	r2, r3
 8008308:	210c      	movs	r1, #12
 800830a:	2001      	movs	r0, #1
 800830c:	f000 fa28 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit2);
 8008310:	7c7b      	ldrb	r3, [r7, #17]
 8008312:	461a      	mov	r2, r3
 8008314:	210d      	movs	r1, #13
 8008316:	2001      	movs	r0, #1
 8008318:	f000 fa22 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit1);
 800831c:	7c3b      	ldrb	r3, [r7, #16]
 800831e:	461a      	mov	r2, r3
 8008320:	210e      	movs	r1, #14
 8008322:	2001      	movs	r0, #1
 8008324:	f000 fa1c 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit0);
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	461a      	mov	r2, r3
 800832c:	210f      	movs	r1, #15
 800832e:	2001      	movs	r0, #1
 8008330:	f000 fa16 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8008334:	2001      	movs	r0, #1
 8008336:	f000 fae9 	bl	800890c <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 800833a:	2200      	movs	r2, #0
 800833c:	2108      	movs	r1, #8
 800833e:	2000      	movs	r0, #0
 8008340:	f000 fa0e 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8008344:	2002      	movs	r0, #2
 8008346:	f000 fae1 	bl	800890c <SERV_Delay_ms>
 800834a:	e001      	b.n	8008350 <CLCD_SendCommand+0x192>

	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
	}

	return Local_Status;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <CLCD_WriteCharacter>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a character on Character CLCD		                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteCharacter(uint8_t Copy_Character)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	4603      	mov	r3, r0
 8008362:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]

	/* Check if passed command is valid or not */
	if(Copy_Character >= 0 && Copy_Character <= 255)
	{
		/* Set RS to HIGH to tell CLCD to receive character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_HIGH);
 8008368:	2201      	movs	r2, #1
 800836a:	2109      	movs	r1, #9
 800836c:	2000      	movs	r0, #0
 800836e:	f000 f9f7 	bl	8008760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8008372:	2001      	movs	r0, #1
 8008374:	f000 faca 	bl	800890c <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8008378:	2200      	movs	r2, #0
 800837a:	2108      	movs	r1, #8
 800837c:	2000      	movs	r0, #0
 800837e:	f000 f9ef 	bl	8008760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8008382:	2001      	movs	r0, #1
 8008384:	f000 fac2 	bl	800890c <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get character most significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,7);
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	09db      	lsrs	r3, r3, #7
 800838c:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,6);
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	099b      	lsrs	r3, r3, #6
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,5);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,4);
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 80083b2:	2201      	movs	r2, #1
 80083b4:	2108      	movs	r1, #8
 80083b6:	2000      	movs	r0, #0
 80083b8:	f000 f9d2 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80083bc:	2001      	movs	r0, #1
 80083be:	f000 faa5 	bl	800890c <SERV_Delay_ms>

			/* Set character most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	461a      	mov	r2, r3
 80083c6:	210c      	movs	r1, #12
 80083c8:	2001      	movs	r0, #1
 80083ca:	f000 f9c9 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	461a      	mov	r2, r3
 80083d2:	210d      	movs	r1, #13
 80083d4:	2001      	movs	r0, #1
 80083d6:	f000 f9c3 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 80083da:	7b3b      	ldrb	r3, [r7, #12]
 80083dc:	461a      	mov	r2, r3
 80083de:	210e      	movs	r1, #14
 80083e0:	2001      	movs	r0, #1
 80083e2:	f000 f9bd 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	461a      	mov	r2, r3
 80083ea:	210f      	movs	r1, #15
 80083ec:	2001      	movs	r0, #1
 80083ee:	f000 f9b7 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80083f2:	2001      	movs	r0, #1
 80083f4:	f000 fa8a 	bl	800890c <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 80083f8:	2200      	movs	r2, #0
 80083fa:	2108      	movs	r1, #8
 80083fc:	2000      	movs	r0, #0
 80083fe:	f000 f9af 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8008402:	2001      	movs	r0, #1
 8008404:	f000 fa82 	bl	800890c <SERV_Delay_ms>

			/* Get character least significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,3);
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	08db      	lsrs	r3, r3, #3
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,2);
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	089b      	lsrs	r3, r3, #2
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,1);
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	085b      	lsrs	r3, r3, #1
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,0);
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8008434:	2201      	movs	r2, #1
 8008436:	2108      	movs	r1, #8
 8008438:	2000      	movs	r0, #0
 800843a:	f000 f991 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 800843e:	2001      	movs	r0, #1
 8008440:	f000 fa64 	bl	800890c <SERV_Delay_ms>

			/* Set character least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	461a      	mov	r2, r3
 8008448:	210c      	movs	r1, #12
 800844a:	2001      	movs	r0, #1
 800844c:	f000 f988 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 8008450:	7b7b      	ldrb	r3, [r7, #13]
 8008452:	461a      	mov	r2, r3
 8008454:	210d      	movs	r1, #13
 8008456:	2001      	movs	r0, #1
 8008458:	f000 f982 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 800845c:	7b3b      	ldrb	r3, [r7, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	210e      	movs	r1, #14
 8008462:	2001      	movs	r0, #1
 8008464:	f000 f97c 	bl	8008760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	461a      	mov	r2, r3
 800846c:	210f      	movs	r1, #15
 800846e:	2001      	movs	r0, #1
 8008470:	f000 f976 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8008474:	2001      	movs	r0, #1
 8008476:	f000 fa49 	bl	800890c <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 800847a:	2200      	movs	r2, #0
 800847c:	2108      	movs	r1, #8
 800847e:	2000      	movs	r0, #0
 8008480:	f000 f96e 	bl	8008760 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8008484:	2002      	movs	r0, #2
 8008486:	f000 fa41 	bl	800890c <SERV_Delay_ms>
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
	}

	return Local_Status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <CLCD_SetFourBitMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up Character LCD on 4-bit mode							  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetFourBitMode(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD);
 8008498:	2028      	movs	r0, #40	; 0x28
 800849a:	f7ff fe90 	bl	80081be <CLCD_SendCommand>
}
 800849e:	bf00      	nop
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <CLCD_DisplayOnCursorOff>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Turn on display and turn off cursor							  */
/*--------------------------------------------------------------------------------*/
void CLCD_DisplayOnCursorOff(void)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF_CMD);
 80084a6:	200c      	movs	r0, #12
 80084a8:	f7ff fe89 	bl	80081be <CLCD_SendCommand>
}
 80084ac:	bf00      	nop
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <CLCD_BeginAtSecondLine>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Force cursor to be at the beginning of the second line		  */
/*--------------------------------------------------------------------------------*/
void CLCD_BeginAtSecondLine(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_BEGIN_AT_SECOND_LINE_CMD);
 80084b4:	20c0      	movs	r0, #192	; 0xc0
 80084b6:	f7ff fe82 	bl	80081be <CLCD_SendCommand>
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}

080084be <CLCD_ClearDisplay>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Clear the entire display of character LCD		 			  */
/*--------------------------------------------------------------------------------*/
void CLCD_ClearDisplay(void)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_DISPLAY_CLEAR_CMD);
 80084c2:	2001      	movs	r0, #1
 80084c4:	f7ff fe7b 	bl	80081be <CLCD_SendCommand>
}
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}

080084cc <CLCD_SetEntryMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up character LCD to operate on the entry mode		 	  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetEntryMode(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_ENTRY_MODE_CMD);
 80084d0:	2006      	movs	r0, #6
 80084d2:	f7ff fe74 	bl	80081be <CLCD_SendCommand>
}
 80084d6:	bf00      	nop
 80084d8:	bd80      	pop	{r7, pc}

080084da <CLCD_WriteString>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a string on the Character LCD display      		 	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteString(uint8_t* Copy_pString)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
	uint32_t Local_CharacterCounter = 0 ;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60bb      	str	r3, [r7, #8]

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pString != NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d016      	beq.n	800851e <CLCD_WriteString+0x44>
	{
		/* Write the passed string on the CLCD display */
		while(Copy_pString[Local_CharacterCounter] != '\0')
 80084f0:	e00e      	b.n	8008510 <CLCD_WriteString+0x36>
		{
			/* Write a character */
			CLCD_WriteCharacter(Copy_pString[Local_CharacterCounter]);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4413      	add	r3, r2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff ff2d 	bl	800835a <CLCD_WriteCharacter>

			/* Increment the character counter */
			Local_CharacterCounter++;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3301      	adds	r3, #1
 8008504:	60bb      	str	r3, [r7, #8]

			/* Check if the character counter reached 16 or not */
			if(Local_CharacterCounter == 20)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b14      	cmp	r3, #20
 800850a:	d101      	bne.n	8008510 <CLCD_WriteString+0x36>
			{
				/* Force CLCD cursor to begin at second line */
				CLCD_BeginAtSecondLine();
 800850c:	f7ff ffd0 	bl	80084b0 <CLCD_BeginAtSecondLine>
		while(Copy_pString[Local_CharacterCounter] != '\0')
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4413      	add	r3, r2
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1ea      	bne.n	80084f2 <CLCD_WriteString+0x18>
 800851c:	e001      	b.n	8008522 <CLCD_WriteString+0x48>
		}
	}
	else
	{
		/* Passed pointer is NULL pointer */
		Local_Status = NULL_POINTER;
 800851e:	2302      	movs	r3, #2
 8008520:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <CLCD_MoveCursor>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : Put the cursor at a specific location (segment) on the         */
/*                 character LCD display					                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_MoveCursor(uint8_t Copy_RowNumber , uint8_t Copy_ColumnNumber)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	460a      	mov	r2, r1
 8008536:	71fb      	strb	r3, [r7, #7]
 8008538:	4613      	mov	r3, r2
 800853a:	71bb      	strb	r3, [r7, #6]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed column number is within valid range or not */
	if((Copy_ColumnNumber >= 0) && (Copy_ColumnNumber <= 19))
 8008540:	79bb      	ldrb	r3, [r7, #6]
 8008542:	2b13      	cmp	r3, #19
 8008544:	d816      	bhi.n	8008574 <CLCD_MoveCursor+0x48>
	{
		switch(Copy_RowNumber)
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <CLCD_MoveCursor+0x26>
 800854c:	2b01      	cmp	r3, #1
 800854e:	d007      	beq.n	8008560 <CLCD_MoveCursor+0x34>
 8008550:	e00d      	b.n	800856e <CLCD_MoveCursor+0x42>
		{
			case 0:

				/* Move the cursor to desired cell number on row 0 */
				CLCD_SendCommand(Copy_ColumnNumber+0x80);
 8008552:	79bb      	ldrb	r3, [r7, #6]
 8008554:	3b80      	subs	r3, #128	; 0x80
 8008556:	b2db      	uxtb	r3, r3
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff fe30 	bl	80081be <CLCD_SendCommand>
				break;
 800855e:	e00b      	b.n	8008578 <CLCD_MoveCursor+0x4c>

			case 1:

				/* Move the cursor to desired cell number on row 1 */
				CLCD_SendCommand(Copy_ColumnNumber+0xC0);
 8008560:	79bb      	ldrb	r3, [r7, #6]
 8008562:	3b40      	subs	r3, #64	; 0x40
 8008564:	b2db      	uxtb	r3, r3
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fe29 	bl	80081be <CLCD_SendCommand>
				break;
 800856c:	e004      	b.n	8008578 <CLCD_MoveCursor+0x4c>

			default:

				/* Function is not behaving as expected */
				Local_Status = RT_NOK;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
 8008572:	e001      	b.n	8008578 <CLCD_MoveCursor+0x4c>
		}
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status ;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <GPIO_SetPinMode>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets the mode of operation of GPIO pin                         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinMode(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Mode)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
 800858e:	460b      	mov	r3, r1
 8008590:	71bb      	strb	r3, [r7, #6]
 8008592:	4613      	mov	r3, r2
 8008594:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and mode are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	2b02      	cmp	r3, #2
 800859e:	f200 80d0 	bhi.w	8008742 <GPIO_SetPinMode+0x1be>
 80085a2:	79bb      	ldrb	r3, [r7, #6]
 80085a4:	2b0f      	cmp	r3, #15
 80085a6:	f200 80cc 	bhi.w	8008742 <GPIO_SetPinMode+0x1be>
 80085aa:	797b      	ldrb	r3, [r7, #5]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d02a      	beq.n	8008606 <GPIO_SetPinMode+0x82>
	   (Copy_Mode == GPIO_PIN_INPUT_ANALOG || Copy_Mode == GPIO_PIN_INPUT_FLOATING || Copy_Mode == GPIO_PIN_INPUT_PULLUP_PULLDOWN ||
 80085b0:	797b      	ldrb	r3, [r7, #5]
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d027      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085b6:	797b      	ldrb	r3, [r7, #5]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d024      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085bc:	797b      	ldrb	r3, [r7, #5]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d021      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_OPENDRAIN    ||
 80085c2:	797b      	ldrb	r3, [r7, #5]
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	d01e      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085c8:	797b      	ldrb	r3, [r7, #5]
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d01b      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_OPENDRAIN ||
 80085ce:	797b      	ldrb	r3, [r7, #5]
 80085d0:	2b0d      	cmp	r3, #13
 80085d2:	d018      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085d4:	797b      	ldrb	r3, [r7, #5]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d015      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL     || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_OPENDRAIN     ||
 80085da:	797b      	ldrb	r3, [r7, #5]
 80085dc:	2b06      	cmp	r3, #6
 80085de:	d012      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085e0:	797b      	ldrb	r3, [r7, #5]
 80085e2:	2b0a      	cmp	r3, #10
 80085e4:	d00f      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_PUSHPULL  || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_OPENDRAIN  ||
 80085e6:	797b      	ldrb	r3, [r7, #5]
 80085e8:	2b0e      	cmp	r3, #14
 80085ea:	d00c      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085ec:	797b      	ldrb	r3, [r7, #5]
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d009      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_OPENDRAIN    ||
 80085f2:	797b      	ldrb	r3, [r7, #5]
 80085f4:	2b07      	cmp	r3, #7
 80085f6:	d006      	beq.n	8008606 <GPIO_SetPinMode+0x82>
 80085f8:	797b      	ldrb	r3, [r7, #5]
 80085fa:	2b0b      	cmp	r3, #11
 80085fc:	d003      	beq.n	8008606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_OPENDRAIN))
 80085fe:	797b      	ldrb	r3, [r7, #5]
 8008600:	2b0f      	cmp	r3, #15
 8008602:	f040 809e 	bne.w	8008742 <GPIO_SetPinMode+0x1be>
	{
		/* Check port number */
		switch(Copy_Port)
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d03c      	beq.n	8008686 <GPIO_SetPinMode+0x102>
 800860c:	2b02      	cmp	r3, #2
 800860e:	d072      	beq.n	80086f6 <GPIO_SetPinMode+0x172>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d000      	beq.n	8008616 <GPIO_SetPinMode+0x92>
					/* Set the four bits of mode concerned with the pin in CRH register */
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
				}
				break;
		}
	}
 8008614:	e097      	b.n	8008746 <GPIO_SetPinMode+0x1c2>
				if(Copy_Pin < 8)
 8008616:	79bb      	ldrb	r3, [r7, #6]
 8008618:	2b07      	cmp	r3, #7
 800861a:	d817      	bhi.n	800864c <GPIO_SetPinMode+0xc8>
					GPIOA->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 800861c:	4b4d      	ldr	r3, [pc, #308]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	79ba      	ldrb	r2, [r7, #6]
 8008622:	0092      	lsls	r2, r2, #2
 8008624:	210f      	movs	r1, #15
 8008626:	fa01 f202 	lsl.w	r2, r1, r2
 800862a:	43d2      	mvns	r2, r2
 800862c:	4611      	mov	r1, r2
 800862e:	4a49      	ldr	r2, [pc, #292]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008630:	400b      	ands	r3, r1
 8008632:	6013      	str	r3, [r2, #0]
					GPIOA->CRL |= (Copy_Mode << (4*Copy_Pin));
 8008634:	4b47      	ldr	r3, [pc, #284]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	7979      	ldrb	r1, [r7, #5]
 800863a:	79ba      	ldrb	r2, [r7, #6]
 800863c:	0092      	lsls	r2, r2, #2
 800863e:	fa01 f202 	lsl.w	r2, r1, r2
 8008642:	4611      	mov	r1, r2
 8008644:	4a43      	ldr	r2, [pc, #268]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008646:	430b      	orrs	r3, r1
 8008648:	6013      	str	r3, [r2, #0]
				break;
 800864a:	e074      	b.n	8008736 <GPIO_SetPinMode+0x1b2>
				else if(Copy_Pin < 16)
 800864c:	79bb      	ldrb	r3, [r7, #6]
 800864e:	2b0f      	cmp	r3, #15
 8008650:	d871      	bhi.n	8008736 <GPIO_SetPinMode+0x1b2>
					GPIOA->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8008652:	4b40      	ldr	r3, [pc, #256]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	79ba      	ldrb	r2, [r7, #6]
 8008658:	3a08      	subs	r2, #8
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	210f      	movs	r1, #15
 800865e:	fa01 f202 	lsl.w	r2, r1, r2
 8008662:	43d2      	mvns	r2, r2
 8008664:	4611      	mov	r1, r2
 8008666:	4a3b      	ldr	r2, [pc, #236]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008668:	400b      	ands	r3, r1
 800866a:	6053      	str	r3, [r2, #4]
					GPIOA->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 800866c:	4b39      	ldr	r3, [pc, #228]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	7979      	ldrb	r1, [r7, #5]
 8008672:	79ba      	ldrb	r2, [r7, #6]
 8008674:	3a08      	subs	r2, #8
 8008676:	0092      	lsls	r2, r2, #2
 8008678:	fa01 f202 	lsl.w	r2, r1, r2
 800867c:	4611      	mov	r1, r2
 800867e:	4a35      	ldr	r2, [pc, #212]	; (8008754 <GPIO_SetPinMode+0x1d0>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6053      	str	r3, [r2, #4]
				break;
 8008684:	e057      	b.n	8008736 <GPIO_SetPinMode+0x1b2>
				if(Copy_Pin < 8)
 8008686:	79bb      	ldrb	r3, [r7, #6]
 8008688:	2b07      	cmp	r3, #7
 800868a:	d817      	bhi.n	80086bc <GPIO_SetPinMode+0x138>
					GPIOB->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 800868c:	4b32      	ldr	r3, [pc, #200]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	79ba      	ldrb	r2, [r7, #6]
 8008692:	0092      	lsls	r2, r2, #2
 8008694:	210f      	movs	r1, #15
 8008696:	fa01 f202 	lsl.w	r2, r1, r2
 800869a:	43d2      	mvns	r2, r2
 800869c:	4611      	mov	r1, r2
 800869e:	4a2e      	ldr	r2, [pc, #184]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086a0:	400b      	ands	r3, r1
 80086a2:	6013      	str	r3, [r2, #0]
					GPIOB->CRL |= (Copy_Mode << (4*Copy_Pin));
 80086a4:	4b2c      	ldr	r3, [pc, #176]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	7979      	ldrb	r1, [r7, #5]
 80086aa:	79ba      	ldrb	r2, [r7, #6]
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	fa01 f202 	lsl.w	r2, r1, r2
 80086b2:	4611      	mov	r1, r2
 80086b4:	4a28      	ldr	r2, [pc, #160]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6013      	str	r3, [r2, #0]
				break;
 80086ba:	e03e      	b.n	800873a <GPIO_SetPinMode+0x1b6>
				else if(Copy_Pin < 16)
 80086bc:	79bb      	ldrb	r3, [r7, #6]
 80086be:	2b0f      	cmp	r3, #15
 80086c0:	d83b      	bhi.n	800873a <GPIO_SetPinMode+0x1b6>
					GPIOB->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 80086c2:	4b25      	ldr	r3, [pc, #148]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	79ba      	ldrb	r2, [r7, #6]
 80086c8:	3a08      	subs	r2, #8
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	210f      	movs	r1, #15
 80086ce:	fa01 f202 	lsl.w	r2, r1, r2
 80086d2:	43d2      	mvns	r2, r2
 80086d4:	4611      	mov	r1, r2
 80086d6:	4a20      	ldr	r2, [pc, #128]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086d8:	400b      	ands	r3, r1
 80086da:	6053      	str	r3, [r2, #4]
					GPIOB->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 80086dc:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	7979      	ldrb	r1, [r7, #5]
 80086e2:	79ba      	ldrb	r2, [r7, #6]
 80086e4:	3a08      	subs	r2, #8
 80086e6:	0092      	lsls	r2, r2, #2
 80086e8:	fa01 f202 	lsl.w	r2, r1, r2
 80086ec:	4611      	mov	r1, r2
 80086ee:	4a1a      	ldr	r2, [pc, #104]	; (8008758 <GPIO_SetPinMode+0x1d4>)
 80086f0:	430b      	orrs	r3, r1
 80086f2:	6053      	str	r3, [r2, #4]
				break;
 80086f4:	e021      	b.n	800873a <GPIO_SetPinMode+0x1b6>
				if(Copy_Pin >= 13 && Copy_Pin <= 15)
 80086f6:	79bb      	ldrb	r3, [r7, #6]
 80086f8:	2b0c      	cmp	r3, #12
 80086fa:	d920      	bls.n	800873e <GPIO_SetPinMode+0x1ba>
 80086fc:	79bb      	ldrb	r3, [r7, #6]
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	d81d      	bhi.n	800873e <GPIO_SetPinMode+0x1ba>
					GPIOC->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8008702:	4b16      	ldr	r3, [pc, #88]	; (800875c <GPIO_SetPinMode+0x1d8>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	79ba      	ldrb	r2, [r7, #6]
 8008708:	3a08      	subs	r2, #8
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	210f      	movs	r1, #15
 800870e:	fa01 f202 	lsl.w	r2, r1, r2
 8008712:	43d2      	mvns	r2, r2
 8008714:	4611      	mov	r1, r2
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <GPIO_SetPinMode+0x1d8>)
 8008718:	400b      	ands	r3, r1
 800871a:	6053      	str	r3, [r2, #4]
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <GPIO_SetPinMode+0x1d8>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	7979      	ldrb	r1, [r7, #5]
 8008722:	79ba      	ldrb	r2, [r7, #6]
 8008724:	3a08      	subs	r2, #8
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	fa01 f202 	lsl.w	r2, r1, r2
 800872c:	4611      	mov	r1, r2
 800872e:	4a0b      	ldr	r2, [pc, #44]	; (800875c <GPIO_SetPinMode+0x1d8>)
 8008730:	430b      	orrs	r3, r1
 8008732:	6053      	str	r3, [r2, #4]
				break;
 8008734:	e003      	b.n	800873e <GPIO_SetPinMode+0x1ba>
				break;
 8008736:	bf00      	nop
 8008738:	e005      	b.n	8008746 <GPIO_SetPinMode+0x1c2>
				break;
 800873a:	bf00      	nop
 800873c:	e003      	b.n	8008746 <GPIO_SetPinMode+0x1c2>
				break;
 800873e:	bf00      	nop
	}
 8008740:	e001      	b.n	8008746 <GPIO_SetPinMode+0x1c2>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8008742:	2301      	movs	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40010800 	.word	0x40010800
 8008758:	40010c00 	.word	0x40010c00
 800875c:	40011000 	.word	0x40011000

08008760 <GPIO_SetPinVal>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets a value (Logical High or Logical Low) on GPIO pin         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinVal(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Value)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
 800876a:	460b      	mov	r3, r1
 800876c:	71bb      	strb	r3, [r7, #6]
 800876e:	4613      	mov	r3, r2
 8008770:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and value are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d87c      	bhi.n	8008876 <GPIO_SetPinVal+0x116>
 800877c:	79bb      	ldrb	r3, [r7, #6]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d879      	bhi.n	8008876 <GPIO_SetPinVal+0x116>
 8008782:	797b      	ldrb	r3, [r7, #5]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d00e      	beq.n	80087a6 <GPIO_SetPinVal+0x46>
	   (Copy_Value == GPIO_PIN_HIGH   ||  Copy_Value == GPIO_PIN_LOW    || Copy_Value == GPIO_PIN_OD_HIGH ||
 8008788:	797b      	ldrb	r3, [r7, #5]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <GPIO_SetPinVal+0x46>
 800878e:	797b      	ldrb	r3, [r7, #5]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d008      	beq.n	80087a6 <GPIO_SetPinVal+0x46>
 8008794:	797b      	ldrb	r3, [r7, #5]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <GPIO_SetPinVal+0x46>
	    Copy_Value == GPIO_PIN_OD_LOW ||  Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_PULLDOWN))
 800879a:	797b      	ldrb	r3, [r7, #5]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d002      	beq.n	80087a6 <GPIO_SetPinVal+0x46>
 80087a0:	797b      	ldrb	r3, [r7, #5]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d167      	bne.n	8008876 <GPIO_SetPinVal+0x116>
	{
			/* Check port number */
			switch(Copy_Port)
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d022      	beq.n	80087f2 <GPIO_SetPinVal+0x92>
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d03e      	beq.n	800882e <GPIO_SetPinVal+0xce>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d000      	beq.n	80087b6 <GPIO_SetPinVal+0x56>
						/* Set pin in BRR register */
						GPIOC->BRR = (1 << Copy_Pin);
					}
					break;
			}
	}
 80087b4:	e061      	b.n	800887a <GPIO_SetPinVal+0x11a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 80087b6:	797b      	ldrb	r3, [r7, #5]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d005      	beq.n	80087c8 <GPIO_SetPinVal+0x68>
 80087bc:	797b      	ldrb	r3, [r7, #5]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d002      	beq.n	80087c8 <GPIO_SetPinVal+0x68>
 80087c2:	797b      	ldrb	r3, [r7, #5]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d105      	bne.n	80087d4 <GPIO_SetPinVal+0x74>
						GPIOA->BSRR = (1 << Copy_Pin);
 80087c8:	79bb      	ldrb	r3, [r7, #6]
 80087ca:	2201      	movs	r2, #1
 80087cc:	409a      	lsls	r2, r3
 80087ce:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <GPIO_SetPinVal+0x128>)
 80087d0:	611a      	str	r2, [r3, #16]
					break;
 80087d2:	e04a      	b.n	800886a <GPIO_SetPinVal+0x10a>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 80087d4:	797b      	ldrb	r3, [r7, #5]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <GPIO_SetPinVal+0x86>
 80087da:	797b      	ldrb	r3, [r7, #5]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <GPIO_SetPinVal+0x86>
 80087e0:	797b      	ldrb	r3, [r7, #5]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d141      	bne.n	800886a <GPIO_SetPinVal+0x10a>
						GPIOA->BRR = (1 << Copy_Pin);
 80087e6:	79bb      	ldrb	r3, [r7, #6]
 80087e8:	2201      	movs	r2, #1
 80087ea:	409a      	lsls	r2, r3
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <GPIO_SetPinVal+0x128>)
 80087ee:	615a      	str	r2, [r3, #20]
					break;
 80087f0:	e03b      	b.n	800886a <GPIO_SetPinVal+0x10a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 80087f2:	797b      	ldrb	r3, [r7, #5]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d005      	beq.n	8008804 <GPIO_SetPinVal+0xa4>
 80087f8:	797b      	ldrb	r3, [r7, #5]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d002      	beq.n	8008804 <GPIO_SetPinVal+0xa4>
 80087fe:	797b      	ldrb	r3, [r7, #5]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d105      	bne.n	8008810 <GPIO_SetPinVal+0xb0>
						GPIOB->BSRR = (1 << Copy_Pin);
 8008804:	79bb      	ldrb	r3, [r7, #6]
 8008806:	2201      	movs	r2, #1
 8008808:	409a      	lsls	r2, r3
 800880a:	4b20      	ldr	r3, [pc, #128]	; (800888c <GPIO_SetPinVal+0x12c>)
 800880c:	611a      	str	r2, [r3, #16]
					break;
 800880e:	e02e      	b.n	800886e <GPIO_SetPinVal+0x10e>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 8008810:	797b      	ldrb	r3, [r7, #5]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <GPIO_SetPinVal+0xc2>
 8008816:	797b      	ldrb	r3, [r7, #5]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <GPIO_SetPinVal+0xc2>
 800881c:	797b      	ldrb	r3, [r7, #5]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d125      	bne.n	800886e <GPIO_SetPinVal+0x10e>
						GPIOB->BRR = (1 << Copy_Pin);
 8008822:	79bb      	ldrb	r3, [r7, #6]
 8008824:	2201      	movs	r2, #1
 8008826:	409a      	lsls	r2, r3
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <GPIO_SetPinVal+0x12c>)
 800882a:	615a      	str	r2, [r3, #20]
					break;
 800882c:	e01f      	b.n	800886e <GPIO_SetPinVal+0x10e>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 800882e:	797b      	ldrb	r3, [r7, #5]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d005      	beq.n	8008840 <GPIO_SetPinVal+0xe0>
 8008834:	797b      	ldrb	r3, [r7, #5]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d002      	beq.n	8008840 <GPIO_SetPinVal+0xe0>
 800883a:	797b      	ldrb	r3, [r7, #5]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d105      	bne.n	800884c <GPIO_SetPinVal+0xec>
						GPIOC->BSRR = (1 << Copy_Pin);
 8008840:	79bb      	ldrb	r3, [r7, #6]
 8008842:	2201      	movs	r2, #1
 8008844:	409a      	lsls	r2, r3
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <GPIO_SetPinVal+0x130>)
 8008848:	611a      	str	r2, [r3, #16]
					break;
 800884a:	e012      	b.n	8008872 <GPIO_SetPinVal+0x112>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 800884c:	797b      	ldrb	r3, [r7, #5]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <GPIO_SetPinVal+0xfe>
 8008852:	797b      	ldrb	r3, [r7, #5]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <GPIO_SetPinVal+0xfe>
 8008858:	797b      	ldrb	r3, [r7, #5]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <GPIO_SetPinVal+0x112>
						GPIOC->BRR = (1 << Copy_Pin);
 800885e:	79bb      	ldrb	r3, [r7, #6]
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <GPIO_SetPinVal+0x130>)
 8008866:	615a      	str	r2, [r3, #20]
					break;
 8008868:	e003      	b.n	8008872 <GPIO_SetPinVal+0x112>
					break;
 800886a:	bf00      	nop
 800886c:	e005      	b.n	800887a <GPIO_SetPinVal+0x11a>
					break;
 800886e:	bf00      	nop
 8008870:	e003      	b.n	800887a <GPIO_SetPinVal+0x11a>
					break;
 8008872:	bf00      	nop
	}
 8008874:	e001      	b.n	800887a <GPIO_SetPinVal+0x11a>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010800 	.word	0x40010800
 800888c:	40010c00 	.word	0x40010c00
 8008890:	40011000 	.word	0x40011000

08008894 <SCB_ShiftInterruptVectorTable>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function is intended to force a large system software	  */
/* 				   reset of all major components								  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t SCB_ShiftInterruptVectorTable(uint32_t Copy_VectorTableOffset)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	uint8_t Local_Status = RT_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed vector table offset is within the valid range */
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <SCB_ShiftInterruptVectorTable+0x34>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d807      	bhi.n	80088b8 <SCB_ShiftInterruptVectorTable+0x24>
	   ((Copy_VectorTableOffset & 0x000000FF) == 0))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	b2db      	uxtb	r3, r3
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <SCB_ShiftInterruptVectorTable+0x24>
	{
		SCB->VTOR = Copy_VectorTableOffset;
 80088b0:	4a06      	ldr	r2, [pc, #24]	; (80088cc <SCB_ShiftInterruptVectorTable+0x38>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6093      	str	r3, [r2, #8]
 80088b6:	e001      	b.n	80088bc <SCB_ShiftInterruptVectorTable+0x28>
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 80088b8:	2301      	movs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_Status;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr
 80088c8:	3ffffe00 	.word	0x3ffffe00
 80088cc:	e000ed00 	.word	0xe000ed00

080088d0 <SCB_PerformSoftReset>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function is intended to force a large system software	  */
/* 				   reset of all major components								  */
/*--------------------------------------------------------------------------------*/
void SCB_PerformSoftReset(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
	/* Local Variables Definitions */
	uint32_t Local_AIRCR_RegisterClone;			/* Variable to hold clone value of AIRCR register*/

	/* Assign AIRCR register current value to Local_AIRCR_RegisterClone variable */
	Local_AIRCR_RegisterClone = SCB->AIRCR;
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <SCB_PerformSoftReset+0x38>)
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	607b      	str	r3, [r7, #4]

	/* Mask bits [16:31] of AIRCR Register Key in Local_AIRCR_RegisterClone variable */
	Local_AIRCR_RegisterClone &= SCB_VECTKEY_MASK;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	607b      	str	r3, [r7, #4]

	/* Write AIRCR Register Key in Local_AIRCR_RegisterClone variable in bits [16:31] to be able to write on register */
	Local_AIRCR_RegisterClone |= SCB_VECTKEY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ec:	607b      	str	r3, [r7, #4]

	/* Perform soft reset through setting SYSRESETREQ bit (Bit 2) in Local_AIRCR_RegisterClone variable */
	SET_BIT(Local_AIRCR_RegisterClone,AIRCR_SYSRESETREQ);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f043 0304 	orr.w	r3, r3, #4
 80088f4:	607b      	str	r3, [r7, #4]

	/* Assign the last value of Local_AIRCR_RegisterClone variable after modification to AIRCR register */
	SCB->AIRCR = Local_AIRCR_RegisterClone;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <SCB_PerformSoftReset+0x38>)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60d3      	str	r3, [r2, #12]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <SERV_Delay_ms>:
/* @Return          : uint32_t  	        	      		        			  */
/*--------------------------------------------------------------------------------*/
/* @Description     : Function to block the processor for specified delay in ms	  */
/*--------------------------------------------------------------------------------*/
uint32_t SERV_Delay_ms(uint32_t Copy_Time)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	uint32_t Local_Ticks = (500 * Copy_Time);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	60bb      	str	r3, [r7, #8]
	uint32_t Local_TicksCounter;

	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e003      	b.n	800892e <SERV_Delay_ms+0x22>
	{
		__asm("NOP");
 8008926:	bf00      	nop
	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	429a      	cmp	r2, r3
 8008934:	d3f7      	bcc.n	8008926 <SERV_Delay_ms+0x1a>
	}
	return Local_TicksCounter;
 8008936:	68fb      	ldr	r3, [r7, #12]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
	...

08008944 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
/* Local variables: */
	uint8_t Flag_once = 1;
 800894a:	2301      	movs	r3, #1
 800894c:	71fb      	strb	r3, [r7, #7]

	/* CAN RX header parameters */
	RxHeader.DLC = 1;
 800894e:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <main+0xa0>)
 8008950:	2201      	movs	r2, #1
 8008952:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8008954:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <main+0xa0>)
 8008956:	2200      	movs	r2, #0
 8008958:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 800895a:	4b22      	ldr	r3, [pc, #136]	; (80089e4 <main+0xa0>)
 800895c:	2200      	movs	r2, #0
 800895e:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x100;
 8008960:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <main+0xa0>)
 8008962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008966:	601a      	str	r2, [r3, #0]

/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008968:	f000 fa48 	bl	8008dfc <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800896c:	f000 f89a 	bl	8008aa4 <MX_GPIO_Init>
/* CAN: */
	/* initializing the CAN driver. */
	MX_CAN_Init();
 8008970:	f000 f846 	bl	8008a00 <MX_CAN_Init>
	/* Start the CAN driver */
	HAL_CAN_Start(&hcan);
 8008974:	481c      	ldr	r0, [pc, #112]	; (80089e8 <main+0xa4>)
 8008976:	f000 fca7 	bl	80092c8 <HAL_CAN_Start>
	/* Enable the CAN interrupt mode */
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800897a:	2102      	movs	r1, #2
 800897c:	481a      	ldr	r0, [pc, #104]	; (80089e8 <main+0xa4>)
 800897e:	f000 fdf8 	bl	8009572 <HAL_CAN_ActivateNotification>

/* LCD: */
	/* initialize the LCD */
	CLCD_Init();
 8008982:	f7ff fbe3 	bl	800814c <CLCD_Init>
	/* clear the LCD */
	CLCD_ClearDisplay();
 8008986:	f7ff fd9a 	bl	80084be <CLCD_ClearDisplay>
	/* write the string on the LCD */
	CLCD_WriteString("App_1");
 800898a:	4818      	ldr	r0, [pc, #96]	; (80089ec <main+0xa8>)
 800898c:	f7ff fda5 	bl	80084da <CLCD_WriteString>

/* Super loop */
	while (1)
	{
		/* if the button is pressed */
		if(FLAG_buttonPressed)
 8008990:	4b17      	ldr	r3, [pc, #92]	; (80089f0 <main+0xac>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <main+0x60>
		{
			/* delay for debouncing */
			HAL_Delay(100);
 8008998:	2064      	movs	r0, #100	; 0x64
 800899a:	f000 faaf 	bl	8008efc <HAL_Delay>
			/* jump to the bootloader */
			JumpToBootLoader();
 800899e:	f000 f8ef 	bl	8008b80 <JumpToBootLoader>
 80089a2:	e7f5      	b.n	8008990 <main+0x4c>
		}
		else
		{
			/* if the CAN flag is raised */
			if(Flag_CAN)
 80089a4:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <main+0xb0>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0f1      	beq.n	8008990 <main+0x4c>
			{
				if(Flag_once)
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <main+0x8a>
				{
					Flag_once = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	71fb      	strb	r3, [r7, #7]
					/* clear the LCD */
					CLCD_ClearDisplay();
 80089b6:	f7ff fd82 	bl	80084be <CLCD_ClearDisplay>
					/* write the string on the LCD */
					CLCD_WriteString("available update");
 80089ba:	480f      	ldr	r0, [pc, #60]	; (80089f8 <main+0xb4>)
 80089bc:	f7ff fd8d 	bl	80084da <CLCD_WriteString>
					/* moving cursor to the second raw */
					CLCD_MoveCursor(1, 0);
 80089c0:	2100      	movs	r1, #0
 80089c2:	2001      	movs	r0, #1
 80089c4:	f7ff fdb2 	bl	800852c <CLCD_MoveCursor>
					/* write the string on the LCD */
					CLCD_WriteString("press the button");
 80089c8:	480c      	ldr	r0, [pc, #48]	; (80089fc <main+0xb8>)
 80089ca:	f7ff fd86 	bl	80084da <CLCD_WriteString>
				}
				if(FLAG_buttonPressed)
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <main+0xac>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0dc      	beq.n	8008990 <main+0x4c>
				{
					HAL_Delay(100);
 80089d6:	2064      	movs	r0, #100	; 0x64
 80089d8:	f000 fa90 	bl	8008efc <HAL_Delay>
					JumpToBootLoader();
 80089dc:	f000 f8d0 	bl	8008b80 <JumpToBootLoader>
		if(FLAG_buttonPressed)
 80089e0:	e7d6      	b.n	8008990 <main+0x4c>
 80089e2:	bf00      	nop
 80089e4:	20000058 	.word	0x20000058
 80089e8:	2000002c 	.word	0x2000002c
 80089ec:	08009fbc 	.word	0x08009fbc
 80089f0:	20000029 	.word	0x20000029
 80089f4:	20000028 	.word	0x20000028
 80089f8:	08009fc4 	.word	0x08009fc4
 80089fc:	08009fd8 	.word	0x08009fd8

08008a00 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8008a06:	4b25      	ldr	r3, [pc, #148]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a08:	4a25      	ldr	r2, [pc, #148]	; (8008aa0 <MX_CAN_Init+0xa0>)
 8008a0a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8008a0c:	4b23      	ldr	r3, [pc, #140]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a0e:	2210      	movs	r2, #16
 8008a10:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008a18:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8008a1e:	4b1f      	ldr	r3, [pc, #124]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a24:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008a26:	4b1d      	ldr	r3, [pc, #116]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8008a32:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8008a38:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8008a3e:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8008a44:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8008a4a:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008a50:	4812      	ldr	r0, [pc, #72]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a52:	f000 fa75 	bl	8008f40 <HAL_CAN_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8008a5c:	f000 f8ca 	bl	8008bf4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;


	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8008a64:	230a      	movs	r3, #10
 8008a66:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8008a70:	2300      	movs	r3, #0
 8008a72:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8008a80:	2301      	movs	r3, #1
 8008a82:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assigned to CAN1
 8008a84:	2300      	movs	r3, #0
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8008a88:	463b      	mov	r3, r7
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <MX_CAN_Init+0x9c>)
 8008a8e:	f000 fb52 	bl	8009136 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8008a92:	bf00      	nop
 8008a94:	3728      	adds	r7, #40	; 0x28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	2000002c 	.word	0x2000002c
 8008aa0:	40006400 	.word	0x40006400

08008aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
 8008ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	4a2c      	ldr	r2, [pc, #176]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008abe:	f043 0304 	orr.w	r3, r3, #4
 8008ac2:	6193      	str	r3, [r2, #24]
 8008ac4:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	607b      	str	r3, [r7, #4]
 8008ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ad0:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008ad6:	f043 0308 	orr.w	r3, r3, #8
 8008ada:	6193      	str	r3, [r2, #24]
 8008adc:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <MX_GPIO_Init+0xcc>)
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f240 3106 	movw	r1, #774	; 0x306
 8008aee:	4821      	ldr	r0, [pc, #132]	; (8008b74 <MX_GPIO_Init+0xd0>)
 8008af0:	f001 f9ea 	bl	8009ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008af4:	2200      	movs	r2, #0
 8008af6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8008afa:	481f      	ldr	r0, [pc, #124]	; (8008b78 <MX_GPIO_Init+0xd4>)
 8008afc:	f001 f9e4 	bl	8009ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 8008b00:	f240 3306 	movw	r3, #774	; 0x306
 8008b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b06:	2301      	movs	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b12:	f107 0308 	add.w	r3, r7, #8
 8008b16:	4619      	mov	r1, r3
 8008b18:	4816      	ldr	r0, [pc, #88]	; (8008b74 <MX_GPIO_Init+0xd0>)
 8008b1a:	f001 f87b 	bl	8009c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008b24:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <MX_GPIO_Init+0xd8>)
 8008b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4619      	mov	r1, r3
 8008b32:	4811      	ldr	r0, [pc, #68]	; (8008b78 <MX_GPIO_Init+0xd4>)
 8008b34:	f001 f86e 	bl	8009c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008b38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b46:	2302      	movs	r3, #2
 8008b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4809      	ldr	r0, [pc, #36]	; (8008b78 <MX_GPIO_Init+0xd4>)
 8008b52:	f001 f85f 	bl	8009c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008b56:	2200      	movs	r2, #0
 8008b58:	2100      	movs	r1, #0
 8008b5a:	2028      	movs	r0, #40	; 0x28
 8008b5c:	f001 f823 	bl	8009ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008b60:	2028      	movs	r0, #40	; 0x28
 8008b62:	f001 f83c 	bl	8009bde <HAL_NVIC_EnableIRQ>

}
 8008b66:	bf00      	nop
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40021000 	.word	0x40021000
 8008b74:	40010800 	.word	0x40010800
 8008b78:	40010c00 	.word	0x40010c00
 8008b7c:	10210000 	.word	0x10210000

08008b80 <JumpToBootLoader>:

/* USER CODE BEGIN 4 */

void JumpToBootLoader(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
	/* deinitializing the HAL */
	HAL_DeInit();
 8008b84:	f000 f950 	bl	8008e28 <HAL_DeInit>

	/* shift the vector table to that of Bootloader */
	SCB_ShiftInterruptVectorTable(0x08000000);
 8008b88:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8008b8c:	f7ff fe82 	bl	8008894 <SCB_ShiftInterruptVectorTable>

	/* Apply soft reset */
	SCB_PerformSoftReset();
 8008b90:	f7ff fe9e 	bl	80088d0 <SCB_PerformSoftReset>
}
 8008b94:	bf00      	nop
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * return: void
 *
 * description: CAN callback function
 ***************************************************************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	/* raise the CAN flag */
	Flag_CAN = 1;
 8008ba0:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
	/* toggle a led that indicates a reception*/
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8008ba6:	2102      	movs	r1, #2
 8008ba8:	4807      	ldr	r0, [pc, #28]	; (8008bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8008baa:	f001 f9a5 	bl	8009ef8 <HAL_GPIO_TogglePin>
	/* receive in the CAN RX buffer */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &CAN_RxBuffer);
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8008bb0:	4a07      	ldr	r2, [pc, #28]	; (8008bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbcb 	bl	8009350 <HAL_CAN_GetRxMessage>

}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000028 	.word	0x20000028
 8008bc8:	40010800 	.word	0x40010800
 8008bcc:	20000054 	.word	0x20000054
 8008bd0:	20000058 	.word	0x20000058

08008bd4 <HAL_GPIO_EXTI_Callback>:
 * return: void
 *
 * description: External callback function
 ***************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pins)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	80fb      	strh	r3, [r7, #6]
	/* raise the switch flag */
	FLAG_buttonPressed = 1;
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	701a      	strb	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20000029 	.word	0x20000029

08008bf4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008bf8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8008bfa:	e7fe      	b.n	8008bfa <Error_Handler+0x6>

08008bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c08:	f043 0301 	orr.w	r3, r3, #1
 8008c0c:	6193      	str	r3, [r2, #24]
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	60bb      	str	r3, [r7, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c24:	61d3      	str	r3, [r2, #28]
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <HAL_MspInit+0x5c>)
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <HAL_MspInit+0x60>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	4a04      	ldr	r2, [pc, #16]	; (8008c5c <HAL_MspInit+0x60>)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr
 8008c58:	40021000 	.word	0x40021000
 8008c5c:	40010000 	.word	0x40010000

08008c60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	f107 0310 	add.w	r3, r7, #16
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a24      	ldr	r2, [pc, #144]	; (8008d0c <HAL_CAN_MspInit+0xac>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d141      	bne.n	8008d04 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c80:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c8a:	61d3      	str	r3, [r2, #28]
 8008c8c:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c98:	4b1d      	ldr	r3, [pc, #116]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	4a1c      	ldr	r2, [pc, #112]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008c9e:	f043 0304 	orr.w	r3, r3, #4
 8008ca2:	6193      	str	r3, [r2, #24]
 8008ca4:	4b1a      	ldr	r3, [pc, #104]	; (8008d10 <HAL_CAN_MspInit+0xb0>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cbe:	f107 0310 	add.w	r3, r7, #16
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4813      	ldr	r0, [pc, #76]	; (8008d14 <HAL_CAN_MspInit+0xb4>)
 8008cc6:	f000 ffa5 	bl	8009c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cd8:	f107 0310 	add.w	r3, r7, #16
 8008cdc:	4619      	mov	r1, r3
 8008cde:	480d      	ldr	r0, [pc, #52]	; (8008d14 <HAL_CAN_MspInit+0xb4>)
 8008ce0:	f000 ff98 	bl	8009c14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	2014      	movs	r0, #20
 8008cea:	f000 ff5c 	bl	8009ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008cee:	2014      	movs	r0, #20
 8008cf0:	f000 ff75 	bl	8009bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	2015      	movs	r0, #21
 8008cfa:	f000 ff54 	bl	8009ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008cfe:	2015      	movs	r0, #21
 8008d00:	f000 ff6d 	bl	8009bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008d04:	bf00      	nop
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40006400 	.word	0x40006400
 8008d10:	40021000 	.word	0x40021000
 8008d14:	40010800 	.word	0x40010800

08008d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d1c:	bf00      	nop
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d28:	e7fe      	b.n	8008d28 <HardFault_Handler+0x4>

08008d2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d2e:	e7fe      	b.n	8008d2e <MemManage_Handler+0x4>

08008d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d34:	e7fe      	b.n	8008d34 <BusFault_Handler+0x4>

08008d36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d36:	b480      	push	{r7}
 8008d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d3a:	e7fe      	b.n	8008d3a <UsageFault_Handler+0x4>

08008d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d40:	bf00      	nop
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d58:	bf00      	nop
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr

08008d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d64:	f000 f8ae 	bl	8008ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d68:	bf00      	nop
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008d70:	4802      	ldr	r0, [pc, #8]	; (8008d7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8008d72:	f000 fc23 	bl	80095bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008d76:	bf00      	nop
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000002c 	.word	0x2000002c

08008d80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8008d84:	4802      	ldr	r0, [pc, #8]	; (8008d90 <CAN1_RX1_IRQHandler+0x10>)
 8008d86:	f000 fc19 	bl	80095bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000002c 	.word	0x2000002c

08008d94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008d98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008d9c:	f001 f8c6 	bl	8009f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008da8:	bf00      	nop
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008db0:	480c      	ldr	r0, [pc, #48]	; (8008de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008db2:	490d      	ldr	r1, [pc, #52]	; (8008de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008db4:	4a0d      	ldr	r2, [pc, #52]	; (8008dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008db8:	e002      	b.n	8008dc0 <LoopCopyDataInit>

08008dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dbe:	3304      	adds	r3, #4

08008dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008dc4:	d3f9      	bcc.n	8008dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dc6:	4a0a      	ldr	r2, [pc, #40]	; (8008df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008dc8:	4c0a      	ldr	r4, [pc, #40]	; (8008df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008dcc:	e001      	b.n	8008dd2 <LoopFillZerobss>

08008dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dd0:	3204      	adds	r2, #4

08008dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dd4:	d3fb      	bcc.n	8008dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008dd6:	f7ff ffe5 	bl	8008da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008dda:	f001 f8bf 	bl	8009f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008dde:	f7ff fdb1 	bl	8008944 <main>
  bx lr
 8008de2:	4770      	bx	lr
  ldr r0, =_sdata
 8008de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008dec:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8008df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008df4:	20000078 	.word	0x20000078

08008df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008df8:	e7fe      	b.n	8008df8 <ADC1_2_IRQHandler>
	...

08008dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <HAL_Init+0x28>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <HAL_Init+0x28>)
 8008e06:	f043 0310 	orr.w	r3, r3, #16
 8008e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e0c:	2003      	movs	r0, #3
 8008e0e:	f000 febf 	bl	8009b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e12:	2000      	movs	r0, #0
 8008e14:	f000 f826 	bl	8008e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e18:	f7ff fef0 	bl	8008bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40022000 	.word	0x40022000

08008e28 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8008e2c:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <HAL_DeInit+0x2c>)
 8008e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e32:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008e34:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <HAL_DeInit+0x2c>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8008e3a:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <HAL_DeInit+0x2c>)
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8008e42:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <HAL_DeInit+0x2c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8008e48:	f000 f806 	bl	8008e58 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40021000 	.word	0x40021000

08008e58 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr

08008e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e6c:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <HAL_InitTick+0x54>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <HAL_InitTick+0x58>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	4619      	mov	r1, r3
 8008e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 feb9 	bl	8009bfa <HAL_SYSTICK_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00e      	b.n	8008eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d80a      	bhi.n	8008eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	f000 fe81 	bl	8009ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ea4:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <HAL_InitTick+0x5c>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e000      	b.n	8008eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	20000008 	.word	0x20000008
 8008ec0:	20000004 	.word	0x20000004

08008ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <HAL_IncTick+0x1c>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_IncTick+0x20>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	4a03      	ldr	r2, [pc, #12]	; (8008ee4 <HAL_IncTick+0x20>)
 8008ed6:	6013      	str	r3, [r2, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr
 8008ee0:	20000008 	.word	0x20000008
 8008ee4:	20000074 	.word	0x20000074

08008ee8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  return uwTick;
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <HAL_GetTick+0x10>)
 8008eee:	681b      	ldr	r3, [r3, #0]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr
 8008ef8:	20000074 	.word	0x20000074

08008efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f04:	f7ff fff0 	bl	8008ee8 <HAL_GetTick>
 8008f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d005      	beq.n	8008f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <HAL_Delay+0x40>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f22:	bf00      	nop
 8008f24:	f7ff ffe0 	bl	8008ee8 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d8f7      	bhi.n	8008f24 <HAL_Delay+0x28>
  {
  }
}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000008 	.word	0x20000008

08008f40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e0ed      	b.n	800912e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff fe7e 	bl	8008c60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f74:	f7ff ffb8 	bl	8008ee8 <HAL_GetTick>
 8008f78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f7a:	e012      	b.n	8008fa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f7c:	f7ff ffb4 	bl	8008ee8 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b0a      	cmp	r3, #10
 8008f88:	d90b      	bls.n	8008fa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2205      	movs	r2, #5
 8008f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e0c5      	b.n	800912e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0e5      	beq.n	8008f7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0202 	bic.w	r2, r2, #2
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fc0:	f7ff ff92 	bl	8008ee8 <HAL_GetTick>
 8008fc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008fc6:	e012      	b.n	8008fee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008fc8:	f7ff ff8e 	bl	8008ee8 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b0a      	cmp	r3, #10
 8008fd4:	d90b      	bls.n	8008fee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2205      	movs	r2, #5
 8008fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e09f      	b.n	800912e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7e1b      	ldrb	r3, [r3, #24]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d108      	bne.n	8009016 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e007      	b.n	8009026 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009024:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	7e5b      	ldrb	r3, [r3, #25]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d108      	bne.n	8009040 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e007      	b.n	8009050 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7e9b      	ldrb	r3, [r3, #26]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d108      	bne.n	800906a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0220 	orr.w	r2, r2, #32
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e007      	b.n	800907a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0220 	bic.w	r2, r2, #32
 8009078:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7edb      	ldrb	r3, [r3, #27]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d108      	bne.n	8009094 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0210 	bic.w	r2, r2, #16
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	e007      	b.n	80090a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0210 	orr.w	r2, r2, #16
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7f1b      	ldrb	r3, [r3, #28]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d108      	bne.n	80090be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0208 	orr.w	r2, r2, #8
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	e007      	b.n	80090ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0208 	bic.w	r2, r2, #8
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7f5b      	ldrb	r3, [r3, #29]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d108      	bne.n	80090e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0204 	orr.w	r2, r2, #4
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	e007      	b.n	80090f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0204 	bic.w	r2, r2, #4
 80090f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	ea42 0103 	orr.w	r1, r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009136:	b480      	push	{r7}
 8009138:	b087      	sub	sp, #28
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800914c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800914e:	7cfb      	ldrb	r3, [r7, #19]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d003      	beq.n	800915c <HAL_CAN_ConfigFilter+0x26>
 8009154:	7cfb      	ldrb	r3, [r7, #19]
 8009156:	2b02      	cmp	r3, #2
 8009158:	f040 80aa 	bne.w	80092b0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009162:	f043 0201 	orr.w	r2, r3, #1
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	f003 031f 	and.w	r3, r3, #31
 8009174:	2201      	movs	r2, #1
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	43db      	mvns	r3, r3
 8009186:	401a      	ands	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d123      	bne.n	80091de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	43db      	mvns	r3, r3
 80091a0:	401a      	ands	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80091b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3248      	adds	r2, #72	; 0x48
 80091be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80091d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	3348      	adds	r3, #72	; 0x48
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	440b      	add	r3, r1
 80091dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d122      	bne.n	800922c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009206:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	3248      	adds	r2, #72	; 0x48
 800920c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009220:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009222:	6979      	ldr	r1, [r7, #20]
 8009224:	3348      	adds	r3, #72	; 0x48
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	440b      	add	r3, r1
 800922a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	43db      	mvns	r3, r3
 800923e:	401a      	ands	r2, r3
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009246:	e007      	b.n	8009258 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	431a      	orrs	r2, r3
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	43db      	mvns	r3, r3
 800926a:	401a      	ands	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009272:	e007      	b.n	8009284 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	431a      	orrs	r2, r3
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d107      	bne.n	800929c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	431a      	orrs	r2, r3
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092a2:	f023 0201 	bic.w	r2, r3, #1
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	e006      	b.n	80092be <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
  }
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d12e      	bne.n	800933a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0201 	bic.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092f4:	f7ff fdf8 	bl	8008ee8 <HAL_GetTick>
 80092f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80092fa:	e012      	b.n	8009322 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092fc:	f7ff fdf4 	bl	8008ee8 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	2b0a      	cmp	r3, #10
 8009308:	d90b      	bls.n	8009322 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2205      	movs	r2, #5
 800931a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e012      	b.n	8009348 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	e006      	b.n	8009348 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
  }
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009364:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d003      	beq.n	8009374 <HAL_CAN_GetRxMessage+0x24>
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b02      	cmp	r3, #2
 8009370:	f040 80f3 	bne.w	800955a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10e      	bne.n	8009398 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d116      	bne.n	80093b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e0e7      	b.n	8009568 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d107      	bne.n	80093b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e0d8      	b.n	8009568 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	331b      	adds	r3, #27
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	4413      	add	r3, r2
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0204 	and.w	r2, r3, #4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10c      	bne.n	80093ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	331b      	adds	r3, #27
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	4413      	add	r3, r2
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	0d5b      	lsrs	r3, r3, #21
 80093e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	e00b      	b.n	8009406 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	331b      	adds	r3, #27
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	08db      	lsrs	r3, r3, #3
 80093fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	331b      	adds	r3, #27
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	4413      	add	r3, r2
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0202 	and.w	r2, r3, #2
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	331b      	adds	r3, #27
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	4413      	add	r3, r2
 8009428:	3304      	adds	r3, #4
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 020f 	and.w	r2, r3, #15
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	331b      	adds	r3, #27
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	4413      	add	r3, r2
 8009440:	3304      	adds	r3, #4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	0a1b      	lsrs	r3, r3, #8
 8009446:	b2da      	uxtb	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	331b      	adds	r3, #27
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	4413      	add	r3, r2
 8009458:	3304      	adds	r3, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	4413      	add	r3, r2
 800946e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	4413      	add	r3, r2
 8009484:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	0a1a      	lsrs	r2, r3, #8
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	3301      	adds	r3, #1
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	4413      	add	r3, r2
 800949e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	0c1a      	lsrs	r2, r3, #16
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	3302      	adds	r3, #2
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	0e1a      	lsrs	r2, r3, #24
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	3303      	adds	r3, #3
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	011b      	lsls	r3, r3, #4
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	3304      	adds	r3, #4
 80094dc:	b2d2      	uxtb	r2, r2
 80094de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	0a1a      	lsrs	r2, r3, #8
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	3305      	adds	r3, #5
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	4413      	add	r3, r2
 8009504:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	0c1a      	lsrs	r2, r3, #16
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	3306      	adds	r3, #6
 8009510:	b2d2      	uxtb	r2, r2
 8009512:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	4413      	add	r3, r2
 800951e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	0e1a      	lsrs	r2, r3, #24
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	3307      	adds	r3, #7
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d108      	bne.n	8009546 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0220 	orr.w	r2, r2, #32
 8009542:	60da      	str	r2, [r3, #12]
 8009544:	e007      	b.n	8009556 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0220 	orr.w	r2, r2, #32
 8009554:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e006      	b.n	8009568 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
  }
}
 8009568:	4618      	mov	r0, r3
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009582:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d002      	beq.n	8009590 <HAL_CAN_ActivateNotification+0x1e>
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d109      	bne.n	80095a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6959      	ldr	r1, [r3, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e006      	b.n	80095b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
  }
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	; 0x28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d07c      	beq.n	80096fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d023      	beq.n	8009654 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2201      	movs	r2, #1
 8009612:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f97d 	bl	800991e <HAL_CAN_TxMailbox0CompleteCallback>
 8009624:	e016      	b.n	8009654 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
 8009638:	e00c      	b.n	8009654 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
 800964c:	e002      	b.n	8009654 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f980 	bl	8009954 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d024      	beq.n	80096a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009666:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f95c 	bl	8009930 <HAL_CAN_TxMailbox1CompleteCallback>
 8009678:	e016      	b.n	80096a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
 800968c:	e00c      	b.n	80096a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
 80096a0:	e002      	b.n	80096a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f95f 	bl	8009966 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d024      	beq.n	80096fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f93b 	bl	8009942 <HAL_CAN_TxMailbox2CompleteCallback>
 80096cc:	e016      	b.n	80096fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
 80096e0:	e00c      	b.n	80096fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
 80096f4:	e002      	b.n	80096fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f93e 	bl	8009978 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	2b00      	cmp	r3, #0
 800970e:	d007      	beq.n	8009720 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009716:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2210      	movs	r2, #16
 800971e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	f003 0304 	and.w	r3, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00b      	beq.n	8009742 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d006      	beq.n	8009742 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2208      	movs	r2, #8
 800973a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f924 	bl	800998a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fa1c 	bl	8008b98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800977a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2210      	movs	r2, #16
 8009782:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d006      	beq.n	80097a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2208      	movs	r2, #8
 800979e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f904 	bl	80099ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8ec 	bl	800999c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d006      	beq.n	80097e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2210      	movs	r2, #16
 80097de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f8ed 	bl	80099c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d006      	beq.n	8009808 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2208      	movs	r2, #8
 8009800:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f8e5 	bl	80099d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d075      	beq.n	80098fe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b00      	cmp	r3, #0
 800981a:	d06c      	beq.n	80098f6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800983e:	2b00      	cmp	r3, #0
 8009840:	d008      	beq.n	8009854 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	f043 0302 	orr.w	r3, r3, #2
 8009852:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	f043 0304 	orr.w	r3, r3, #4
 800986e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009876:	2b00      	cmp	r3, #0
 8009878:	d03d      	beq.n	80098f6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009880:	2b00      	cmp	r3, #0
 8009882:	d038      	beq.n	80098f6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800988a:	2b30      	cmp	r3, #48	; 0x30
 800988c:	d017      	beq.n	80098be <HAL_CAN_IRQHandler+0x302>
 800988e:	2b30      	cmp	r3, #48	; 0x30
 8009890:	d804      	bhi.n	800989c <HAL_CAN_IRQHandler+0x2e0>
 8009892:	2b10      	cmp	r3, #16
 8009894:	d009      	beq.n	80098aa <HAL_CAN_IRQHandler+0x2ee>
 8009896:	2b20      	cmp	r3, #32
 8009898:	d00c      	beq.n	80098b4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800989a:	e024      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800989c:	2b50      	cmp	r3, #80	; 0x50
 800989e:	d018      	beq.n	80098d2 <HAL_CAN_IRQHandler+0x316>
 80098a0:	2b60      	cmp	r3, #96	; 0x60
 80098a2:	d01b      	beq.n	80098dc <HAL_CAN_IRQHandler+0x320>
 80098a4:	2b40      	cmp	r3, #64	; 0x40
 80098a6:	d00f      	beq.n	80098c8 <HAL_CAN_IRQHandler+0x30c>
            break;
 80098a8:	e01d      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	f043 0308 	orr.w	r3, r3, #8
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098b2:	e018      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	f043 0310 	orr.w	r3, r3, #16
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098bc:	e013      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	f043 0320 	orr.w	r3, r3, #32
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098c6:	e00e      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098d0:	e009      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098da:	e004      	b.n	80098e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80098e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80098f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2204      	movs	r2, #4
 80098fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f867 	bl	80099e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009916:	bf00      	nop
 8009918:	3728      	adds	r7, #40	; 0x28
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr

08009930 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr

08009942 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr

08009966 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr

08009978 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	bc80      	pop	{r7}
 8009988:	4770      	bx	lr

0800998a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr

080099ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc80      	pop	{r7}
 80099be:	4770      	bx	lr

080099c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bc80      	pop	{r7}
 80099d0:	4770      	bx	lr

080099d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr

080099e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
	...

080099f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <__NVIC_SetPriorityGrouping+0x44>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a14:	4013      	ands	r3, r2
 8009a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a2a:	4a04      	ldr	r2, [pc, #16]	; (8009a3c <__NVIC_SetPriorityGrouping+0x44>)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	60d3      	str	r3, [r2, #12]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	e000ed00 	.word	0xe000ed00

08009a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <__NVIC_GetPriorityGrouping+0x18>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	f003 0307 	and.w	r3, r3, #7
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	e000ed00 	.word	0xe000ed00

08009a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	db0b      	blt.n	8009a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	f003 021f 	and.w	r2, r3, #31
 8009a74:	4906      	ldr	r1, [pc, #24]	; (8009a90 <__NVIC_EnableIRQ+0x34>)
 8009a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8009a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	e000e100 	.word	0xe000e100

08009a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	db0a      	blt.n	8009abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	490c      	ldr	r1, [pc, #48]	; (8009ae0 <__NVIC_SetPriority+0x4c>)
 8009aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab2:	0112      	lsls	r2, r2, #4
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009abc:	e00a      	b.n	8009ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	4908      	ldr	r1, [pc, #32]	; (8009ae4 <__NVIC_SetPriority+0x50>)
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	3b04      	subs	r3, #4
 8009acc:	0112      	lsls	r2, r2, #4
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	761a      	strb	r2, [r3, #24]
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bc80      	pop	{r7}
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	e000e100 	.word	0xe000e100
 8009ae4:	e000ed00 	.word	0xe000ed00

08009ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	; 0x24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f1c3 0307 	rsb	r3, r3, #7
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	bf28      	it	cs
 8009b06:	2304      	movcs	r3, #4
 8009b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	2b06      	cmp	r3, #6
 8009b10:	d902      	bls.n	8009b18 <NVIC_EncodePriority+0x30>
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	3b03      	subs	r3, #3
 8009b16:	e000      	b.n	8009b1a <NVIC_EncodePriority+0x32>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	fa02 f303 	lsl.w	r3, r2, r3
 8009b26:	43da      	mvns	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	401a      	ands	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b30:	f04f 31ff 	mov.w	r1, #4294967295
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3a:	43d9      	mvns	r1, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b40:	4313      	orrs	r3, r2
         );
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3724      	adds	r7, #36	; 0x24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bc80      	pop	{r7}
 8009b4a:	4770      	bx	lr

08009b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b5c:	d301      	bcc.n	8009b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e00f      	b.n	8009b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b62:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <SysTick_Config+0x40>)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b6a:	210f      	movs	r1, #15
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	f7ff ff90 	bl	8009a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <SysTick_Config+0x40>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <SysTick_Config+0x40>)
 8009b7c:	2207      	movs	r2, #7
 8009b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	e000e010 	.word	0xe000e010

08009b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff2d 	bl	80099f8 <__NVIC_SetPriorityGrouping>
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	4603      	mov	r3, r0
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bb8:	f7ff ff42 	bl	8009a40 <__NVIC_GetPriorityGrouping>
 8009bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f7ff ff90 	bl	8009ae8 <NVIC_EncodePriority>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ff5f 	bl	8009a94 <__NVIC_SetPriority>
}
 8009bd6:	bf00      	nop
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	4603      	mov	r3, r0
 8009be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff ff35 	bl	8009a5c <__NVIC_EnableIRQ>
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ffa2 	bl	8009b4c <SysTick_Config>
 8009c08:	4603      	mov	r3, r0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b08b      	sub	sp, #44	; 0x2c
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009c22:	2300      	movs	r3, #0
 8009c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c26:	e127      	b.n	8009e78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009c28:	2201      	movs	r2, #1
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	4013      	ands	r3, r2
 8009c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	f040 8116 	bne.w	8009e72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	2b12      	cmp	r3, #18
 8009c4c:	d034      	beq.n	8009cb8 <HAL_GPIO_Init+0xa4>
 8009c4e:	2b12      	cmp	r3, #18
 8009c50:	d80d      	bhi.n	8009c6e <HAL_GPIO_Init+0x5a>
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d02b      	beq.n	8009cae <HAL_GPIO_Init+0x9a>
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d804      	bhi.n	8009c64 <HAL_GPIO_Init+0x50>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d031      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d01c      	beq.n	8009c9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009c62:	e048      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d043      	beq.n	8009cf0 <HAL_GPIO_Init+0xdc>
 8009c68:	2b11      	cmp	r3, #17
 8009c6a:	d01b      	beq.n	8009ca4 <HAL_GPIO_Init+0x90>
          break;
 8009c6c:	e043      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009c6e:	4a89      	ldr	r2, [pc, #548]	; (8009e94 <HAL_GPIO_Init+0x280>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d026      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
 8009c74:	4a87      	ldr	r2, [pc, #540]	; (8009e94 <HAL_GPIO_Init+0x280>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d806      	bhi.n	8009c88 <HAL_GPIO_Init+0x74>
 8009c7a:	4a87      	ldr	r2, [pc, #540]	; (8009e98 <HAL_GPIO_Init+0x284>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d020      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
 8009c80:	4a86      	ldr	r2, [pc, #536]	; (8009e9c <HAL_GPIO_Init+0x288>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01d      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
          break;
 8009c86:	e036      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8009c88:	4a85      	ldr	r2, [pc, #532]	; (8009ea0 <HAL_GPIO_Init+0x28c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d019      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
 8009c8e:	4a85      	ldr	r2, [pc, #532]	; (8009ea4 <HAL_GPIO_Init+0x290>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d016      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
 8009c94:	4a84      	ldr	r2, [pc, #528]	; (8009ea8 <HAL_GPIO_Init+0x294>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <HAL_GPIO_Init+0xae>
          break;
 8009c9a:	e02c      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	623b      	str	r3, [r7, #32]
          break;
 8009ca2:	e028      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	623b      	str	r3, [r7, #32]
          break;
 8009cac:	e023      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	623b      	str	r3, [r7, #32]
          break;
 8009cb6:	e01e      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	330c      	adds	r3, #12
 8009cbe:	623b      	str	r3, [r7, #32]
          break;
 8009cc0:	e019      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009cca:	2304      	movs	r3, #4
 8009ccc:	623b      	str	r3, [r7, #32]
          break;
 8009cce:	e012      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d105      	bne.n	8009ce4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009cd8:	2308      	movs	r3, #8
 8009cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	611a      	str	r2, [r3, #16]
          break;
 8009ce2:	e008      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	69fa      	ldr	r2, [r7, #28]
 8009cec:	615a      	str	r2, [r3, #20]
          break;
 8009cee:	e002      	b.n	8009cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	623b      	str	r3, [r7, #32]
          break;
 8009cf4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2bff      	cmp	r3, #255	; 0xff
 8009cfa:	d801      	bhi.n	8009d00 <HAL_GPIO_Init+0xec>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	e001      	b.n	8009d04 <HAL_GPIO_Init+0xf0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2bff      	cmp	r3, #255	; 0xff
 8009d0a:	d802      	bhi.n	8009d12 <HAL_GPIO_Init+0xfe>
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	e002      	b.n	8009d18 <HAL_GPIO_Init+0x104>
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	3b08      	subs	r3, #8
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	210f      	movs	r1, #15
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	fa01 f303 	lsl.w	r3, r1, r3
 8009d26:	43db      	mvns	r3, r3
 8009d28:	401a      	ands	r2, r3
 8009d2a:	6a39      	ldr	r1, [r7, #32]
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d32:	431a      	orrs	r2, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8096 	beq.w	8009e72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009d46:	4b59      	ldr	r3, [pc, #356]	; (8009eac <HAL_GPIO_Init+0x298>)
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	4a58      	ldr	r2, [pc, #352]	; (8009eac <HAL_GPIO_Init+0x298>)
 8009d4c:	f043 0301 	orr.w	r3, r3, #1
 8009d50:	6193      	str	r3, [r2, #24]
 8009d52:	4b56      	ldr	r3, [pc, #344]	; (8009eac <HAL_GPIO_Init+0x298>)
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	60bb      	str	r3, [r7, #8]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009d5e:	4a54      	ldr	r2, [pc, #336]	; (8009eb0 <HAL_GPIO_Init+0x29c>)
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	089b      	lsrs	r3, r3, #2
 8009d64:	3302      	adds	r3, #2
 8009d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	220f      	movs	r2, #15
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	43db      	mvns	r3, r3
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a4b      	ldr	r2, [pc, #300]	; (8009eb4 <HAL_GPIO_Init+0x2a0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d013      	beq.n	8009db2 <HAL_GPIO_Init+0x19e>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a4a      	ldr	r2, [pc, #296]	; (8009eb8 <HAL_GPIO_Init+0x2a4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00d      	beq.n	8009dae <HAL_GPIO_Init+0x19a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a49      	ldr	r2, [pc, #292]	; (8009ebc <HAL_GPIO_Init+0x2a8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d007      	beq.n	8009daa <HAL_GPIO_Init+0x196>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a48      	ldr	r2, [pc, #288]	; (8009ec0 <HAL_GPIO_Init+0x2ac>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <HAL_GPIO_Init+0x192>
 8009da2:	2303      	movs	r3, #3
 8009da4:	e006      	b.n	8009db4 <HAL_GPIO_Init+0x1a0>
 8009da6:	2304      	movs	r3, #4
 8009da8:	e004      	b.n	8009db4 <HAL_GPIO_Init+0x1a0>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e002      	b.n	8009db4 <HAL_GPIO_Init+0x1a0>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <HAL_GPIO_Init+0x1a0>
 8009db2:	2300      	movs	r3, #0
 8009db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db6:	f002 0203 	and.w	r2, r2, #3
 8009dba:	0092      	lsls	r2, r2, #2
 8009dbc:	4093      	lsls	r3, r2
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009dc4:	493a      	ldr	r1, [pc, #232]	; (8009eb0 <HAL_GPIO_Init+0x29c>)
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	3302      	adds	r3, #2
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009dde:	4b39      	ldr	r3, [pc, #228]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4938      	ldr	r1, [pc, #224]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	600b      	str	r3, [r1, #0]
 8009dea:	e006      	b.n	8009dfa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009dec:	4b35      	ldr	r3, [pc, #212]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	43db      	mvns	r3, r3
 8009df4:	4933      	ldr	r1, [pc, #204]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d006      	beq.n	8009e14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	492e      	ldr	r1, [pc, #184]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	604b      	str	r3, [r1, #4]
 8009e12:	e006      	b.n	8009e22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009e14:	4b2b      	ldr	r3, [pc, #172]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	43db      	mvns	r3, r3
 8009e1c:	4929      	ldr	r1, [pc, #164]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e1e:	4013      	ands	r3, r2
 8009e20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d006      	beq.n	8009e3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009e2e:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	4924      	ldr	r1, [pc, #144]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	608b      	str	r3, [r1, #8]
 8009e3a:	e006      	b.n	8009e4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009e3c:	4b21      	ldr	r3, [pc, #132]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	43db      	mvns	r3, r3
 8009e44:	491f      	ldr	r1, [pc, #124]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d006      	beq.n	8009e64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009e56:	4b1b      	ldr	r3, [pc, #108]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	491a      	ldr	r1, [pc, #104]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60cb      	str	r3, [r1, #12]
 8009e62:	e006      	b.n	8009e72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009e64:	4b17      	ldr	r3, [pc, #92]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	43db      	mvns	r3, r3
 8009e6c:	4915      	ldr	r1, [pc, #84]	; (8009ec4 <HAL_GPIO_Init+0x2b0>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	3301      	adds	r3, #1
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f47f aed0 	bne.w	8009c28 <HAL_GPIO_Init+0x14>
  }
}
 8009e88:	bf00      	nop
 8009e8a:	372c      	adds	r7, #44	; 0x2c
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	10210000 	.word	0x10210000
 8009e98:	10110000 	.word	0x10110000
 8009e9c:	10120000 	.word	0x10120000
 8009ea0:	10310000 	.word	0x10310000
 8009ea4:	10320000 	.word	0x10320000
 8009ea8:	10220000 	.word	0x10220000
 8009eac:	40021000 	.word	0x40021000
 8009eb0:	40010000 	.word	0x40010000
 8009eb4:	40010800 	.word	0x40010800
 8009eb8:	40010c00 	.word	0x40010c00
 8009ebc:	40011000 	.word	0x40011000
 8009ec0:	40011400 	.word	0x40011400
 8009ec4:	40010400 	.word	0x40010400

08009ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	807b      	strh	r3, [r7, #2]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ed8:	787b      	ldrb	r3, [r7, #1]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ede:	887a      	ldrh	r2, [r7, #2]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009ee4:	e003      	b.n	8009eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009ee6:	887b      	ldrh	r3, [r7, #2]
 8009ee8:	041a      	lsls	r2, r3, #16
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	611a      	str	r2, [r3, #16]
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009f0a:	887a      	ldrh	r2, [r7, #2]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	041a      	lsls	r2, r3, #16
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	43d9      	mvns	r1, r3
 8009f16:	887b      	ldrh	r3, [r7, #2]
 8009f18:	400b      	ands	r3, r1
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	611a      	str	r2, [r3, #16]
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
	...

08009f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009f36:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f38:	695a      	ldr	r2, [r3, #20]
 8009f3a:	88fb      	ldrh	r3, [r7, #6]
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009f42:	4a05      	ldr	r2, [pc, #20]	; (8009f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f44:	88fb      	ldrh	r3, [r7, #6]
 8009f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fe42 	bl	8008bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	40010400 	.word	0x40010400

08009f5c <__libc_init_array>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	2500      	movs	r5, #0
 8009f60:	4e0c      	ldr	r6, [pc, #48]	; (8009f94 <__libc_init_array+0x38>)
 8009f62:	4c0d      	ldr	r4, [pc, #52]	; (8009f98 <__libc_init_array+0x3c>)
 8009f64:	1ba4      	subs	r4, r4, r6
 8009f66:	10a4      	asrs	r4, r4, #2
 8009f68:	42a5      	cmp	r5, r4
 8009f6a:	d109      	bne.n	8009f80 <__libc_init_array+0x24>
 8009f6c:	f000 f81a 	bl	8009fa4 <_init>
 8009f70:	2500      	movs	r5, #0
 8009f72:	4e0a      	ldr	r6, [pc, #40]	; (8009f9c <__libc_init_array+0x40>)
 8009f74:	4c0a      	ldr	r4, [pc, #40]	; (8009fa0 <__libc_init_array+0x44>)
 8009f76:	1ba4      	subs	r4, r4, r6
 8009f78:	10a4      	asrs	r4, r4, #2
 8009f7a:	42a5      	cmp	r5, r4
 8009f7c:	d105      	bne.n	8009f8a <__libc_init_array+0x2e>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f84:	4798      	blx	r3
 8009f86:	3501      	adds	r5, #1
 8009f88:	e7ee      	b.n	8009f68 <__libc_init_array+0xc>
 8009f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f8e:	4798      	blx	r3
 8009f90:	3501      	adds	r5, #1
 8009f92:	e7f2      	b.n	8009f7a <__libc_init_array+0x1e>
 8009f94:	08009fec 	.word	0x08009fec
 8009f98:	08009fec 	.word	0x08009fec
 8009f9c:	08009fec 	.word	0x08009fec
 8009fa0:	08009ff0 	.word	0x08009ff0

08009fa4 <_init>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr

08009fb0 <_fini>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr
