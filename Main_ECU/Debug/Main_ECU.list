
Main_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd8  08002cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd8  08002cd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd8  08002cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002cec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002cec  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c6e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000159c  00000000  00000000  00025ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00027240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00027978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169d6  00000000  00000000  00027fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004d67  00000000  00000000  0003e99e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000817f5  00000000  00000000  00043705  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000c4f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c40 	.word	0x08002c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c40 	.word	0x08002c40

0800014c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	db0a      	blt.n	8000176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <__NVIC_SetPriority+0x4c>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	0112      	lsls	r2, r2, #4
 800016c:	b2d2      	uxtb	r2, r2
 800016e:	440b      	add	r3, r1
 8000170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000174:	e00a      	b.n	800018c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4908      	ldr	r1, [pc, #32]	; (800019c <__NVIC_SetPriority+0x50>)
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	f003 030f 	and.w	r3, r3, #15
 8000182:	3b04      	subs	r3, #4
 8000184:	0112      	lsls	r2, r2, #4
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	440b      	add	r3, r1
 800018a:	761a      	strb	r2, [r3, #24]
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000e100 	.word	0xe000e100
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3b01      	subs	r3, #1
 80001ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001b0:	d301      	bcc.n	80001b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00f      	b.n	80001d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001b6:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <SysTick_Config+0x40>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001be:	210f      	movs	r1, #15
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f7ff ffc2 	bl	800014c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SysTick_Config+0x40>)
 80001d0:	2207      	movs	r2, #7
 80001d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001d4:	2300      	movs	r3, #0
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
/* Local variables: */
	/* variable to hold the requires application ID */
	APPs_ID app_id;

	/* Flag to write on the LCD once */
	uint8_t Flag_once = 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	75fb      	strb	r3, [r7, #23]

	/* String to be displayed on the LCD */
	uint8_t * LCD_String = "BOOTLOADER";
 80001ee:	4b81      	ldr	r3, [pc, #516]	; (80003f4 <main+0x210>)
 80001f0:	613b      	str	r3, [r7, #16]

	/* data to be sent */
	uint8_t TxData = 3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	73bb      	strb	r3, [r7, #14]

	/* CAN buffer to receive dummy data */
	uint8_t CAN_RxDummyBuffer;

	/* CAN RX header parameters */
	RxHeader.DLC = 1;
 80001f6:	4b80      	ldr	r3, [pc, #512]	; (80003f8 <main+0x214>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 80001fc:	4b7e      	ldr	r3, [pc, #504]	; (80003f8 <main+0x214>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000202:	4b7d      	ldr	r3, [pc, #500]	; (80003f8 <main+0x214>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x103;
 8000208:	4b7b      	ldr	r3, [pc, #492]	; (80003f8 <main+0x214>)
 800020a:	f240 1203 	movw	r2, #259	; 0x103
 800020e:	601a      	str	r2, [r3, #0]

	/* CAN TX header parameters */
	TxHeader.DLC = 1;
 8000210:	4b7a      	ldr	r3, [pc, #488]	; (80003fc <main+0x218>)
 8000212:	2201      	movs	r2, #1
 8000214:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000216:	4b79      	ldr	r3, [pc, #484]	; (80003fc <main+0x218>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800021c:	4b77      	ldr	r3, [pc, #476]	; (80003fc <main+0x218>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x030;
 8000222:	4b76      	ldr	r3, [pc, #472]	; (80003fc <main+0x218>)
 8000224:	2230      	movs	r2, #48	; 0x30
 8000226:	601a      	str	r2, [r3, #0]

/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000228:	f001 fbbe 	bl	80019a8 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800022c:	f000 f956 	bl	80004dc <MX_GPIO_Init>
/* CAN: */
	/* initializing the CAN driver. */
	MX_CAN_Init();
 8000230:	f000 f902 	bl	8000438 <MX_CAN_Init>
	/* Start the CAN driver */
	HAL_CAN_Start(&hcan);
 8000234:	4872      	ldr	r0, [pc, #456]	; (8000400 <main+0x21c>)
 8000236:	f001 fde9 	bl	8001e0c <HAL_CAN_Start>
	/* Enable the CAN interrupt mode */
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800023a:	2102      	movs	r1, #2
 800023c:	4870      	ldr	r0, [pc, #448]	; (8000400 <main+0x21c>)
 800023e:	f002 f814 	bl	800226a <HAL_CAN_ActivateNotification>

	/* receive in the CAN RX buffer */
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, &CAN_RxDummyBuffer);
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	4a6c      	ldr	r2, [pc, #432]	; (80003f8 <main+0x214>)
 8000246:	2100      	movs	r1, #0
 8000248:	486d      	ldr	r0, [pc, #436]	; (8000400 <main+0x21c>)
 800024a:	f001 fefd 	bl	8002048 <HAL_CAN_GetRxMessage>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox);
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	f107 020e 	add.w	r2, r7, #14
 8000256:	4969      	ldr	r1, [pc, #420]	; (80003fc <main+0x218>)
 8000258:	4869      	ldr	r0, [pc, #420]	; (8000400 <main+0x21c>)
 800025a:	f001 fe1b 	bl	8001e94 <HAL_CAN_AddTxMessage>


/* SysTick: */
	/* updates the value of the SystemCoreClock variable */
	SystemCoreClockUpdate();
 800025e:	f001 fb11 	bl	8001884 <SystemCoreClockUpdate>
	/* configuring the clock to trigger interrupt each 1 second */
	SysTick_Config(SystemCoreClock);
 8000262:	4b68      	ldr	r3, [pc, #416]	; (8000404 <main+0x220>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff9a 	bl	80001a0 <SysTick_Config>
/* Super loop */
	while (1)
	{
/* LCD: */
		/* initialize the LCD */
		CLCD_Init();
 800026c:	f000 fa56 	bl	800071c <CLCD_Init>
		/* clear the LCD */
		CLCD_ClearDisplay();
 8000270:	f000 fc0d 	bl	8000a8e <CLCD_ClearDisplay>
		/* write the string on the LCD */
		CLCD_WriteString(LCD_String);
 8000274:	6938      	ldr	r0, [r7, #16]
 8000276:	f000 fc18 	bl	8000aaa <CLCD_WriteString>

		/* assigning the timeout flag */
		Flag_timeOut = 0;
 800027a:	4b63      	ldr	r3, [pc, #396]	; (8000408 <main+0x224>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
		/* initializing the SysTick */
		USER_SysTickInit();
 8000280:	f000 f9c6 	bl	8000610 <USER_SysTickInit>

		/* while the timer isn't out yet */
		while(APP_TIMEOUT_FLAG_NOT_SET == Flag_timeOut)
 8000284:	e02d      	b.n	80002e2 <main+0xfe>
		{
			/* if the CAN flag is raised */
			if(Flag_CAN)
 8000286:	4b61      	ldr	r3, [pc, #388]	; (800040c <main+0x228>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d029      	beq.n	80002e2 <main+0xfe>
			{
				/* LCD displaying: Flashing... */
				if(Flag_once){
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d008      	beq.n	80002a6 <main+0xc2>
					/* reseting the Flag */
					Flag_once = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	75fb      	strb	r3, [r7, #23]
					/* moving the cursor to write in the second row */
					CLCD_MoveCursor(CLCD_ROW_1, CLCD_COLUMN_0);
 8000298:	2100      	movs	r1, #0
 800029a:	2001      	movs	r0, #1
 800029c:	f000 fc2e 	bl	8000afc <CLCD_MoveCursor>
					/* writing "flashing..." on the LCD */
					CLCD_WriteString("flashing...");
 80002a0:	485b      	ldr	r0, [pc, #364]	; (8000410 <main+0x22c>)
 80002a2:	f000 fc02 	bl	8000aaa <CLCD_WriteString>
				}
				/* reseting the CAN flag */
				Flag_CAN = 0;
 80002a6:	4b59      	ldr	r3, [pc, #356]	; (800040c <main+0x228>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
				/* disabling the SysTick timer */
				USER_SysTickDeinit();
 80002ac:	f000 f9c2 	bl	8000634 <USER_SysTickDeinit>

				/* check if the whole record is received or not */
				if(APP_END_OF_RECORD == CAN_RxBuffer[CAN_i-1])
 80002b0:	4b58      	ldr	r3, [pc, #352]	; (8000414 <main+0x230>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	4a58      	ldr	r2, [pc, #352]	; (8000418 <main+0x234>)
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
 80002ba:	2b0a      	cmp	r3, #10
 80002bc:	d107      	bne.n	80002ce <main+0xea>
				{
					/* reseting the CAN iterator */
					CAN_i = 0;
 80002be:	4b55      	ldr	r3, [pc, #340]	; (8000414 <main+0x230>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
					/* parsing the record */
					Parser_parseRecord(CAN_RxBuffer);
 80002c4:	4854      	ldr	r0, [pc, #336]	; (8000418 <main+0x234>)
 80002c6:	f001 f8e1 	bl	800148c <Parser_parseRecord>
					/* clearing the CAN RX buffer to receive a new record */
					USER_clearRxBuffer();
 80002ca:	f000 f9d1 	bl	8000670 <USER_clearRxBuffer>
				else
				{
					/* do nothing */
				}
				/* sending an ACK to the Gateway ECU */
				HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox);
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	f107 020e 	add.w	r2, r7, #14
 80002d6:	4949      	ldr	r1, [pc, #292]	; (80003fc <main+0x218>)
 80002d8:	4849      	ldr	r0, [pc, #292]	; (8000400 <main+0x21c>)
 80002da:	f001 fddb 	bl	8001e94 <HAL_CAN_AddTxMessage>
				/* reinitializing the SysTick timer */
				USER_SysTickInit();
 80002de:	f000 f997 	bl	8000610 <USER_SysTickInit>
		while(APP_TIMEOUT_FLAG_NOT_SET == Flag_timeOut)
 80002e2:	4b49      	ldr	r3, [pc, #292]	; (8000408 <main+0x224>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0cd      	beq.n	8000286 <main+0xa2>
				/* do nothing */
			}
		}

		/* Getting the requires APP ID */
		Parser_GetAppId(&app_id);
 80002ea:	f107 030f 	add.w	r3, r7, #15
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 f950 	bl	8001594 <Parser_GetAppId>

		/* if the button is pressed */
		if(FLAG_AppSwitch)
 80002f4:	4b49      	ldr	r3, [pc, #292]	; (800041c <main+0x238>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d05e      	beq.n	80003ba <main+0x1d6>
		{
			/* checking on the current APP and the availability of the other APP */

			/* if the current APP is APP_1 and APP_2 is available then jump to APP_2 */
			if(APP_1_ID == app_id && Parser_isAppAvailable(APP_2_ID))
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d112      	bne.n	8000328 <main+0x144>
 8000302:	2002      	movs	r0, #2
 8000304:	f001 f988 	bl	8001618 <Parser_isAppAvailable>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00c      	beq.n	8000328 <main+0x144>
			{
				/* displaying on LCD: switching... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 800030e:	f000 fbbe 	bl	8000a8e <CLCD_ClearDisplay>
				/* display */
				CLCD_WriteString("switch to APP2");
 8000312:	4843      	ldr	r0, [pc, #268]	; (8000420 <main+0x23c>)
 8000314:	f000 fbc9 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 8000318:	2002      	movs	r0, #2
 800031a:	f001 fb91 	bl	8001a40 <HAL_Delay>

				/* toggle the APP ID to indicate that the current APP is APP_2 not APP_1*/
				Parser_ToggleAppId();
 800031e:	f001 f99c 	bl	800165a <Parser_ToggleAppId>
				/* Jump to APP2 */
				BOOTLOADER_gumpToAPP2();
 8000322:	f000 f95f 	bl	80005e4 <BOOTLOADER_gumpToAPP2>
 8000326:	e064      	b.n	80003f2 <main+0x20e>
			}
			/* if the current APP is APP_1 and APP_2 is not available then jump to APP_1 */
			else if(APP_1_ID == app_id)
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d115      	bne.n	800035a <main+0x176>
			{
				/* displaying on LCD: no APP available... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 800032e:	f000 fbae 	bl	8000a8e <CLCD_ClearDisplay>
				/* divide the string to fit the LCD size */
				CLCD_MoveCursor(CLCD_ROW_0, CLCD_COLUMN_3);
 8000332:	2103      	movs	r1, #3
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fbe1 	bl	8000afc <CLCD_MoveCursor>
				/* write on the first row */
				CLCD_WriteString("no APP");
 800033a:	483a      	ldr	r0, [pc, #232]	; (8000424 <main+0x240>)
 800033c:	f000 fbb5 	bl	8000aaa <CLCD_WriteString>
				/* move the cursor to the second row */
				CLCD_MoveCursor(CLCD_ROW_1, CLCD_COLUMN_1);
 8000340:	2101      	movs	r1, #1
 8000342:	2001      	movs	r0, #1
 8000344:	f000 fbda 	bl	8000afc <CLCD_MoveCursor>
				/* write on the second row */
				CLCD_WriteString("available...");
 8000348:	4837      	ldr	r0, [pc, #220]	; (8000428 <main+0x244>)
 800034a:	f000 fbae 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 800034e:	2002      	movs	r0, #2
 8000350:	f001 fb76 	bl	8001a40 <HAL_Delay>

				/* Jump to APP1 */
				BOOTLOADER_gumpToAPP1();
 8000354:	f000 f930 	bl	80005b8 <BOOTLOADER_gumpToAPP1>
 8000358:	e788      	b.n	800026c <main+0x88>
			}
			/* if the current APP is APP_2 and APP_1 is available then jump to APP_1 */
			else if(APP_2_ID == app_id && Parser_isAppAvailable(APP_1_ID))
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d112      	bne.n	8000386 <main+0x1a2>
 8000360:	2001      	movs	r0, #1
 8000362:	f001 f959 	bl	8001618 <Parser_isAppAvailable>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00c      	beq.n	8000386 <main+0x1a2>
			{
				/* displaying on LCD: switching... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 800036c:	f000 fb8f 	bl	8000a8e <CLCD_ClearDisplay>
				/* display */
				CLCD_WriteString("switch to APP1");
 8000370:	482e      	ldr	r0, [pc, #184]	; (800042c <main+0x248>)
 8000372:	f000 fb9a 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 8000376:	2002      	movs	r0, #2
 8000378:	f001 fb62 	bl	8001a40 <HAL_Delay>

				/* toggle the APP ID to indicate that the current APP is APP_1 not APP_2 */
				Parser_ToggleAppId();
 800037c:	f001 f96d 	bl	800165a <Parser_ToggleAppId>
				/* Jump to APP1 */
				BOOTLOADER_gumpToAPP1();
 8000380:	f000 f91a 	bl	80005b8 <BOOTLOADER_gumpToAPP1>
 8000384:	e035      	b.n	80003f2 <main+0x20e>
			}
			/* if the current APP is APP_2 and APP_1 is not available then jump to APP_2 */
			else if(APP_2_ID == app_id)
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	2b02      	cmp	r3, #2
 800038a:	f47f af6f 	bne.w	800026c <main+0x88>
			{
				/* displaying on LCD: no APP available... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 800038e:	f000 fb7e 	bl	8000a8e <CLCD_ClearDisplay>
				/* divide the string to fit the LCD size */
				CLCD_MoveCursor(CLCD_ROW_0, CLCD_COLUMN_3);
 8000392:	2103      	movs	r1, #3
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fbb1 	bl	8000afc <CLCD_MoveCursor>
				/* write on the first row */
				CLCD_WriteString("no APP");
 800039a:	4822      	ldr	r0, [pc, #136]	; (8000424 <main+0x240>)
 800039c:	f000 fb85 	bl	8000aaa <CLCD_WriteString>
				/* move the cursor to the second row */
				CLCD_MoveCursor(CLCD_ROW_1, CLCD_COLUMN_1);
 80003a0:	2101      	movs	r1, #1
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 fbaa 	bl	8000afc <CLCD_MoveCursor>
				/* write on the second row */
				CLCD_WriteString("available...");
 80003a8:	481f      	ldr	r0, [pc, #124]	; (8000428 <main+0x244>)
 80003aa:	f000 fb7e 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 80003ae:	2002      	movs	r0, #2
 80003b0:	f001 fb46 	bl	8001a40 <HAL_Delay>

				/* Jump to APP2 */
				BOOTLOADER_gumpToAPP2();
 80003b4:	f000 f916 	bl	80005e4 <BOOTLOADER_gumpToAPP2>
 80003b8:	e758      	b.n	800026c <main+0x88>
		}
		/* if the button isn't pressed */
		else{

			/* if the current APP is APP1 */
			if(APP_1_ID == app_id)
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d10a      	bne.n	80003d6 <main+0x1f2>
			{
				/* displaying on LCD: jumping... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 80003c0:	f000 fb65 	bl	8000a8e <CLCD_ClearDisplay>
				/* display */
				CLCD_WriteString("jumping to APP1");
 80003c4:	481a      	ldr	r0, [pc, #104]	; (8000430 <main+0x24c>)
 80003c6:	f000 fb70 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 80003ca:	2002      	movs	r0, #2
 80003cc:	f001 fb38 	bl	8001a40 <HAL_Delay>

				/* jump to APP_1 */
				BOOTLOADER_gumpToAPP1();
 80003d0:	f000 f8f2 	bl	80005b8 <BOOTLOADER_gumpToAPP1>
 80003d4:	e74a      	b.n	800026c <main+0x88>
			}
			/* if the current APP is APP2 */
			else if(APP_2_ID == app_id)
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	f47f af47 	bne.w	800026c <main+0x88>
			{
				/* displaying on LCD: jumping... */
				/* Clearing the LCD */
				CLCD_ClearDisplay();
 80003de:	f000 fb56 	bl	8000a8e <CLCD_ClearDisplay>
				/* display */
				CLCD_WriteString("jumping to APP2");
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <main+0x250>)
 80003e4:	f000 fb61 	bl	8000aaa <CLCD_WriteString>

				HAL_Delay(2);
 80003e8:	2002      	movs	r0, #2
 80003ea:	f001 fb29 	bl	8001a40 <HAL_Delay>

				/* jump to APP_2 */
				BOOTLOADER_gumpToAPP2();
 80003ee:	f000 f8f9 	bl	80005e4 <BOOTLOADER_gumpToAPP2>
		CLCD_Init();
 80003f2:	e73b      	b.n	800026c <main+0x88>
 80003f4:	08002c58 	.word	0x08002c58
 80003f8:	200000dc 	.word	0x200000dc
 80003fc:	200000c4 	.word	0x200000c4
 8000400:	2000009c 	.word	0x2000009c
 8000404:	20000004 	.word	0x20000004
 8000408:	2000008d 	.word	0x2000008d
 800040c:	2000008e 	.word	0x2000008e
 8000410:	08002c64 	.word	0x08002c64
 8000414:	2000008c 	.word	0x2000008c
 8000418:	20000028 	.word	0x20000028
 800041c:	2000008f 	.word	0x2000008f
 8000420:	08002c70 	.word	0x08002c70
 8000424:	08002c80 	.word	0x08002c80
 8000428:	08002c88 	.word	0x08002c88
 800042c:	08002c98 	.word	0x08002c98
 8000430:	08002ca8 	.word	0x08002ca8
 8000434:	08002cb8 	.word	0x08002cb8

08000438 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08a      	sub	sp, #40	; 0x28
 800043c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000440:	4a25      	ldr	r2, [pc, #148]	; (80004d8 <MX_CAN_Init+0xa0>)
 8000442:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000444:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000446:	2210      	movs	r2, #16
 8000448:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_CAN_Init+0x9c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000450:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800045c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000466:	2200      	movs	r2, #0
 8000468:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_CAN_Init+0x9c>)
 800046c:	2200      	movs	r2, #0
 800046e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000472:	2200      	movs	r2, #0
 8000474:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000478:	2200      	movs	r2, #0
 800047a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_CAN_Init+0x9c>)
 800047e:	2200      	movs	r2, #0
 8000480:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_CAN_Init+0x9c>)
 8000484:	2200      	movs	r2, #0
 8000486:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000488:	4812      	ldr	r0, [pc, #72]	; (80004d4 <MX_CAN_Init+0x9c>)
 800048a:	f001 fafb 	bl	8001a84 <HAL_CAN_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8000494:	f000 f93e 	bl	8000714 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;


	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000498:	2301      	movs	r3, #1
 800049a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 800049c:	230a      	movs	r3, #10
 800049e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 80004a4:	2300      	movs	r3, #0
 80004a6:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assigned to CAN1
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <MX_CAN_Init+0x9c>)
 80004c6:	f001 fbd8 	bl	8001c7a <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	3728      	adds	r7, #40	; 0x28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	40006400 	.word	0x40006400

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xcc>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xcc>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f240 3106 	movw	r1, #774	; 0x306
 8000526:	4821      	ldr	r0, [pc, #132]	; (80005ac <MX_GPIO_Init+0xd0>)
 8000528:	f002 fb1c 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000532:	481f      	ldr	r0, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xd4>)
 8000534:	f002 fb16 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 8000538:	f240 3306 	movw	r3, #774	; 0x306
 800053c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	4619      	mov	r1, r3
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_GPIO_Init+0xd0>)
 8000552:	f002 f9ad 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800055a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_GPIO_Init+0xd8>)
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	4619      	mov	r1, r3
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <MX_GPIO_Init+0xd4>)
 800056c:	f002 f9a0 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000570:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4619      	mov	r1, r3
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_GPIO_Init+0xd4>)
 800058a:	f002 f991 	bl	80028b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2028      	movs	r0, #40	; 0x28
 8000594:	f002 f961 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000598:	2028      	movs	r0, #40	; 0x28
 800059a:	f002 f97a 	bl	8002892 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	10210000 	.word	0x10210000

080005b8 <BOOTLOADER_gumpToAPP1>:
 *
 * return: void
 *
 * description: function to jump to application number 1
 *************************************************************/
void BOOTLOADER_gumpToAPP1(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	/* shift the vector table to that of APP_1 */
	SCB_ShiftInterruptVectorTable(APP_1_VECTOR_TABLE_ADDRESS);
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <BOOTLOADER_gumpToAPP1+0x20>)
 80005be:	f000 fe01 	bl	80011c4 <SCB_ShiftInterruptVectorTable>
	/* assign the address to call variable to the address of APP_1 */
	addr_to_call = *(fun_ptr*)(APP_1_RESET_HANDLER_ADDRESS);
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <BOOTLOADER_gumpToAPP1+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <BOOTLOADER_gumpToAPP1+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
	/* deinitializing the HAL */
	HAL_DeInit();
 80005ca:	f001 f9ff 	bl	80019cc <HAL_DeInit>
	/* jump to APP_1 by calling this pointer */
	addr_to_call();
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <BOOTLOADER_gumpToAPP1+0x28>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4798      	blx	r3
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08008000 	.word	0x08008000
 80005dc:	08008004 	.word	0x08008004
 80005e0:	20000090 	.word	0x20000090

080005e4 <BOOTLOADER_gumpToAPP2>:
 *
 * return: void
 *
 * description: function to jump to application number 2
 ***************************************************************/
void BOOTLOADER_gumpToAPP2(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	/* shift the vector table to that of APP_2 */
	SCB_ShiftInterruptVectorTable(APP_2_VECTOR_TABLE_ADDRESS);
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <BOOTLOADER_gumpToAPP2+0x20>)
 80005ea:	f000 fdeb 	bl	80011c4 <SCB_ShiftInterruptVectorTable>
	/* assign the address to call variable to the address of APP_2 */
	addr_to_call = *(fun_ptr*)(APP_2_RESET_HANDLER_ADDRESS);
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <BOOTLOADER_gumpToAPP2+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <BOOTLOADER_gumpToAPP2+0x28>)
 80005f4:	6013      	str	r3, [r2, #0]
	/* deinitializing the HAL */
	HAL_DeInit();
 80005f6:	f001 f9e9 	bl	80019cc <HAL_DeInit>
	/* jump to APP_2 by calling this pointer */
	addr_to_call();
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <BOOTLOADER_gumpToAPP2+0x28>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4798      	blx	r3
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08010000 	.word	0x08010000
 8000608:	08010004 	.word	0x08010004
 800060c:	20000090 	.word	0x20000090

08000610 <USER_SysTickInit>:
 *
 * return: void
 *
 * description: initializing the SysTick timer
 ***************************************************************/
void USER_SysTickInit(void){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <USER_SysTickInit+0x20>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <USER_SysTickInit+0x20>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk|
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <USER_SysTickInit+0x20>)
 8000622:	2207      	movs	r2, #7
 8000624:	601a      	str	r2, [r3, #0]
			SysTick_CTRL_ENABLE_Msk|
			SysTick_CTRL_CLKSOURCE_Msk);
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e010 	.word	0xe000e010

08000634 <USER_SysTickDeinit>:
 *
 * return: void
 *
 * description: deinitializing the SysTick timer
 ***************************************************************/
void USER_SysTickDeinit(void){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <USER_SysTickDeinit+0x18>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <USER_SysTickDeinit+0x18>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	e000e010 	.word	0xe000e010

08000650 <USER_SysTickCallBack>:
 *
 * return: void
 *
 * description: function to be called when the time is out
 ***************************************************************/
void USER_SysTickCallBack(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	/* toggle a LED to indicate that the time is up */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <USER_SysTickCallBack+0x18>)
 8000658:	f002 fa9c 	bl	8002b94 <HAL_GPIO_TogglePin>
	/* setting the time out flag */
	Flag_timeOut = 1;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <USER_SysTickCallBack+0x1c>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010800 	.word	0x40010800
 800066c:	2000008d 	.word	0x2000008d

08000670 <USER_clearRxBuffer>:
 *
 * return: void
 *
 * description: function to clear the CAN RX buffer
 ***************************************************************/
void USER_clearRxBuffer(void){
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
	/* looping over the CAN RX buffer */
	for(uint8_t clear_i = 0; clear_i<APP_BUFFER_MAX_ELEMENTS ; clear_i++){
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e006      	b.n	800068a <USER_clearRxBuffer+0x1a>
		/* clearing the buffer */
		CAN_RxBuffer[(uint32_t)clear_i] = 0;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <USER_clearRxBuffer+0x2c>)
 8000680:	2100      	movs	r1, #0
 8000682:	54d1      	strb	r1, [r2, r3]
	for(uint8_t clear_i = 0; clear_i<APP_BUFFER_MAX_ELEMENTS ; clear_i++){
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b63      	cmp	r3, #99	; 0x63
 800068e:	d9f5      	bls.n	800067c <USER_clearRxBuffer+0xc>
	}
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028

080006a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * return: void
 *
 * description: CAN callback function
 ***************************************************************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	/* raise the CAN flag */
	Flag_CAN = 1;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
	/* toggle a led that indicates a reception*/
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006ae:	2102      	movs	r1, #2
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80006b2:	f002 fa6f 	bl	8002b94 <HAL_GPIO_TogglePin>
	/* receive in the CAN RX buffer */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &CAN_RxBuffer[CAN_i]);
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80006be:	4413      	add	r3, r2
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f001 fcbf 	bl	8002048 <HAL_CAN_GetRxMessage>
	/* incrementing the iterator of the CAN */
	CAN_i++;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006d4:	701a      	strb	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000008e 	.word	0x2000008e
 80006e4:	40010800 	.word	0x40010800
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	20000028 	.word	0x20000028
 80006f0:	200000dc 	.word	0x200000dc

080006f4 <HAL_GPIO_EXTI_Callback>:
 *
 * return: void
 *
 * description: External callback function
 ***************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pins){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	/* raise the switch flag */
	FLAG_AppSwitch = 1;
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2000008f 	.word	0x2000008f

08000714 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800071a:	e7fe      	b.n	800071a <Error_Handler+0x6>

0800071c <CLCD_Init>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Initialize Character LCD								          */
/*--------------------------------------------------------------------------------*/
void CLCD_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	/* Set the direction of control pins */
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_E_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8000720:	2202      	movs	r2, #2
 8000722:	2108      	movs	r1, #8
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fbc5 	bl	8000eb4 <GPIO_SetPinMode>
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_RS_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 800072a:	2202      	movs	r2, #2
 800072c:	2109      	movs	r1, #9
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fbc0 	bl	8000eb4 <GPIO_SetPinMode>

	/* Check Selected CLCD Mode */
	#if CLCD_MODE == FOUR_BIT_MODE

		/* Set the direction of data pins */
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D4_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8000734:	2202      	movs	r2, #2
 8000736:	210f      	movs	r1, #15
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fbbb 	bl	8000eb4 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D5_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 800073e:	2202      	movs	r2, #2
 8000740:	210e      	movs	r1, #14
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fbb6 	bl	8000eb4 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D6_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8000748:	2202      	movs	r2, #2
 800074a:	210d      	movs	r1, #13
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fbb1 	bl	8000eb4 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D7_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8000752:	2202      	movs	r2, #2
 8000754:	210c      	movs	r1, #12
 8000756:	2001      	movs	r0, #1
 8000758:	f000 fbac 	bl	8000eb4 <GPIO_SetPinMode>

		/* Delay for 40 ms */
		SERV_Delay_ms(40);
 800075c:	2028      	movs	r0, #40	; 0x28
 800075e:	f000 fd4f 	bl	8001200 <SERV_Delay_ms>

		/* Set up CLCD on the 4-bit mode */
		CLCD_SetFourBitMode();
 8000762:	f000 f97f 	bl	8000a64 <CLCD_SetFourBitMode>
		#error "Wrong CLCD Mode Configuration"

	#endif

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fd4a 	bl	8001200 <SERV_Delay_ms>

	/* Display on CLCD and turn off cursor */
	CLCD_DisplayOnCursorOff();
 800076c:	f000 f981 	bl	8000a72 <CLCD_DisplayOnCursorOff>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fd45 	bl	8001200 <SERV_Delay_ms>

	/* Clear CLCD */
	CLCD_ClearDisplay();
 8000776:	f000 f98a 	bl	8000a8e <CLCD_ClearDisplay>

	/* Delay for 3 ms */
	SERV_Delay_ms(3);
 800077a:	2003      	movs	r0, #3
 800077c:	f000 fd40 	bl	8001200 <SERV_Delay_ms>

	/* Setting up CLCD on entry mode */
	CLCD_SetEntryMode();
 8000780:	f000 f98c 	bl	8000a9c <CLCD_SetEntryMode>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 fd3b 	bl	8001200 <SERV_Delay_ms>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}

0800078e <CLCD_SendCommand>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Send a command to Character LCD controller	                  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_SendCommand(uint8_t Copy_Command)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8000798:	2300      	movs	r3, #0
 800079a:	75fb      	strb	r3, [r7, #23]
	uint8_t Local_Bit0 , Local_Bit1 , Local_Bit2 , Local_Bit3 , Local_Bit4 , Local_Bit5 , Local_Bit6 , Local_Bit7;

	/* Check if passed command is valid or not */
	if(Copy_Command == CLCD_FUNCTION_SET_EIGHT_BIT_MODE_CMD || Copy_Command == CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD  ||
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b38      	cmp	r3, #56	; 0x38
 80007a0:	d02a      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b28      	cmp	r3, #40	; 0x28
 80007a6:	d027      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b0c      	cmp	r3, #12
 80007ac:	d024      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_OFF_CMD   	|| Copy_Command == CLCD_DISPLAY_OFF_CURSOR_OFF_CMD    	||
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d021      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0e      	cmp	r3, #14
 80007b8:	d01e      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_ON_CMD   	    || Copy_Command == CLCD_DISPLAY_OFF_CURSOR_ON_CMD    	||
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d01b      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d018      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_BLINK_CURSOR_CMD				|| Copy_Command == CLCD_SHIFT_LEFT_CURSOR_CMD			||
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b10      	cmp	r3, #16
 80007ca:	d015      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b14      	cmp	r3, #20
 80007d0:	d012      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_SHIFT_RIGHT_CURSOR_CMD			|| Copy_Command == CLCD_SHIFT_LEFT_DISPLAY_CMD			||
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b18      	cmp	r3, #24
 80007d6:	d00f      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b1c      	cmp	r3, #28
 80007dc:	d00c      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_SHIFT_RIGHT_DISPLAY_CMD		    || Copy_Command == CLCD_BEGIN_AT_FIRST_LINE_CMD		    ||
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b80      	cmp	r3, #128	; 0x80
 80007e2:	d009      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2bc0      	cmp	r3, #192	; 0xc0
 80007e8:	d006      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_BEGIN_AT_SECOND_LINE_CMD		|| Copy_Command == CLCD_DISPLAY_CLEAR_CMD 				||
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <CLCD_SendCommand+0x6a>
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	f040 8092 	bne.w	800091c <CLCD_SendCommand+0x18e>
       Copy_Command == CLCD_ENTRY_MODE_CMD)
	{
		/* Set RS to LOW to tell CLCD to receive a command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_LOW);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2109      	movs	r1, #9
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fc47 	bl	8001090 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fcfc 	bl	8001200 <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fc3f 	bl	8001090 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fcf4 	bl	8001200 <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get command most significant bits */
			Local_Bit7 = READ_BIT(Copy_Command,7);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	09db      	lsrs	r3, r3, #7
 800081c:	75bb      	strb	r3, [r7, #22]
			Local_Bit6 = READ_BIT(Copy_Command,6);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	757b      	strb	r3, [r7, #21]
			Local_Bit5 = READ_BIT(Copy_Command,5);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	095b      	lsrs	r3, r3, #5
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	753b      	strb	r3, [r7, #20]
			Local_Bit4 = READ_BIT(Copy_Command,4);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	74fb      	strb	r3, [r7, #19]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8000842:	2201      	movs	r2, #1
 8000844:	2108      	movs	r1, #8
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fc22 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fcd7 	bl	8001200 <SERV_Delay_ms>

			/* Set command most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8000852:	7dbb      	ldrb	r3, [r7, #22]
 8000854:	461a      	mov	r2, r3
 8000856:	210c      	movs	r1, #12
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fc19 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	461a      	mov	r2, r3
 8000862:	210d      	movs	r1, #13
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fc13 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 800086a:	7d3b      	ldrb	r3, [r7, #20]
 800086c:	461a      	mov	r2, r3
 800086e:	210e      	movs	r1, #14
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fc0d 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 8000876:	7cfb      	ldrb	r3, [r7, #19]
 8000878:	461a      	mov	r2, r3
 800087a:	210f      	movs	r1, #15
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fc07 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fcbc 	bl	8001200 <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8000888:	2200      	movs	r2, #0
 800088a:	2108      	movs	r1, #8
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fbff 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fcb4 	bl	8001200 <SERV_Delay_ms>

			/* Get command least significant bits */
			Local_Bit3 = READ_BIT(Copy_Command,3);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	74bb      	strb	r3, [r7, #18]
			Local_Bit2 = READ_BIT(Copy_Command,2);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	747b      	strb	r3, [r7, #17]
			Local_Bit1 = READ_BIT(Copy_Command,1);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	743b      	strb	r3, [r7, #16]
			Local_Bit0 = READ_BIT(Copy_Command,0);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2108      	movs	r1, #8
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fbe1 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc96 	bl	8001200 <SERV_Delay_ms>

			/* Set command least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit3);
 80008d4:	7cbb      	ldrb	r3, [r7, #18]
 80008d6:	461a      	mov	r2, r3
 80008d8:	210c      	movs	r1, #12
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fbd8 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit2);
 80008e0:	7c7b      	ldrb	r3, [r7, #17]
 80008e2:	461a      	mov	r2, r3
 80008e4:	210d      	movs	r1, #13
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fbd2 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit1);
 80008ec:	7c3b      	ldrb	r3, [r7, #16]
 80008ee:	461a      	mov	r2, r3
 80008f0:	210e      	movs	r1, #14
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fbcc 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit0);
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	461a      	mov	r2, r3
 80008fc:	210f      	movs	r1, #15
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fbc6 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f000 fc7b 	bl	8001200 <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	2000      	movs	r0, #0
 8000910:	f000 fbbe 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8000914:	2002      	movs	r0, #2
 8000916:	f000 fc73 	bl	8001200 <SERV_Delay_ms>
 800091a:	e001      	b.n	8000920 <CLCD_SendCommand+0x192>

	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 800091c:	2301      	movs	r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
	}

	return Local_Status;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <CLCD_WriteCharacter>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a character on Character CLCD		                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteCharacter(uint8_t Copy_Character)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

	/* Check if passed command is valid or not */
	if(Copy_Character >= 0 && Copy_Character <= 255)
	{
		/* Set RS to HIGH to tell CLCD to receive character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_HIGH);
 8000938:	2201      	movs	r2, #1
 800093a:	2109      	movs	r1, #9
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fba7 	bl	8001090 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fc5c 	bl	8001200 <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8000948:	2200      	movs	r2, #0
 800094a:	2108      	movs	r1, #8
 800094c:	2000      	movs	r0, #0
 800094e:	f000 fb9f 	bl	8001090 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 fc54 	bl	8001200 <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get character most significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,7);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	09db      	lsrs	r3, r3, #7
 800095c:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,6);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,5);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	095b      	lsrs	r3, r3, #5
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,4);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8000982:	2201      	movs	r2, #1
 8000984:	2108      	movs	r1, #8
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fb82 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fc37 	bl	8001200 <SERV_Delay_ms>

			/* Set character most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	461a      	mov	r2, r3
 8000996:	210c      	movs	r1, #12
 8000998:	2001      	movs	r0, #1
 800099a:	f000 fb79 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 800099e:	7b7b      	ldrb	r3, [r7, #13]
 80009a0:	461a      	mov	r2, r3
 80009a2:	210d      	movs	r1, #13
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 fb73 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 80009aa:	7b3b      	ldrb	r3, [r7, #12]
 80009ac:	461a      	mov	r2, r3
 80009ae:	210e      	movs	r1, #14
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 fb6d 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 80009b6:	7afb      	ldrb	r3, [r7, #11]
 80009b8:	461a      	mov	r2, r3
 80009ba:	210f      	movs	r1, #15
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 fb67 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fc1c 	bl	8001200 <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2108      	movs	r1, #8
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 fb5f 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fc14 	bl	8001200 <SERV_Delay_ms>

			/* Get character least significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,3);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,2);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,1);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,0);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fb41 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 fbf6 	bl	8001200 <SERV_Delay_ms>

			/* Set character least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	461a      	mov	r2, r3
 8000a18:	210c      	movs	r1, #12
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fb38 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 8000a20:	7b7b      	ldrb	r3, [r7, #13]
 8000a22:	461a      	mov	r2, r3
 8000a24:	210d      	movs	r1, #13
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fb32 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 8000a2c:	7b3b      	ldrb	r3, [r7, #12]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	210e      	movs	r1, #14
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fb2c 	bl	8001090 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fb26 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fbdb 	bl	8001200 <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fb1e 	bl	8001090 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f000 fbd3 	bl	8001200 <SERV_Delay_ms>
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
	}

	return Local_Status;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <CLCD_SetFourBitMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up Character LCD on 4-bit mode							  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetFourBitMode(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD);
 8000a68:	2028      	movs	r0, #40	; 0x28
 8000a6a:	f7ff fe90 	bl	800078e <CLCD_SendCommand>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <CLCD_DisplayOnCursorOff>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Turn on display and turn off cursor							  */
/*--------------------------------------------------------------------------------*/
void CLCD_DisplayOnCursorOff(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF_CMD);
 8000a76:	200c      	movs	r0, #12
 8000a78:	f7ff fe89 	bl	800078e <CLCD_SendCommand>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <CLCD_BeginAtSecondLine>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Force cursor to be at the beginning of the second line		  */
/*--------------------------------------------------------------------------------*/
void CLCD_BeginAtSecondLine(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_BEGIN_AT_SECOND_LINE_CMD);
 8000a84:	20c0      	movs	r0, #192	; 0xc0
 8000a86:	f7ff fe82 	bl	800078e <CLCD_SendCommand>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <CLCD_ClearDisplay>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Clear the entire display of character LCD		 			  */
/*--------------------------------------------------------------------------------*/
void CLCD_ClearDisplay(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_DISPLAY_CLEAR_CMD);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fe7b 	bl	800078e <CLCD_SendCommand>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <CLCD_SetEntryMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up character LCD to operate on the entry mode		 	  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetEntryMode(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_ENTRY_MODE_CMD);
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f7ff fe74 	bl	800078e <CLCD_SendCommand>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <CLCD_WriteString>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a string on the Character LCD display      		 	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteString(uint8_t* Copy_pString)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
	uint32_t Local_CharacterCounter = 0 ;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pString != NULL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d016      	beq.n	8000aee <CLCD_WriteString+0x44>
	{
		/* Write the passed string on the CLCD display */
		while(Copy_pString[Local_CharacterCounter] != '\0')
 8000ac0:	e00e      	b.n	8000ae0 <CLCD_WriteString+0x36>
		{
			/* Write a character */
			CLCD_WriteCharacter(Copy_pString[Local_CharacterCounter]);
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff2d 	bl	800092a <CLCD_WriteCharacter>

			/* Increment the character counter */
			Local_CharacterCounter++;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]

			/* Check if the character counter reached 16 or not */
			if(Local_CharacterCounter == 20)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b14      	cmp	r3, #20
 8000ada:	d101      	bne.n	8000ae0 <CLCD_WriteString+0x36>
			{
				/* Force CLCD cursor to begin at second line */
				CLCD_BeginAtSecondLine();
 8000adc:	f7ff ffd0 	bl	8000a80 <CLCD_BeginAtSecondLine>
		while(Copy_pString[Local_CharacterCounter] != '\0')
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1ea      	bne.n	8000ac2 <CLCD_WriteString+0x18>
 8000aec:	e001      	b.n	8000af2 <CLCD_WriteString+0x48>
		}
	}
	else
	{
		/* Passed pointer is NULL pointer */
		Local_Status = NULL_POINTER;
 8000aee:	2302      	movs	r3, #2
 8000af0:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <CLCD_MoveCursor>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : Put the cursor at a specific location (segment) on the         */
/*                 character LCD display					                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_MoveCursor(uint8_t Copy_RowNumber , uint8_t Copy_ColumnNumber)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed column number is within valid range or not */
	if((Copy_ColumnNumber >= 0) && (Copy_ColumnNumber <= 19))
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b13      	cmp	r3, #19
 8000b14:	d816      	bhi.n	8000b44 <CLCD_MoveCursor+0x48>
	{
		switch(Copy_RowNumber)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <CLCD_MoveCursor+0x26>
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d007      	beq.n	8000b30 <CLCD_MoveCursor+0x34>
 8000b20:	e00d      	b.n	8000b3e <CLCD_MoveCursor+0x42>
		{
			case 0:

				/* Move the cursor to desired cell number on row 0 */
				CLCD_SendCommand(Copy_ColumnNumber+0x80);
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	3b80      	subs	r3, #128	; 0x80
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe30 	bl	800078e <CLCD_SendCommand>
				break;
 8000b2e:	e00b      	b.n	8000b48 <CLCD_MoveCursor+0x4c>

			case 1:

				/* Move the cursor to desired cell number on row 1 */
				CLCD_SendCommand(Copy_ColumnNumber+0xC0);
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3b40      	subs	r3, #64	; 0x40
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe29 	bl	800078e <CLCD_SendCommand>
				break;
 8000b3c:	e004      	b.n	8000b48 <CLCD_MoveCursor+0x4c>

			default:

				/* Function is not behaving as expected */
				Local_Status = RT_NOK;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e001      	b.n	8000b48 <CLCD_MoveCursor+0x4c>
		}
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status ;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <FPEC_FlashPageErase>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function erases a full page on flash memory based on its  */
/* 				   passed number									        	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t FPEC_FlashPageErase(uint8_t Copy_PageNumber)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;				/* Variable to hold status of the function */
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]

	/* Check if passed page number is within its valid range */
	if(Copy_PageNumber >= FPEC_PAGE_0 && Copy_PageNumber <= FPEC_PAGE_127)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db39      	blt.n	8000bde <FPEC_FlashPageErase+0x8a>
	{
		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000b6a:	bf00      	nop
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d0f9      	beq.n	8000b6c <FPEC_FlashPageErase+0x18>

		/* Check if FPEC is locked or not */
		if (READ_BIT(FPEC->CR,CR_LOCK) == 1)
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	09db      	lsrs	r3, r3, #7
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d105      	bne.n	8000b92 <FPEC_FlashPageErase+0x3e>
		{
			/* Unlock FPEC */
			FPEC -> KEYR = FPEC_UNLOCK_KEY1;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <FPEC_FlashPageErase+0xa0>)
 8000b8a:	605a      	str	r2, [r3, #4]
			FPEC -> KEYR = FPEC_UNLOCK_KEY2;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <FPEC_FlashPageErase+0xa4>)
 8000b90:	605a      	str	r2, [r3, #4]
		}

		/* Page Erase Operation */
		SET_BIT(FPEC->CR,CR_PER);
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6113      	str	r3, [r2, #16]

		/* Write page address to be erased */
		FPEC->AR = (uint32_t)(Copy_PageNumber * 1024) + FPEC_FLASH_FIRST_ADDRESS ;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	029b      	lsls	r3, r3, #10
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000ba4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ba8:	6153      	str	r3, [r2, #20]

		/* Start operation */
		SET_BIT(FPEC->CR,CR_STRT);
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6113      	str	r3, [r2, #16]

		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000bb6:	bf00      	nop
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d0f9      	beq.n	8000bb8 <FPEC_FlashPageErase+0x64>

		/* End of Page Erasing Operation */
		SET_BIT(FPEC->SR,SR_EOP);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	60d3      	str	r3, [r2, #12]
		CLEAR_BIT(FPEC->CR,CR_PER);
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <FPEC_FlashPageErase+0x9c>)
 8000bd6:	f023 0302 	bic.w	r3, r3, #2
 8000bda:	6113      	str	r3, [r2, #16]
 8000bdc:	e001      	b.n	8000be2 <FPEC_FlashPageErase+0x8e>
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000
 8000bf4:	45670123 	.word	0x45670123
 8000bf8:	cdef89ab 	.word	0xcdef89ab

08000bfc <FPEC_EraseBankArea>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function erases a full bank on flash memory based on	  */
/* 				   passed start page number	and bank size				       	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t FPEC_EraseBankArea(uint8_t Copy_PageNumber , uint32_t Copy_BankSize)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;				/* Variable to hold status of the function */
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_PageCounter;							/* Variable to hold counts of flash pages */

	/* Check if passed page number and bank size are within their valid ranges */
	if((Copy_PageNumber >= FPEC_PAGE_0 && Copy_PageNumber <= FPEC_PAGE_127) &&
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db11      	blt.n	8000c38 <FPEC_EraseBankArea+0x3c>
	   (Copy_BankSize >= 0 && Copy_BankSize <= 4294967295))
	{
		/* Traverse over each page in the bank then erase it until you reach the bank end */
		for (Local_PageCounter = 0 ; Local_PageCounter < Copy_BankSize ; Local_PageCounter++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	73bb      	strb	r3, [r7, #14]
 8000c18:	e009      	b.n	8000c2e <FPEC_EraseBankArea+0x32>
		{
			/* Erase a page in flash memory */
			FPEC_FlashPageErase((uint8_t)(Local_PageCounter + Copy_PageNumber));
 8000c1a:	7bba      	ldrb	r2, [r7, #14]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff96 	bl	8000b54 <FPEC_FlashPageErase>
		for (Local_PageCounter = 0 ; Local_PageCounter < Copy_BankSize ; Local_PageCounter++)
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	73bb      	strb	r3, [r7, #14]
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d8f1      	bhi.n	8000c1a <FPEC_EraseBankArea+0x1e>
 8000c36:	e001      	b.n	8000c3c <FPEC_EraseBankArea+0x40>
		}
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <FPEC_FlashWriteHexRecord>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function writes a hex record on flash based on its		  */
/*				   passed address, data and length in halfwords					  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t FPEC_FlashWriteHexRecord(uint32_t Copy_Address, uint16_t* Copy_pData, uint8_t Copy_Length)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;				/* Variable to hold status of the function */
 8000c56:	2300      	movs	r3, #0
 8000c58:	75fb      	strb	r3, [r7, #23]
	uint8_t Local_HalfWordCounter;						/* Variable to hold counts of halfwords in data hex record */

	/* Check if passed pointer (array) is NULL pointer or not */
	if(Copy_pData != NULL)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d04c      	beq.n	8000cfa <FPEC_FlashWriteHexRecord+0xb2>
	{
		/* Check if passed flash address and length are within their valid ranges */
		if((Copy_Address >= FPEC_FLASH_FIRST_ADDRESS && Copy_Address <= FPEC_FLASH_LAST_ADDRESS) &&
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000c66:	d345      	bcc.n	8000cf4 <FPEC_FlashWriteHexRecord+0xac>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <FPEC_FlashWriteHexRecord+0xc4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d841      	bhi.n	8000cf4 <FPEC_FlashWriteHexRecord+0xac>
		   (Copy_Length >= 0 && Copy_Length <= 255))
		{
			/* Wait for Busy Flag */
			while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000c70:	bf00      	nop
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d0f9      	beq.n	8000c72 <FPEC_FlashWriteHexRecord+0x2a>

			/* Check if FPEC is locked or not */
			if (READ_BIT(FPEC->CR,CR_LOCK) == 1)
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	09db      	lsrs	r3, r3, #7
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <FPEC_FlashWriteHexRecord+0x50>
			{
				/* Unlock FPEC */
				FPEC -> KEYR = FPEC_UNLOCK_KEY1;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <FPEC_FlashWriteHexRecord+0xcc>)
 8000c90:	605a      	str	r2, [r3, #4]
				FPEC -> KEYR = FPEC_UNLOCK_KEY2;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <FPEC_FlashWriteHexRecord+0xd0>)
 8000c96:	605a      	str	r2, [r3, #4]
			}

			for (Local_HalfWordCounter = 0; Local_HalfWordCounter < Copy_Length; Local_HalfWordCounter++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75bb      	strb	r3, [r7, #22]
 8000c9c:	e025      	b.n	8000cea <FPEC_FlashWriteHexRecord+0xa2>
			{
				/* Write Flash Programming */
				SET_BIT(FPEC->CR,CR_PG);
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6113      	str	r3, [r2, #16]

				/* Half word flash programming operation */
				*((volatile uint16_t*)Copy_Address) = Copy_pData[(uint32_t)Local_HalfWordCounter];
 8000caa:	7dbb      	ldrb	r3, [r7, #22]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	801a      	strh	r2, [r3, #0]
				Copy_Address += 2;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	60fb      	str	r3, [r7, #12]

				/* Wait for Busy Flag */
				while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000cbe:	bf00      	nop
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d0f9      	beq.n	8000cc0 <FPEC_FlashWriteHexRecord+0x78>

				/* End of Flash Programming Operation */
				SET_BIT(FPEC->SR,SR_EOP);
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	60d3      	str	r3, [r2, #12]
				CLEAR_BIT(FPEC->CR,CR_PG);
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <FPEC_FlashWriteHexRecord+0xc8>)
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	6113      	str	r3, [r2, #16]
			for (Local_HalfWordCounter = 0; Local_HalfWordCounter < Copy_Length; Local_HalfWordCounter++)
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	75bb      	strb	r3, [r7, #22]
 8000cea:	7dba      	ldrb	r2, [r7, #22]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3d5      	bcc.n	8000c9e <FPEC_FlashWriteHexRecord+0x56>
		if((Copy_Address >= FPEC_FLASH_FIRST_ADDRESS && Copy_Address <= FPEC_FLASH_LAST_ADDRESS) &&
 8000cf2:	e004      	b.n	8000cfe <FPEC_FlashWriteHexRecord+0xb6>
			}
		}
		else
		{
			/* Function is not behaving as expected */
			Local_Status = RT_NOK;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
 8000cf8:	e001      	b.n	8000cfe <FPEC_FlashWriteHexRecord+0xb6>
		}
	}
	else
	{
		/* Passed pointer is NULL pointer */
		Local_Status = NULL_POINTER;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	75fb      	strb	r3, [r7, #23]
	}

	return Local_Status;
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	0801ffff 	.word	0x0801ffff
 8000d10:	40022000 	.word	0x40022000
 8000d14:	45670123 	.word	0x45670123
 8000d18:	cdef89ab 	.word	0xcdef89ab

08000d1c <FPEC_WriteDataOptionByte>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function stores a value in selected Data option byte	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t FPEC_WriteDataOptionByte(uint8_t Copy_DataOptionByte, uint8_t Copy_Value)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	71bb      	strb	r3, [r7, #6]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;				/* Variable to hold status of the function */
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed value and Data option byte Id are within there valid ranges */
	if ((Copy_DataOptionByte == FPEC_DATA_OPTION_BYTE0 || Copy_DataOptionByte == FPEC_DATA_OPTION_BYTE1) &&
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <FPEC_WriteDataOptionByte+0x20>
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d16e      	bne.n	8000e1a <FPEC_WriteDataOptionByte+0xfe>
		(Copy_Value >= 0 && Copy_Value <= 255))
	{
		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000d3c:	bf00      	nop
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d0f9      	beq.n	8000d3e <FPEC_WriteDataOptionByte+0x22>

		/* Check if FPEC is locked or not */
		if (READ_BIT(FPEC->CR,CR_LOCK) == 1)
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	09db      	lsrs	r3, r3, #7
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d105      	bne.n	8000d64 <FPEC_WriteDataOptionByte+0x48>
		{
			/* Unlock FPEC */
			FPEC -> KEYR = FPEC_UNLOCK_KEY1;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d5a:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <FPEC_WriteDataOptionByte+0x114>)
 8000d5c:	605a      	str	r2, [r3, #4]
			FPEC -> KEYR = FPEC_UNLOCK_KEY2;
 8000d5e:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d60:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <FPEC_WriteDataOptionByte+0x118>)
 8000d62:	605a      	str	r2, [r3, #4]
		}

		/* Unlock Option Bytes Programming */
		FPEC -> OPTKEYR = FPEC_UNLOCK_KEY1;
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d66:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <FPEC_WriteDataOptionByte+0x114>)
 8000d68:	609a      	str	r2, [r3, #8]
		FPEC -> OPTKEYR = FPEC_UNLOCK_KEY2;
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d6c:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <FPEC_WriteDataOptionByte+0x118>)
 8000d6e:	609a      	str	r2, [r3, #8]

		/* Enable Option Bytes Programming */
		SET_BIT(FPEC->CR,CR_OPTWRE);
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6113      	str	r3, [r2, #16]

		/* Erase Option Bytes */
		SET_BIT(FPEC->CR,CR_OPTER);
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d82:	f043 0320 	orr.w	r3, r3, #32
 8000d86:	6113      	str	r3, [r2, #16]
		SET_BIT(FPEC->CR,CR_STRT);
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	6113      	str	r3, [r2, #16]

		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000d94:	bf00      	nop
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <FPEC_WriteDataOptionByte+0x7a>

		/* End of Option Bytes Erase Operation */
		SET_BIT(FPEC->SR,SR_EOP);
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	60d3      	str	r3, [r2, #12]
		CLEAR_BIT(FPEC->CR,CR_OPTER);
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000db4:	f023 0320 	bic.w	r3, r3, #32
 8000db8:	6113      	str	r3, [r2, #16]

		/* Program Option Bytes */
		SET_BIT(FPEC->CR,CR_OPTPG);
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6113      	str	r3, [r2, #16]

		/* Unlock read protection */
		*(volatile uint16_t*)(0x1FFFF800) = FPEC_READ_PROTECTION_UNLOCK_KEY;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <FPEC_WriteDataOptionByte+0x11c>)
 8000dc8:	22a5      	movs	r2, #165	; 0xa5
 8000dca:	801a      	strh	r2, [r3, #0]

		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000dcc:	bf00      	nop
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d0f9      	beq.n	8000dce <FPEC_WriteDataOptionByte+0xb2>

		/* Check passed option byte Id */
		if(Copy_DataOptionByte == FPEC_DATA_OPTION_BYTE0)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d104      	bne.n	8000dea <FPEC_WriteDataOptionByte+0xce>
		{
			/* Set Data Option Byte0 */
			FPEC_DATA_OPTION_BYTE0_LOCATION = (uint16_t)Copy_Value;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <FPEC_WriteDataOptionByte+0x120>)
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	b292      	uxth	r2, r2
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	e003      	b.n	8000df2 <FPEC_WriteDataOptionByte+0xd6>
		}
		else
		{
			/* Set Data Option Byte1 */
			FPEC_DATA_OPTION_BYTE1_LOCATION = (uint16_t)Copy_Value;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <FPEC_WriteDataOptionByte+0x124>)
 8000dec:	79ba      	ldrb	r2, [r7, #6]
 8000dee:	b292      	uxth	r2, r2
 8000df0:	801a      	strh	r2, [r3, #0]
		}

		/* Wait for Busy Flag */
		while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000df2:	bf00      	nop
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d0f9      	beq.n	8000df4 <FPEC_WriteDataOptionByte+0xd8>

		/* End of Option Bytes Programming Operation */
		SET_BIT(FPEC->SR,SR_EOP);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	60d3      	str	r3, [r2, #12]
		CLEAR_BIT(FPEC->CR,CR_OPTPG);
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <FPEC_WriteDataOptionByte+0x110>)
 8000e12:	f023 0310 	bic.w	r3, r3, #16
 8000e16:	6113      	str	r3, [r2, #16]
 8000e18:	e001      	b.n	8000e1e <FPEC_WriteDataOptionByte+0x102>
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000
 8000e30:	45670123 	.word	0x45670123
 8000e34:	cdef89ab 	.word	0xcdef89ab
 8000e38:	1ffff800 	.word	0x1ffff800
 8000e3c:	1ffff804 	.word	0x1ffff804
 8000e40:	1ffff806 	.word	0x1ffff806

08000e44 <FPEC_GetDataOptionByte>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function gets (reads) the value stored in option byte 	  */
/* 				   Data0	  													  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t FPEC_GetDataOptionByte(uint8_t Copy_DataOptionByte, uint8_t* Copy_pValue)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;				/* Variable to hold status of the function */
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]

	/* Unlock read protection */
	*(volatile uint16_t*)(0x1FFFF800) = FPEC_READ_PROTECTION_UNLOCK_KEY;
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <FPEC_GetDataOptionByte+0x68>)
 8000e56:	22a5      	movs	r2, #165	; 0xa5
 8000e58:	801a      	strh	r2, [r3, #0]

	/* Wait for Busy Flag */
	while (READ_BIT(FPEC->SR,SR_BSY) == 1);
 8000e5a:	bf00      	nop
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <FPEC_GetDataOptionByte+0x6c>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d0f9      	beq.n	8000e5c <FPEC_GetDataOptionByte+0x18>

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pValue != NULL)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d016      	beq.n	8000e9c <FPEC_GetDataOptionByte+0x58>
	{
		/* Switch on passed Data option byte Id */
		switch(Copy_DataOptionByte)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <FPEC_GetDataOptionByte+0x36>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d007      	beq.n	8000e88 <FPEC_GetDataOptionByte+0x44>
 8000e78:	e00d      	b.n	8000e96 <FPEC_GetDataOptionByte+0x52>
		{
		    case FPEC_DATA_OPTION_BYTE0:

				/* Get Value of Data Option Byte0 */
				*Copy_pValue = (uint8_t)((FPEC->OBR & FPEC_DATA_OPTION_BYTE0_MASK) >> 10);
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <FPEC_GetDataOptionByte+0x6c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	0a9b      	lsrs	r3, r3, #10
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	701a      	strb	r2, [r3, #0]

				break;
 8000e86:	e00b      	b.n	8000ea0 <FPEC_GetDataOptionByte+0x5c>

		    case FPEC_DATA_OPTION_BYTE1:

				/* Get Value of Data Option Byte1 */
				*Copy_pValue = (uint8_t)((FPEC->OBR & FPEC_DATA_OPTION_BYTE1_MASK) >> 18);
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <FPEC_GetDataOptionByte+0x6c>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	0c9b      	lsrs	r3, r3, #18
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	701a      	strb	r2, [r3, #0]

				break;
 8000e94:	e004      	b.n	8000ea0 <FPEC_GetDataOptionByte+0x5c>

		    default:

		    	/* Function is not behaving as expected */
		    	Local_Status = RT_NOK;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <FPEC_GetDataOptionByte+0x5c>
		}
	}
	else
	{
		/* Passed pointer is NULL pointer */
		Local_Status = NULL_POINTER;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	1ffff800 	.word	0x1ffff800
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <GPIO_SetPinMode>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets the mode of operation of GPIO pin                         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinMode(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Mode)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and mode are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	f200 80d0 	bhi.w	8001072 <GPIO_SetPinMode+0x1be>
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	f200 80cc 	bhi.w	8001072 <GPIO_SetPinMode+0x1be>
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d02a      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
	   (Copy_Mode == GPIO_PIN_INPUT_ANALOG || Copy_Mode == GPIO_PIN_INPUT_FLOATING || Copy_Mode == GPIO_PIN_INPUT_PULLUP_PULLDOWN ||
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d027      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d024      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d021      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_OPENDRAIN    ||
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d01e      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	d01b      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_OPENDRAIN ||
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	2b0d      	cmp	r3, #13
 8000f02:	d018      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d015      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL     || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_OPENDRAIN     ||
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	d012      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d00f      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_PUSHPULL  || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_OPENDRAIN  ||
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	2b0e      	cmp	r3, #14
 8000f1a:	d00c      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000f1c:	797b      	ldrb	r3, [r7, #5]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d009      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_OPENDRAIN    ||
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d006      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	2b0b      	cmp	r3, #11
 8000f2c:	d003      	beq.n	8000f36 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_OPENDRAIN))
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	f040 809e 	bne.w	8001072 <GPIO_SetPinMode+0x1be>
	{
		/* Check port number */
		switch(Copy_Port)
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d03c      	beq.n	8000fb6 <GPIO_SetPinMode+0x102>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d072      	beq.n	8001026 <GPIO_SetPinMode+0x172>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d000      	beq.n	8000f46 <GPIO_SetPinMode+0x92>
					/* Set the four bits of mode concerned with the pin in CRH register */
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
				}
				break;
		}
	}
 8000f44:	e097      	b.n	8001076 <GPIO_SetPinMode+0x1c2>
				if(Copy_Pin < 8)
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	d817      	bhi.n	8000f7c <GPIO_SetPinMode+0xc8>
					GPIOA->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	210f      	movs	r1, #15
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	43d2      	mvns	r2, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f60:	400b      	ands	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
					GPIOA->CRL |= (Copy_Mode << (4*Copy_Pin));
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	7979      	ldrb	r1, [r7, #5]
 8000f6a:	79ba      	ldrb	r2, [r7, #6]
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
				break;
 8000f7a:	e074      	b.n	8001066 <GPIO_SetPinMode+0x1b2>
				else if(Copy_Pin < 16)
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d871      	bhi.n	8001066 <GPIO_SetPinMode+0x1b2>
					GPIOA->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	3a08      	subs	r2, #8
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	43d2      	mvns	r2, r2
 8000f94:	4611      	mov	r1, r2
 8000f96:	4a3b      	ldr	r2, [pc, #236]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f98:	400b      	ands	r3, r1
 8000f9a:	6053      	str	r3, [r2, #4]
					GPIOA->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	7979      	ldrb	r1, [r7, #5]
 8000fa2:	79ba      	ldrb	r2, [r7, #6]
 8000fa4:	3a08      	subs	r2, #8
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	4611      	mov	r1, r2
 8000fae:	4a35      	ldr	r2, [pc, #212]	; (8001084 <GPIO_SetPinMode+0x1d0>)
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6053      	str	r3, [r2, #4]
				break;
 8000fb4:	e057      	b.n	8001066 <GPIO_SetPinMode+0x1b2>
				if(Copy_Pin < 8)
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d817      	bhi.n	8000fec <GPIO_SetPinMode+0x138>
					GPIOB->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	6013      	str	r3, [r2, #0]
					GPIOB->CRL |= (Copy_Mode << (4*Copy_Pin));
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	7979      	ldrb	r1, [r7, #5]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	6013      	str	r3, [r2, #0]
				break;
 8000fea:	e03e      	b.n	800106a <GPIO_SetPinMode+0x1b6>
				else if(Copy_Pin < 16)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d83b      	bhi.n	800106a <GPIO_SetPinMode+0x1b6>
					GPIOB->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	3a08      	subs	r2, #8
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	43d2      	mvns	r2, r2
 8001004:	4611      	mov	r1, r2
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8001008:	400b      	ands	r3, r1
 800100a:	6053      	str	r3, [r2, #4]
					GPIOB->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	7979      	ldrb	r1, [r7, #5]
 8001012:	79ba      	ldrb	r2, [r7, #6]
 8001014:	3a08      	subs	r2, #8
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	fa01 f202 	lsl.w	r2, r1, r2
 800101c:	4611      	mov	r1, r2
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <GPIO_SetPinMode+0x1d4>)
 8001020:	430b      	orrs	r3, r1
 8001022:	6053      	str	r3, [r2, #4]
				break;
 8001024:	e021      	b.n	800106a <GPIO_SetPinMode+0x1b6>
				if(Copy_Pin >= 13 && Copy_Pin <= 15)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d920      	bls.n	800106e <GPIO_SetPinMode+0x1ba>
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d81d      	bhi.n	800106e <GPIO_SetPinMode+0x1ba>
					GPIOC->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <GPIO_SetPinMode+0x1d8>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	79ba      	ldrb	r2, [r7, #6]
 8001038:	3a08      	subs	r2, #8
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	210f      	movs	r1, #15
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	43d2      	mvns	r2, r2
 8001044:	4611      	mov	r1, r2
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <GPIO_SetPinMode+0x1d8>)
 8001048:	400b      	ands	r3, r1
 800104a:	6053      	str	r3, [r2, #4]
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <GPIO_SetPinMode+0x1d8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	7979      	ldrb	r1, [r7, #5]
 8001052:	79ba      	ldrb	r2, [r7, #6]
 8001054:	3a08      	subs	r2, #8
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4611      	mov	r1, r2
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <GPIO_SetPinMode+0x1d8>)
 8001060:	430b      	orrs	r3, r1
 8001062:	6053      	str	r3, [r2, #4]
				break;
 8001064:	e003      	b.n	800106e <GPIO_SetPinMode+0x1ba>
				break;
 8001066:	bf00      	nop
 8001068:	e005      	b.n	8001076 <GPIO_SetPinMode+0x1c2>
				break;
 800106a:	bf00      	nop
 800106c:	e003      	b.n	8001076 <GPIO_SetPinMode+0x1c2>
				break;
 800106e:	bf00      	nop
	}
 8001070:	e001      	b.n	8001076 <GPIO_SetPinMode+0x1c2>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40011000 	.word	0x40011000

08001090 <GPIO_SetPinVal>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets a value (Logical High or Logical Low) on GPIO pin         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinVal(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Value)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and value are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d87c      	bhi.n	80011a6 <GPIO_SetPinVal+0x116>
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	d879      	bhi.n	80011a6 <GPIO_SetPinVal+0x116>
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d00e      	beq.n	80010d6 <GPIO_SetPinVal+0x46>
	   (Copy_Value == GPIO_PIN_HIGH   ||  Copy_Value == GPIO_PIN_LOW    || Copy_Value == GPIO_PIN_OD_HIGH ||
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <GPIO_SetPinVal+0x46>
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <GPIO_SetPinVal+0x46>
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <GPIO_SetPinVal+0x46>
	    Copy_Value == GPIO_PIN_OD_LOW ||  Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_PULLDOWN))
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <GPIO_SetPinVal+0x46>
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d167      	bne.n	80011a6 <GPIO_SetPinVal+0x116>
	{
			/* Check port number */
			switch(Copy_Port)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d022      	beq.n	8001122 <GPIO_SetPinVal+0x92>
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d03e      	beq.n	800115e <GPIO_SetPinVal+0xce>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d000      	beq.n	80010e6 <GPIO_SetPinVal+0x56>
						/* Set pin in BRR register */
						GPIOC->BRR = (1 << Copy_Pin);
					}
					break;
			}
	}
 80010e4:	e061      	b.n	80011aa <GPIO_SetPinVal+0x11a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <GPIO_SetPinVal+0x68>
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d002      	beq.n	80010f8 <GPIO_SetPinVal+0x68>
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <GPIO_SetPinVal+0x74>
						GPIOA->BSRR = (1 << Copy_Pin);
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2201      	movs	r2, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <GPIO_SetPinVal+0x128>)
 8001100:	611a      	str	r2, [r3, #16]
					break;
 8001102:	e04a      	b.n	800119a <GPIO_SetPinVal+0x10a>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <GPIO_SetPinVal+0x86>
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <GPIO_SetPinVal+0x86>
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d141      	bne.n	800119a <GPIO_SetPinVal+0x10a>
						GPIOA->BRR = (1 << Copy_Pin);
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2201      	movs	r2, #1
 800111a:	409a      	lsls	r2, r3
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <GPIO_SetPinVal+0x128>)
 800111e:	615a      	str	r2, [r3, #20]
					break;
 8001120:	e03b      	b.n	800119a <GPIO_SetPinVal+0x10a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <GPIO_SetPinVal+0xa4>
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d002      	beq.n	8001134 <GPIO_SetPinVal+0xa4>
 800112e:	797b      	ldrb	r3, [r7, #5]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <GPIO_SetPinVal+0xb0>
						GPIOB->BSRR = (1 << Copy_Pin);
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2201      	movs	r2, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <GPIO_SetPinVal+0x12c>)
 800113c:	611a      	str	r2, [r3, #16]
					break;
 800113e:	e02e      	b.n	800119e <GPIO_SetPinVal+0x10e>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <GPIO_SetPinVal+0xc2>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <GPIO_SetPinVal+0xc2>
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d125      	bne.n	800119e <GPIO_SetPinVal+0x10e>
						GPIOB->BRR = (1 << Copy_Pin);
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	2201      	movs	r2, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <GPIO_SetPinVal+0x12c>)
 800115a:	615a      	str	r2, [r3, #20]
					break;
 800115c:	e01f      	b.n	800119e <GPIO_SetPinVal+0x10e>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <GPIO_SetPinVal+0xe0>
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <GPIO_SetPinVal+0xe0>
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d105      	bne.n	800117c <GPIO_SetPinVal+0xec>
						GPIOC->BSRR = (1 << Copy_Pin);
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	2201      	movs	r2, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <GPIO_SetPinVal+0x130>)
 8001178:	611a      	str	r2, [r3, #16]
					break;
 800117a:	e012      	b.n	80011a2 <GPIO_SetPinVal+0x112>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <GPIO_SetPinVal+0xfe>
 8001182:	797b      	ldrb	r3, [r7, #5]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <GPIO_SetPinVal+0xfe>
 8001188:	797b      	ldrb	r3, [r7, #5]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <GPIO_SetPinVal+0x112>
						GPIOC->BRR = (1 << Copy_Pin);
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2201      	movs	r2, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <GPIO_SetPinVal+0x130>)
 8001196:	615a      	str	r2, [r3, #20]
					break;
 8001198:	e003      	b.n	80011a2 <GPIO_SetPinVal+0x112>
					break;
 800119a:	bf00      	nop
 800119c:	e005      	b.n	80011aa <GPIO_SetPinVal+0x11a>
					break;
 800119e:	bf00      	nop
 80011a0:	e003      	b.n	80011aa <GPIO_SetPinVal+0x11a>
					break;
 80011a2:	bf00      	nop
	}
 80011a4:	e001      	b.n	80011aa <GPIO_SetPinVal+0x11a>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40011000 	.word	0x40011000

080011c4 <SCB_ShiftInterruptVectorTable>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function is intended to force a large system software	  */
/* 				   reset of all major components								  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t SCB_ShiftInterruptVectorTable(uint32_t Copy_VectorTableOffset)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	uint8_t Local_Status = RT_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

	/* Check if passed vector table offset is within the valid range */
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <SCB_ShiftInterruptVectorTable+0x34>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d807      	bhi.n	80011e8 <SCB_ShiftInterruptVectorTable+0x24>
	   ((Copy_VectorTableOffset & 0x000000FF) == 0))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	b2db      	uxtb	r3, r3
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <SCB_ShiftInterruptVectorTable+0x24>
	{
		SCB->VTOR = Copy_VectorTableOffset;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <SCB_ShiftInterruptVectorTable+0x38>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6093      	str	r3, [r2, #8]
 80011e6:	e001      	b.n	80011ec <SCB_ShiftInterruptVectorTable+0x28>
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
	}
	return Local_Status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	3ffffe00 	.word	0x3ffffe00
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SERV_Delay_ms>:
/* @Return          : uint32_t  	        	      		        			  */
/*--------------------------------------------------------------------------------*/
/* @Description     : Function to block the processor for specified delay in ms	  */
/*--------------------------------------------------------------------------------*/
uint32_t SERV_Delay_ms(uint32_t Copy_Time)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint32_t Local_Ticks = (500 * Copy_Time);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	60bb      	str	r3, [r7, #8]
	uint32_t Local_TicksCounter;

	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e003      	b.n	8001222 <SERV_Delay_ms+0x22>
	{
		__asm("NOP");
 800121a:	bf00      	nop
	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3f7      	bcc.n	800121a <SERV_Delay_ms+0x1a>
	}
	return Local_TicksCounter;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <ASCII_TO_HEX>:
 * Return: uint8_t HexData (value after conversion)
 *
 * Description: this function is responsible of converting the passed
 *              ASCII value to hex.
 ************************************************************************/
uint8_t ASCII_TO_HEX(uint8_t ASCII_data){
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
	/* Local variable to hold the converted value*/
	uint8_t HexData;

	/* checking if the passed value if from A to F or from 0 to 9*/
	if(ASCII_data >= 'A' && ASCII_data <='F'){
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b40      	cmp	r3, #64	; 0x40
 8001244:	d906      	bls.n	8001254 <ASCII_TO_HEX+0x1e>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b46      	cmp	r3, #70	; 0x46
 800124a:	d803      	bhi.n	8001254 <ASCII_TO_HEX+0x1e>
		 * which means to get the corresponding value for any passed   *
		 * ASCII character is to subtract 55 from it.                  *
		 * 0xB = 11 & 'B' = 66 ---> 'B' - ('A' - 0x0A) = 66 - 55 = 11  *
		 * where 11 is 0xB                                             */

		HexData = ASCII_data - ('A' - 0x0A);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b37      	subs	r3, #55	; 0x37
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e008      	b.n	8001266 <ASCII_TO_HEX+0x30>
	}
	/* if the passed value is from 0 to 9 */
	else if(ASCII_data >= '0' && ASCII_data <='9'){
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b2f      	cmp	r3, #47	; 0x2f
 8001258:	d905      	bls.n	8001266 <ASCII_TO_HEX+0x30>
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b39      	cmp	r3, #57	; 0x39
 800125e:	d802      	bhi.n	8001266 <ASCII_TO_HEX+0x30>
		/* subtracting '0' from the passed ASCII character */
		HexData = ASCII_data - ('0');
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	3b30      	subs	r3, #48	; 0x30
 8001264:	73fb      	strb	r3, [r7, #15]
	}
	/* if the passed value is out of range */
	else{
		/* error handling */
	}
	return HexData;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <parseAddressUpperPart>:
 * Return: void
 *
 * Description: this function is responsible of extracting the upper
 *              part of the address.
 ************************************************************************/
void parseAddressUpperPart(uint8_t * record){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
/* Local variables: */
	/* Local variable to hold the upper part of the address */
	uint16_t AdressUpperPart = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	81fb      	strh	r3, [r7, #14]

	/* Local variable to hold the digits of the             *
	 * upper part of the address after converting it.       */
	uint8_t digits[4] = {0};
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]

/* Address upper part */
	/* converting each digit from ASCII to the corresponding *
	 * hex value.                                            */
	digits[0] = ASCII_TO_HEX(record[9]);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3309      	adds	r3, #9
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffd3 	bl	8001236 <ASCII_TO_HEX>
 8001290:	4603      	mov	r3, r0
 8001292:	723b      	strb	r3, [r7, #8]
	digits[1] = ASCII_TO_HEX(record[10]);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	330a      	adds	r3, #10
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ffcb 	bl	8001236 <ASCII_TO_HEX>
 80012a0:	4603      	mov	r3, r0
 80012a2:	727b      	strb	r3, [r7, #9]
	digits[2] = ASCII_TO_HEX(record[11]);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	330b      	adds	r3, #11
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffc3 	bl	8001236 <ASCII_TO_HEX>
 80012b0:	4603      	mov	r3, r0
 80012b2:	72bb      	strb	r3, [r7, #10]
	digits[3] = ASCII_TO_HEX(record[12]);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	330c      	adds	r3, #12
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffbb 	bl	8001236 <ASCII_TO_HEX>
 80012c0:	4603      	mov	r3, r0
 80012c2:	72fb      	strb	r3, [r7, #11]

	/* Assigning the AdressUpperPart variable with the digits after  *
	 * converting them.                                              */
	AdressUpperPart = (digits[0]<<4*3) |
 80012c4:	7a3b      	ldrb	r3, [r7, #8]
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	b21a      	sxth	r2, r3
			          (digits[1]<<4*2) |
 80012ca:	7a7b      	ldrb	r3, [r7, #9]
 80012cc:	021b      	lsls	r3, r3, #8
	AdressUpperPart = (digits[0]<<4*3) |
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
					  (digits[2]<<4) |
 80012d4:	7abb      	ldrb	r3, [r7, #10]
 80012d6:	011b      	lsls	r3, r3, #4
			          (digits[1]<<4*2) |
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
					  (digits[3]);
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	b21b      	sxth	r3, r3
					  (digits[2]<<4) |
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
	AdressUpperPart = (digits[0]<<4*3) |
 80012e6:	81fb      	strh	r3, [r7, #14]

	/* shifting the upper part to be put in its right place in the address  *
	 * address = 0xyyyyyyyy                                                 *
	 *             |||| -> upper part of the address                        */
	address = AdressUpperPart << 4*4;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b03      	ldr	r3, [pc, #12]	; (80012fc <parseAddressUpperPart+0x88>)
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000f8 	.word	0x200000f8

08001300 <parseData>:
 * 				|||||||TT->Record Type
 * 				|||AAAA->Address
 * 				|LL->Record Length (0x10 == 16 bytes)
 * 				:->Colon
 ************************************************************************/
void parseData(uint8_t* record){
 8001300:	b580      	push	{r7, lr}
 8001302:	b0b6      	sub	sp, #216	; 0xd8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	/* Iterator to be used in the for loop. */
	uint8_t i;

/* converting record length from ASCII to hex. */
	/* converting the high digit of the record length from ASCII to hex */
	LL_highDigit = ASCII_TO_HEX(record[1]);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff91 	bl	8001236 <ASCII_TO_HEX>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	/* converting the low digit of the record length from ASCII to hex */
	LL_lowDigit = ASCII_TO_HEX(record[2]);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3302      	adds	r3, #2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff88 	bl	8001236 <ASCII_TO_HEX>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
	/* assigning the variable that should hold the record length with the *
	 * value after conversion.                                            */
	LL = (LL_highDigit << 4) | (LL_lowDigit);
 800132c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	b25a      	sxtb	r2, r3
 8001334:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 8001338:	4313      	orrs	r3, r2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

/* converting address from ASCII to hex and forming the address. */
	/* converting each digit of the data from ASCII to hex */
	digits[0] = ASCII_TO_HEX(record[3]);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3303      	adds	r3, #3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff75 	bl	8001236 <ASCII_TO_HEX>
 800134c:	4603      	mov	r3, r0
 800134e:	723b      	strb	r3, [r7, #8]
	digits[1] = ASCII_TO_HEX(record[4]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3304      	adds	r3, #4
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff6d 	bl	8001236 <ASCII_TO_HEX>
 800135c:	4603      	mov	r3, r0
 800135e:	727b      	strb	r3, [r7, #9]
	digits[2] = ASCII_TO_HEX(record[5]);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3305      	adds	r3, #5
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff65 	bl	8001236 <ASCII_TO_HEX>
 800136c:	4603      	mov	r3, r0
 800136e:	72bb      	strb	r3, [r7, #10]
	digits[3] = ASCII_TO_HEX(record[6]);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3306      	adds	r3, #6
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff5d 	bl	8001236 <ASCII_TO_HEX>
 800137c:	4603      	mov	r3, r0
 800137e:	72fb      	strb	r3, [r7, #11]

/* forming the address */
	/* clearing the lower part of the address */
	address &= 0xFFFF0000;
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <parseData+0x188>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	4a3f      	ldr	r2, [pc, #252]	; (8001488 <parseData+0x188>)
 800138a:	6013      	str	r3, [r2, #0]

	/* forming the address of the digits after  *
	 * converting them to hex format.           */
	address |= (digits[0]<<4*3)
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	031a      	lsls	r2, r3, #12
			  |(digits[1]<<4*2)
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	431a      	orrs	r2, r3
			  |(digits[2]<<4*1)
 8001396:	7abb      	ldrb	r3, [r7, #10]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4313      	orrs	r3, r2
			  |(digits[3]);
 800139c:	7afa      	ldrb	r2, [r7, #11]
 800139e:	4313      	orrs	r3, r2
 80013a0:	461a      	mov	r2, r3
	address |= (digits[0]<<4*3)
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <parseData+0x188>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a37      	ldr	r2, [pc, #220]	; (8001488 <parseData+0x188>)
 80013aa:	6013      	str	r3, [r2, #0]
/* forming an array of the data to be flashed. */
	/* looping to half the record length as the record length is the  *
	 * number of bytes existing in the record data but we are forming *
	 * a 2-byte data length(1/2 word) so, we need to loop to half the *
	 * record length only.                                            */
	for(i = 0 ; i<(LL/2) ; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80013b2:	e052      	b.n	800145a <parseData+0x15a>

		/* converting each digit from ASCII to hex */
		digits[0] = ASCII_TO_HEX(record[9  + (4*i)]);
 80013b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	3309      	adds	r3, #9
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff36 	bl	8001236 <ASCII_TO_HEX>
 80013ca:	4603      	mov	r3, r0
 80013cc:	723b      	strb	r3, [r7, #8]
		digits[1] = ASCII_TO_HEX(record[10 + (4*i)]);
 80013ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	330a      	adds	r3, #10
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff29 	bl	8001236 <ASCII_TO_HEX>
 80013e4:	4603      	mov	r3, r0
 80013e6:	727b      	strb	r3, [r7, #9]
		digits[2] = ASCII_TO_HEX(record[11 + (4*i)]);
 80013e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	330b      	adds	r3, #11
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff1c 	bl	8001236 <ASCII_TO_HEX>
 80013fe:	4603      	mov	r3, r0
 8001400:	72bb      	strb	r3, [r7, #10]
		digits[3] = ASCII_TO_HEX(record[12 + (4*i)]);
 8001402:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001406:	3303      	adds	r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff0f 	bl	8001236 <ASCII_TO_HEX>
 8001418:	4603      	mov	r3, r0
 800141a:	72fb      	strb	r3, [r7, #11]

		/* assigning the digits shifted to data that will be flashed *
		 * but take into consideration the little endian.            */
		data[(uint32_t)i] = (digits[2]<<4*3)
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	031b      	lsls	r3, r3, #12
						   |(digits[3]<<4*2)
 8001420:	b21a      	sxth	r2, r3
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21a      	sxth	r2, r3
						   |(digits[0]<<4*1)
 800142c:	7a3b      	ldrb	r3, [r7, #8]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21a      	sxth	r2, r3
						   |(digits[1]);
 8001436:	7a7b      	ldrb	r3, [r7, #9]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21a      	sxth	r2, r3
		data[(uint32_t)i] = (digits[2]<<4*3)
 800143e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
						   |(digits[1]);
 8001442:	b292      	uxth	r2, r2
		data[(uint32_t)i] = (digits[2]<<4*3)
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800144a:	440b      	add	r3, r1
 800144c:	f823 2ccc 	strh.w	r2, [r3, #-204]
	for(i = 0 ; i<(LL/2) ; i++){
 8001450:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001454:	3301      	adds	r3, #1
 8001456:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800145a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8001466:	429a      	cmp	r2, r3
 8001468:	d3a4      	bcc.n	80013b4 <parseData+0xb4>
	}

	/* flashing the data in the corresponding addresses. */
	FPEC_FlashWriteHexRecord(address, data, (LL/2));
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <parseData+0x188>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fbe4 	bl	8000c48 <FPEC_FlashWriteHexRecord>
}
 8001480:	bf00      	nop
 8001482:	37d8      	adds	r7, #216	; 0xd8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000f8 	.word	0x200000f8

0800148c <Parser_parseRecord>:
 *              the record type that is included in each record, where
 *              if the record type is: 00 -> data.
 *                                     04 -> upper part of the address.
 *                                     01 -> end of the file.
 ************************************************************************/
void Parser_parseRecord(uint8_t* record){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
/* Local variables:*/
	/* variable to hold the optionBytes value. */
	uint8_t optionByteVal = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
	/* getting the value of the option bytes. */
	FPEC_GetDataOptionByte(FPEC_DATA_OPTION_BYTE0, &optionByteVal);
 8001498:	f107 030f 	add.w	r3, r7, #15
 800149c:	4619      	mov	r1, r3
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fcd0 	bl	8000e44 <FPEC_GetDataOptionByte>

	/* if the eighth digit of the record is: *
	 * 0 -> data                             *
	 * 4 -> upper part of the address        *
	 * 1 -> end of the file.                 */
	switch(record[8]){
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3308      	adds	r3, #8
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b31      	cmp	r3, #49	; 0x31
 80014ac:	d02e      	beq.n	800150c <Parser_parseRecord+0x80>
 80014ae:	2b34      	cmp	r3, #52	; 0x34
 80014b0:	d006      	beq.n	80014c0 <Parser_parseRecord+0x34>
 80014b2:	2b30      	cmp	r3, #48	; 0x30
 80014b4:	d000      	beq.n	80014b8 <Parser_parseRecord+0x2c>
		}
		/* write the option bytes including the flag that indicates      *
		 * the first APP and the second APP are flashed correctly or not */
		FPEC_WriteDataOptionByte(FPEC_DATA_OPTION_BYTE0, optionByteVal);
	default:
		break;
 80014b6:	e061      	b.n	800157c <Parser_parseRecord+0xf0>
		parseData(record);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff21 	bl	8001300 <parseData>
		break;
 80014be:	e05e      	b.n	800157e <Parser_parseRecord+0xf2>
		parseAddressUpperPart(record);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fed7 	bl	8001274 <parseAddressUpperPart>
		if(address == APP_BANK_1_ADDRESS_UPPER_PART){
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <Parser_parseRecord+0xfc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014ce:	d109      	bne.n	80014e4 <Parser_parseRecord+0x58>
			FPEC_EraseBankArea(APP_1_PAGE_NUM,APP_1_SIZE);
 80014d0:	2120      	movs	r1, #32
 80014d2:	2020      	movs	r0, #32
 80014d4:	f7ff fb92 	bl	8000bfc <FPEC_EraseBankArea>
			CLEAR_BIT(optionByteVal , APP_1_BANK_FLAG);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f023 0304 	bic.w	r3, r3, #4
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e00d      	b.n	8001500 <Parser_parseRecord+0x74>
		else if(address == APP_BANK_2_ADDRESS_UPPER_PART){
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <Parser_parseRecord+0xfc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <Parser_parseRecord+0x100>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d108      	bne.n	8001500 <Parser_parseRecord+0x74>
			FPEC_EraseBankArea(APP_2_PAGE_NUM,APP_2_SIZE);
 80014ee:	2120      	movs	r1, #32
 80014f0:	2040      	movs	r0, #64	; 0x40
 80014f2:	f7ff fb83 	bl	8000bfc <FPEC_EraseBankArea>
			CLEAR_BIT(optionByteVal , APP_2_BANK_FLAG);
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	f023 0308 	bic.w	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	73fb      	strb	r3, [r7, #15]
		FPEC_WriteDataOptionByte(FPEC_DATA_OPTION_BYTE0, optionByteVal);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4619      	mov	r1, r3
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fc09 	bl	8000d1c <FPEC_WriteDataOptionByte>
		break;
 800150a:	e038      	b.n	800157e <Parser_parseRecord+0xf2>
		CLEAR_BIT(optionByteVal , 0);
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
		CLEAR_BIT(optionByteVal , 1);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f023 0302 	bic.w	r3, r3, #2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
		if((address & 0xFFFF0000) == APP_BANK_1_ADDRESS_UPPER_PART){
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <Parser_parseRecord+0xfc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800152c:	d10d      	bne.n	800154a <Parser_parseRecord+0xbe>
			optionByteVal |= APP_1_ID;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
			currentApp = APP_1_ID;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <Parser_parseRecord+0x104>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
			SET_BIT(optionByteVal , APP_1_BANK_FLAG);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e013      	b.n	8001572 <Parser_parseRecord+0xe6>
		else if((address & 0xFFFF0000) == APP_BANK_2_ADDRESS_UPPER_PART){
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <Parser_parseRecord+0xfc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <Parser_parseRecord+0x100>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d10c      	bne.n	8001572 <Parser_parseRecord+0xe6>
			optionByteVal |= APP_2_ID;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
			currentApp = APP_2_ID;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <Parser_parseRecord+0x104>)
 8001564:	2202      	movs	r2, #2
 8001566:	701a      	strb	r2, [r3, #0]
			SET_BIT(optionByteVal , APP_2_BANK_FLAG);
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73fb      	strb	r3, [r7, #15]
		FPEC_WriteDataOptionByte(FPEC_DATA_OPTION_BYTE0, optionByteVal);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4619      	mov	r1, r3
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fbd0 	bl	8000d1c <FPEC_WriteDataOptionByte>
		break;
 800157c:	bf00      	nop
	}
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000f8 	.word	0x200000f8
 800158c:	08010000 	.word	0x08010000
 8001590:	20000094 	.word	0x20000094

08001594 <Parser_GetAppId>:
 * Description: this function reads the option bytes and assigns the
 *              app_id value with the id that is in the option byte,
 *              if the first 2 bits in option byte DATA0 == 1 then
 *              APP_1_ID and if 2 then APP_2_ID.
 ************************************************************************/
void Parser_GetAppId(APPs_ID * app_id){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	/* Local variable to hold the value of the option byte after  *
	 * reading it.                                                */
	uint8_t optionByteVal = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

	/* if the currentApp is NULL then this indicates that there is no *
	 * new application being flashed.                                 */
	if(currentApp == NULL){
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <Parser_GetAppId+0x40>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10c      	bne.n	80015c2 <Parser_GetAppId+0x2e>
		/* Get the app_id from the option byte. */
		FPEC_GetDataOptionByte(FPEC_DATA_OPTION_BYTE0, &optionByteVal);
 80015a8:	f107 030f 	add.w	r3, r7, #15
 80015ac:	4619      	mov	r1, r3
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff fc48 	bl	8000e44 <FPEC_GetDataOptionByte>
		(*app_id) = optionByteVal &0x03;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	701a      	strb	r2, [r3, #0]
	/* if the currentApp variable holds any value other than NULL *
	 * then there is a new application that is flashed.           */
	else{
		(*app_id) = currentApp;
	}
}
 80015c0:	e003      	b.n	80015ca <Parser_GetAppId+0x36>
		(*app_id) = currentApp;
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <Parser_GetAppId+0x40>)
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000094 	.word	0x20000094

080015d8 <Parser_SetAppId>:
 * Return: void
 *
 * Description: this function sets the id bits in the option bytes
 *              with the passed value.
 ************************************************************************/
void Parser_SetAppId(APPs_ID app_id){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
	/* Local variable to hold the option bytes value. */
	uint8_t optionByteVal = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]

	/* reading the DATA0 option byte. */
	FPEC_GetDataOptionByte(FPEC_DATA_OPTION_BYTE0, &optionByteVal);
 80015e6:	f107 030f 	add.w	r3, r7, #15
 80015ea:	4619      	mov	r1, r3
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fc29 	bl	8000e44 <FPEC_GetDataOptionByte>

	/* clearing the id bits to assign the new id. */
	optionByteVal &= ~(0x03);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f023 0303 	bic.w	r3, r3, #3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	73fb      	strb	r3, [r7, #15]

	/* Assigning the new id. */
	optionByteVal |= app_id;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4313      	orrs	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	73fb      	strb	r3, [r7, #15]

	/* write the option byte value. */
	FPEC_WriteDataOptionByte(FPEC_DATA_OPTION_BYTE0, optionByteVal);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	4619      	mov	r1, r3
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fb86 	bl	8000d1c <FPEC_WriteDataOptionByte>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <Parser_isAppAvailable>:
 * Return: void
 *
 * Description: this function checks whether the app that its id is
 *              passed exist or not.
 ************************************************************************/
uint8_t Parser_isAppAvailable(APPs_ID app_id){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	/* Local variable to hold the option byte value. */
	uint8_t optionByteVal = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	73bb      	strb	r3, [r7, #14]
	/* Local variable to hold the status that indicates whether *
	 * this application exist or not.                           */
	uint8_t status = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]

	/* getting the option byte value. */
	FPEC_GetDataOptionByte(FPEC_DATA_OPTION_BYTE0, &optionByteVal);
 800162a:	f107 030e 	add.w	r3, r7, #14
 800162e:	4619      	mov	r1, r3
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fc07 	bl	8000e44 <FPEC_GetDataOptionByte>

	/* if the passed id to be checked is APP_1 */
	if(app_id == APP_1_ID){
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d103      	bne.n	8001644 <Parser_isAppAvailable+0x2c>
		/* checking the flag of APP_1 in the option bytes */
		status = optionByteVal >> APP_1_BANK_FLAG;
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e005      	b.n	8001650 <Parser_isAppAvailable+0x38>
	}
	/* if the passed id to be checked is APP_2 */
	else if(app_id == APP_2_ID){
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d102      	bne.n	8001650 <Parser_isAppAvailable+0x38>
		/* checking the flag of the APP_2 in the option bytes */
		status = optionByteVal >> APP_2_BANK_FLAG;
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <Parser_ToggleAppId>:
 *
 * Return: void
 *
 * Description: this function toggles the application id.
 ************************************************************************/
void Parser_ToggleAppId(void){
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
	/* Local variable to hold the current id. */
	uint8_t app_id = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
	/* getting the current app id. */
	Parser_GetAppId(&app_id);
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff94 	bl	8001594 <Parser_GetAppId>
	/* if the current app is APP_1 and APP_2 exists then toggle */
	if(app_id == APP_1_ID && Parser_isAppAvailable(APP_2_ID)){
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d109      	bne.n	8001686 <Parser_ToggleAppId+0x2c>
 8001672:	2002      	movs	r0, #2
 8001674:	f7ff ffd0 	bl	8001618 <Parser_isAppAvailable>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <Parser_ToggleAppId+0x2c>
		/* set the current app id with APP_2_ID */
		Parser_SetAppId(APP_2_ID);
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff ffaa 	bl	80015d8 <Parser_SetAppId>
	/* if the current app is APP_2 and APP_1 exists then toggle */
	else if(app_id == APP_2_ID && Parser_isAppAvailable(APP_1_ID)){
		/* set the current app id with APP_1_ID */
		Parser_SetAppId(APP_1_ID);
	}
}
 8001684:	e00b      	b.n	800169e <Parser_ToggleAppId+0x44>
	else if(app_id == APP_2_ID && Parser_isAppAvailable(APP_1_ID)){
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d108      	bne.n	800169e <Parser_ToggleAppId+0x44>
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ffc3 	bl	8001618 <Parser_isAppAvailable>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <Parser_ToggleAppId+0x44>
		Parser_SetAppId(APP_1_ID);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff ff9d 	bl	80015d8 <Parser_SetAppId>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_CAN_MspInit+0xac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d141      	bne.n	80017b0 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 8001732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_CAN_MspInit+0xb0>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800175c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <HAL_CAN_MspInit+0xb4>)
 8001772:	f001 f89d 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <HAL_CAN_MspInit+0xb4>)
 800178c:	f001 f890 	bl	80028b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2014      	movs	r0, #20
 8001796:	f001 f860 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800179a:	2014      	movs	r0, #20
 800179c:	f001 f879 	bl	8002892 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2015      	movs	r0, #21
 80017a6:	f001 f858 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80017aa:	2015      	movs	r0, #21
 80017ac:	f001 f871 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40006400 	.word	0x40006400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <HardFault_Handler+0x4>

080017d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <MemManage_Handler+0x4>

080017dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <BusFault_Handler+0x4>

080017e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	USER_tick++;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <SysTick_Handler+0x2c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <SysTick_Handler+0x2c>)
 8001818:	6013      	str	r3, [r2, #0]
	if(USER_tick == USER_definedTicks){
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <SysTick_Handler+0x2c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <SysTick_Handler+0x30>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d104      	bne.n	8001830 <SysTick_Handler+0x24>
	USER_SysTickCallBack();
 8001826:	f7fe ff13 	bl	8000650 <USER_SysTickCallBack>
	USER_tick = 0;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SysTick_Handler+0x2c>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 f8ea 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000098 	.word	0x20000098
 800183c:	20000000 	.word	0x20000000

08001840 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001846:	f000 fd35 	bl	80022b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000009c 	.word	0x2000009c

08001854 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <CAN1_RX1_IRQHandler+0x10>)
 800185a:	f000 fd2b 	bl	80022b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000009c 	.word	0x2000009c

08001868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800186c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001870:	f001 f9aa 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <SystemCoreClockUpdate+0xc4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d007      	beq.n	80018b6 <SystemCoreClockUpdate+0x32>
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d009      	beq.n	80018be <SystemCoreClockUpdate+0x3a>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d133      	bne.n	8001916 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <SystemCoreClockUpdate+0xc8>)
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <SystemCoreClockUpdate+0xcc>)
 80018b2:	601a      	str	r2, [r3, #0]
      break;
 80018b4:	e033      	b.n	800191e <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemCoreClockUpdate+0xc8>)
 80018b8:	4a25      	ldr	r2, [pc, #148]	; (8001950 <SystemCoreClockUpdate+0xcc>)
 80018ba:	601a      	str	r2, [r3, #0]
      break;
 80018bc:	e02f      	b.n	800191e <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <SystemCoreClockUpdate+0xc4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018c6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <SystemCoreClockUpdate+0xc4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	3302      	adds	r3, #2
 80018d8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d106      	bne.n	80018ee <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <SystemCoreClockUpdate+0xd0>)
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <SystemCoreClockUpdate+0xc8>)
 80018ea:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80018ec:	e017      	b.n	800191e <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <SystemCoreClockUpdate+0xc4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4a15      	ldr	r2, [pc, #84]	; (8001954 <SystemCoreClockUpdate+0xd0>)
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <SystemCoreClockUpdate+0xc8>)
 8001904:	6013      	str	r3, [r2, #0]
      break;
 8001906:	e00a      	b.n	800191e <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <SystemCoreClockUpdate+0xcc>)
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <SystemCoreClockUpdate+0xc8>)
 8001912:	6013      	str	r3, [r2, #0]
      break;
 8001914:	e003      	b.n	800191e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <SystemCoreClockUpdate+0xc8>)
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <SystemCoreClockUpdate+0xcc>)
 800191a:	601a      	str	r2, [r3, #0]
      break;
 800191c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <SystemCoreClockUpdate+0xc4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <SystemCoreClockUpdate+0xd4>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <SystemCoreClockUpdate+0xc8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <SystemCoreClockUpdate+0xc8>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	20000004 	.word	0x20000004
 8001950:	007a1200 	.word	0x007a1200
 8001954:	003d0900 	.word	0x003d0900
 8001958:	08002cc8 	.word	0x08002cc8

0800195c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ff79 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f001 f937 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7fe fc2b 	bl	80001e4 <main>
  bx lr
 800198e:	4770      	bx	lr
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001998:	08002ce0 	.word	0x08002ce0
  ldr r2, =_sbss
 800199c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019a0:	20000100 	.word	0x20000100

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_Init+0x20>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_Init+0x20>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 ff43 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
//  HAL_InitTick(TICK_INT_PRIORITY);

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fe73 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_DeInit+0x2c>)
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_DeInit+0x2c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_DeInit+0x2c>)
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_DeInit+0x2c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80019ec:	f000 f806 	bl	80019fc <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200000fc 	.word	0x200000fc

08001a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	200000fc 	.word	0x200000fc

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fff0 	bl	8001a2c <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_Delay+0x40>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffe0 	bl	8001a2c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0ed      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fe32 	bl	800170c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab8:	f7ff ffb8 	bl	8001a2c <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001abe:	e012      	b.n	8001ae6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac0:	f7ff ffb4 	bl	8001a2c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d90b      	bls.n	8001ae6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2205      	movs	r2, #5
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0c5      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0e5      	beq.n	8001ac0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0202 	bic.w	r2, r2, #2
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff ff92 	bl	8001a2c <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b0a:	e012      	b.n	8001b32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b0c:	f7ff ff8e 	bl	8001a2c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d90b      	bls.n	8001b32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2205      	movs	r2, #5
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e09f      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e5      	bne.n	8001b0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e5b      	ldrb	r3, [r3, #25]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e007      	b.n	8001b94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7e9b      	ldrb	r3, [r3, #26]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e007      	b.n	8001bbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0220 	bic.w	r2, r2, #32
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7edb      	ldrb	r3, [r3, #27]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0210 	bic.w	r2, r2, #16
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e007      	b.n	8001be8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0210 	orr.w	r2, r2, #16
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7f1b      	ldrb	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0208 	orr.w	r2, r2, #8
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e007      	b.n	8001c12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7f5b      	ldrb	r3, [r3, #29]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0204 	orr.w	r2, r2, #4
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e007      	b.n	8001c3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	ea42 0103 	orr.w	r1, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	1e5a      	subs	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_ConfigFilter+0x26>
 8001c98:	7cfb      	ldrb	r3, [r7, #19]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80aa 	bne.w	8001df4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2201      	movs	r2, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d123      	bne.n	8001d22 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cfc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3248      	adds	r2, #72	; 0x48
 8001d02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d18:	6979      	ldr	r1, [r7, #20]
 8001d1a:	3348      	adds	r3, #72	; 0x48
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d122      	bne.n	8001d70 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3248      	adds	r2, #72	; 0x48
 8001d50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	3348      	adds	r3, #72	; 0x48
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d8a:	e007      	b.n	8001d9c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001db6:	e007      	b.n	8001dc8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001de6:	f023 0201 	bic.w	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e006      	b.n	8001e02 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d12e      	bne.n	8001e7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff fdf8 	bl	8001a2c <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e3e:	e012      	b.n	8001e66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e40:	f7ff fdf4 	bl	8001a2c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b0a      	cmp	r3, #10
 8001e4c:	d90b      	bls.n	8001e66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e012      	b.n	8001e8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e5      	bne.n	8001e40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e006      	b.n	8001e8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
  }
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d003      	beq.n	8001ec0 <HAL_CAN_AddTxMessage+0x2c>
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	f040 80b8 	bne.w	8002030 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a0 	beq.w	8002020 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	0e1b      	lsrs	r3, r3, #24
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d907      	bls.n	8001f00 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e09e      	b.n	800203e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f00:	2201      	movs	r2, #1
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	409a      	lsls	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3318      	adds	r3, #24
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	440b      	add	r3, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e00f      	b.n	8001f4e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3318      	adds	r3, #24
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	440b      	add	r3, r1
 8001f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3318      	adds	r3, #24
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3304      	adds	r3, #4
 8001f60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	7d1b      	ldrb	r3, [r3, #20]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d111      	bne.n	8001f8e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3318      	adds	r3, #24
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3318      	adds	r3, #24
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	440b      	add	r3, r1
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3307      	adds	r3, #7
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3306      	adds	r3, #6
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3305      	adds	r3, #5
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	3204      	adds	r2, #4
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	ea43 0200 	orr.w	r2, r3, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fc4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	061a      	lsls	r2, r3, #24
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6811      	ldr	r1, [r2, #0]
 8001fec:	ea43 0200 	orr.w	r2, r3, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ffa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3318      	adds	r3, #24
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	6811      	ldr	r1, [r2, #0]
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3318      	adds	r3, #24
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	440b      	add	r3, r1
 800201a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e00e      	b.n	800203e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e006      	b.n	800203e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d003      	beq.n	800206c <HAL_CAN_GetRxMessage+0x24>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80f3 	bne.w	8002252 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d116      	bne.n	80020ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e7      	b.n	8002260 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0d8      	b.n	8002260 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	331b      	adds	r3, #27
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0204 	and.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10c      	bne.n	80020e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	331b      	adds	r3, #27
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	4413      	add	r3, r2
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e00b      	b.n	80020fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	331b      	adds	r3, #27
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	331b      	adds	r3, #27
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0202 	and.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	331b      	adds	r3, #27
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	331b      	adds	r3, #27
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	331b      	adds	r3, #27
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4413      	add	r3, r2
 800217c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0a1a      	lsrs	r2, r3, #8
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0c1a      	lsrs	r2, r3, #16
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3302      	adds	r3, #2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e1a      	lsrs	r2, r3, #24
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	3303      	adds	r3, #3
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0a1a      	lsrs	r2, r3, #8
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	3305      	adds	r3, #5
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0c1a      	lsrs	r2, r3, #16
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	3306      	adds	r3, #6
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e1a      	lsrs	r2, r3, #24
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3307      	adds	r3, #7
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	e007      	b.n	800224e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e006      	b.n	8002260 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d002      	beq.n	8002288 <HAL_CAN_ActivateNotification+0x1e>
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d109      	bne.n	800229c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6959      	ldr	r1, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e006      	b.n	80022aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07c      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f97d 	bl	8002616 <HAL_CAN_TxMailbox0CompleteCallback>
 800231c:	e016      	b.n	800234c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	e00c      	b.n	800234c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	e002      	b.n	800234c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f980 	bl	800264c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d024      	beq.n	80023a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800235e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f95c 	bl	8002628 <HAL_CAN_TxMailbox1CompleteCallback>
 8002370:	e016      	b.n	80023a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e00c      	b.n	80023a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
 8002398:	e002      	b.n	80023a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f95f 	bl	800265e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f93b 	bl	800263a <HAL_CAN_TxMailbox2CompleteCallback>
 80023c4:	e016      	b.n	80023f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	e00c      	b.n	80023f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	e002      	b.n	80023f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f93e 	bl	8002670 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2210      	movs	r2, #16
 8002416:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2208      	movs	r2, #8
 8002432:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f924 	bl	8002682 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f924 	bl	80006a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002472:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2210      	movs	r2, #16
 800247a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f904 	bl	80026a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f8ec 	bl	8002694 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2210      	movs	r2, #16
 80024d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8ed 	bl	80026b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00b      	beq.n	8002500 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2208      	movs	r2, #8
 80024f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8e5 	bl	80026ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d075      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d06c      	beq.n	80025ee <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f043 0302 	orr.w	r3, r3, #2
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03d      	beq.n	80025ee <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d038      	beq.n	80025ee <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002582:	2b30      	cmp	r3, #48	; 0x30
 8002584:	d017      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x302>
 8002586:	2b30      	cmp	r3, #48	; 0x30
 8002588:	d804      	bhi.n	8002594 <HAL_CAN_IRQHandler+0x2e0>
 800258a:	2b10      	cmp	r3, #16
 800258c:	d009      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x2ee>
 800258e:	2b20      	cmp	r3, #32
 8002590:	d00c      	beq.n	80025ac <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002592:	e024      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d018      	beq.n	80025ca <HAL_CAN_IRQHandler+0x316>
 8002598:	2b60      	cmp	r3, #96	; 0x60
 800259a:	d01b      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x320>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d00f      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x30c>
            break;
 80025a0:	e01d      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025aa:	e018      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025b4:	e013      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025be:	e00e      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c8:	e009      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d2:	e004      	b.n	80025de <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2204      	movs	r2, #4
 80025f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f867 	bl	80026dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <__NVIC_SetPriorityGrouping>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4906      	ldr	r1, [pc, #24]	; (8002788 <__NVIC_EnableIRQ+0x34>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff4f 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff64 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ffb2 	bl	80027e0 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff81 	bl	800278c <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff57 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b08b      	sub	sp, #44	; 0x2c
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	e127      	b.n	8002b14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c4:	2201      	movs	r2, #1
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8116 	bne.w	8002b0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d034      	beq.n	8002954 <HAL_GPIO_Init+0xa4>
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d80d      	bhi.n	800290a <HAL_GPIO_Init+0x5a>
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d02b      	beq.n	800294a <HAL_GPIO_Init+0x9a>
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d804      	bhi.n	8002900 <HAL_GPIO_Init+0x50>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d031      	beq.n	800295e <HAL_GPIO_Init+0xae>
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d01c      	beq.n	8002938 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028fe:	e048      	b.n	8002992 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002900:	2b03      	cmp	r3, #3
 8002902:	d043      	beq.n	800298c <HAL_GPIO_Init+0xdc>
 8002904:	2b11      	cmp	r3, #17
 8002906:	d01b      	beq.n	8002940 <HAL_GPIO_Init+0x90>
          break;
 8002908:	e043      	b.n	8002992 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800290a:	4a89      	ldr	r2, [pc, #548]	; (8002b30 <HAL_GPIO_Init+0x280>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d026      	beq.n	800295e <HAL_GPIO_Init+0xae>
 8002910:	4a87      	ldr	r2, [pc, #540]	; (8002b30 <HAL_GPIO_Init+0x280>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d806      	bhi.n	8002924 <HAL_GPIO_Init+0x74>
 8002916:	4a87      	ldr	r2, [pc, #540]	; (8002b34 <HAL_GPIO_Init+0x284>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d020      	beq.n	800295e <HAL_GPIO_Init+0xae>
 800291c:	4a86      	ldr	r2, [pc, #536]	; (8002b38 <HAL_GPIO_Init+0x288>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_GPIO_Init+0xae>
          break;
 8002922:	e036      	b.n	8002992 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002924:	4a85      	ldr	r2, [pc, #532]	; (8002b3c <HAL_GPIO_Init+0x28c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0xae>
 800292a:	4a85      	ldr	r2, [pc, #532]	; (8002b40 <HAL_GPIO_Init+0x290>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d016      	beq.n	800295e <HAL_GPIO_Init+0xae>
 8002930:	4a84      	ldr	r2, [pc, #528]	; (8002b44 <HAL_GPIO_Init+0x294>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0xae>
          break;
 8002936:	e02c      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e028      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	3304      	adds	r3, #4
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e023      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	3308      	adds	r3, #8
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e01e      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	330c      	adds	r3, #12
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e019      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002966:	2304      	movs	r3, #4
 8002968:	623b      	str	r3, [r7, #32]
          break;
 800296a:	e012      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002974:	2308      	movs	r3, #8
 8002976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	611a      	str	r2, [r3, #16]
          break;
 800297e:	e008      	b.n	8002992 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002980:	2308      	movs	r3, #8
 8002982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	615a      	str	r2, [r3, #20]
          break;
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2bff      	cmp	r3, #255	; 0xff
 8002996:	d801      	bhi.n	800299c <HAL_GPIO_Init+0xec>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	e001      	b.n	80029a0 <HAL_GPIO_Init+0xf0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2bff      	cmp	r3, #255	; 0xff
 80029a6:	d802      	bhi.n	80029ae <HAL_GPIO_Init+0xfe>
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_Init+0x104>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	3b08      	subs	r3, #8
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	210f      	movs	r1, #15
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	401a      	ands	r2, r3
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8096 	beq.w	8002b0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e2:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_GPIO_Init+0x298>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_GPIO_Init+0x298>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6193      	str	r3, [r2, #24]
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x298>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029fa:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x29c>)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_GPIO_Init+0x2a0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x19e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <HAL_GPIO_Init+0x2a4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x19a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_GPIO_Init+0x2a8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x196>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <HAL_GPIO_Init+0x2ac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x192>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x1a0>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e004      	b.n	8002a50 <HAL_GPIO_Init+0x1a0>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_Init+0x1a0>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x1a0>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	f002 0203 	and.w	r2, r2, #3
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a60:	493a      	ldr	r1, [pc, #232]	; (8002b4c <HAL_GPIO_Init+0x29c>)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4938      	ldr	r1, [pc, #224]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4933      	ldr	r1, [pc, #204]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	492e      	ldr	r1, [pc, #184]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
 8002aae:	e006      	b.n	8002abe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4929      	ldr	r1, [pc, #164]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4924      	ldr	r1, [pc, #144]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	491f      	ldr	r1, [pc, #124]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	491a      	ldr	r1, [pc, #104]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
 8002afe:	e006      	b.n	8002b0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4915      	ldr	r1, [pc, #84]	; (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	3301      	adds	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f47f aed0 	bne.w	80028c4 <HAL_GPIO_Init+0x14>
  }
}
 8002b24:	bf00      	nop
 8002b26:	372c      	adds	r7, #44	; 0x2c
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	10210000 	.word	0x10210000
 8002b34:	10110000 	.word	0x10110000
 8002b38:	10120000 	.word	0x10120000
 8002b3c:	10310000 	.word	0x10310000
 8002b40:	10320000 	.word	0x10320000
 8002b44:	10220000 	.word	0x10220000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40010800 	.word	0x40010800
 8002b54:	40010c00 	.word	0x40010c00
 8002b58:	40011000 	.word	0x40011000
 8002b5c:	40011400 	.word	0x40011400
 8002b60:	40010400 	.word	0x40010400

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43d9      	mvns	r1, r3
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	611a      	str	r2, [r3, #16]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fd84 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2500      	movs	r5, #0
 8002bfc:	4e0c      	ldr	r6, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1ba4      	subs	r4, r4, r6
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a5      	cmp	r5, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 f81a 	bl	8002c40 <_init>
 8002c0c:	2500      	movs	r5, #0
 8002c0e:	4e0a      	ldr	r6, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1ba4      	subs	r4, r4, r6
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a5      	cmp	r5, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c20:	4798      	blx	r3
 8002c22:	3501      	adds	r5, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2a:	4798      	blx	r3
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002cd8 	.word	0x08002cd8
 8002c34:	08002cd8 	.word	0x08002cd8
 8002c38:	08002cd8 	.word	0x08002cd8
 8002c3c:	08002cdc 	.word	0x08002cdc

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
