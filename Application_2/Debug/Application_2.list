
Application_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e88  0801010c  0801010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08011f94  08011f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fc4  08011fc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08011fc4  08011fc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011fc4  08011fc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fc4  08011fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fc8  08011fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08011fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08011fd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08011fd8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051cd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c2  00000000  00000000  00025202  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  000264c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00026b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164a6  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004823  00000000  00000000  0003d556  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080687  00000000  00000000  00041d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2400  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001730  00000000  00000000  000c247c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0801010c <__do_global_dtors_aux>:
 801010c:	b510      	push	{r4, lr}
 801010e:	4c05      	ldr	r4, [pc, #20]	; (8010124 <__do_global_dtors_aux+0x18>)
 8010110:	7823      	ldrb	r3, [r4, #0]
 8010112:	b933      	cbnz	r3, 8010122 <__do_global_dtors_aux+0x16>
 8010114:	4b04      	ldr	r3, [pc, #16]	; (8010128 <__do_global_dtors_aux+0x1c>)
 8010116:	b113      	cbz	r3, 801011e <__do_global_dtors_aux+0x12>
 8010118:	4804      	ldr	r0, [pc, #16]	; (801012c <__do_global_dtors_aux+0x20>)
 801011a:	f3af 8000 	nop.w
 801011e:	2301      	movs	r3, #1
 8010120:	7023      	strb	r3, [r4, #0]
 8010122:	bd10      	pop	{r4, pc}
 8010124:	2000000c 	.word	0x2000000c
 8010128:	00000000 	.word	0x00000000
 801012c:	08011f7c 	.word	0x08011f7c

08010130 <frame_dummy>:
 8010130:	b508      	push	{r3, lr}
 8010132:	4b03      	ldr	r3, [pc, #12]	; (8010140 <frame_dummy+0x10>)
 8010134:	b11b      	cbz	r3, 801013e <frame_dummy+0xe>
 8010136:	4903      	ldr	r1, [pc, #12]	; (8010144 <frame_dummy+0x14>)
 8010138:	4803      	ldr	r0, [pc, #12]	; (8010148 <frame_dummy+0x18>)
 801013a:	f3af 8000 	nop.w
 801013e:	bd08      	pop	{r3, pc}
 8010140:	00000000 	.word	0x00000000
 8010144:	20000010 	.word	0x20000010
 8010148:	08011f7c 	.word	0x08011f7c

0801014c <CLCD_Init>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Initialize Character LCD								          */
/*--------------------------------------------------------------------------------*/
void CLCD_Init(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	af00      	add	r7, sp, #0
	/* Set the direction of control pins */
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_E_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8010150:	2202      	movs	r2, #2
 8010152:	2108      	movs	r1, #8
 8010154:	2000      	movs	r0, #0
 8010156:	f000 fa15 	bl	8010584 <GPIO_SetPinMode>
	GPIO_SetPinMode(CLCD_CTRL_PINS_PORT,CLCD_RS_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 801015a:	2202      	movs	r2, #2
 801015c:	2109      	movs	r1, #9
 801015e:	2000      	movs	r0, #0
 8010160:	f000 fa10 	bl	8010584 <GPIO_SetPinMode>

	/* Check Selected CLCD Mode */
	#if CLCD_MODE == FOUR_BIT_MODE

		/* Set the direction of data pins */
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D4_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8010164:	2202      	movs	r2, #2
 8010166:	210f      	movs	r1, #15
 8010168:	2001      	movs	r0, #1
 801016a:	f000 fa0b 	bl	8010584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D5_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 801016e:	2202      	movs	r2, #2
 8010170:	210e      	movs	r1, #14
 8010172:	2001      	movs	r0, #1
 8010174:	f000 fa06 	bl	8010584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D6_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8010178:	2202      	movs	r2, #2
 801017a:	210d      	movs	r1, #13
 801017c:	2001      	movs	r0, #1
 801017e:	f000 fa01 	bl	8010584 <GPIO_SetPinMode>
		GPIO_SetPinMode(CLCD_DATA_PORT,CLCD_D7_PIN,GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL);
 8010182:	2202      	movs	r2, #2
 8010184:	210c      	movs	r1, #12
 8010186:	2001      	movs	r0, #1
 8010188:	f000 f9fc 	bl	8010584 <GPIO_SetPinMode>

		/* Delay for 40 ms */
		SERV_Delay_ms(40);
 801018c:	2028      	movs	r0, #40	; 0x28
 801018e:	f000 fb9f 	bl	80108d0 <SERV_Delay_ms>

		/* Set up CLCD on the 4-bit mode */
		CLCD_SetFourBitMode();
 8010192:	f000 f97f 	bl	8010494 <CLCD_SetFourBitMode>
		#error "Wrong CLCD Mode Configuration"

	#endif

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 8010196:	2001      	movs	r0, #1
 8010198:	f000 fb9a 	bl	80108d0 <SERV_Delay_ms>

	/* Display on CLCD and turn off cursor */
	CLCD_DisplayOnCursorOff();
 801019c:	f000 f981 	bl	80104a2 <CLCD_DisplayOnCursorOff>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 80101a0:	2001      	movs	r0, #1
 80101a2:	f000 fb95 	bl	80108d0 <SERV_Delay_ms>

	/* Clear CLCD */
	CLCD_ClearDisplay();
 80101a6:	f000 f98a 	bl	80104be <CLCD_ClearDisplay>

	/* Delay for 3 ms */
	SERV_Delay_ms(3);
 80101aa:	2003      	movs	r0, #3
 80101ac:	f000 fb90 	bl	80108d0 <SERV_Delay_ms>

	/* Setting up CLCD on entry mode */
	CLCD_SetEntryMode();
 80101b0:	f000 f98c 	bl	80104cc <CLCD_SetEntryMode>

	/* Delay for 1 ms */
	SERV_Delay_ms(1);
 80101b4:	2001      	movs	r0, #1
 80101b6:	f000 fb8b 	bl	80108d0 <SERV_Delay_ms>
}
 80101ba:	bf00      	nop
 80101bc:	bd80      	pop	{r7, pc}

080101be <CLCD_SendCommand>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Send a command to Character LCD controller	                  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_SendCommand(uint8_t Copy_Command)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b086      	sub	sp, #24
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	4603      	mov	r3, r0
 80101c6:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 80101c8:	2300      	movs	r3, #0
 80101ca:	75fb      	strb	r3, [r7, #23]
	uint8_t Local_Bit0 , Local_Bit1 , Local_Bit2 , Local_Bit3 , Local_Bit4 , Local_Bit5 , Local_Bit6 , Local_Bit7;

	/* Check if passed command is valid or not */
	if(Copy_Command == CLCD_FUNCTION_SET_EIGHT_BIT_MODE_CMD || Copy_Command == CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD  ||
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	2b38      	cmp	r3, #56	; 0x38
 80101d0:	d02a      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	2b28      	cmp	r3, #40	; 0x28
 80101d6:	d027      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 80101d8:	79fb      	ldrb	r3, [r7, #7]
 80101da:	2b0c      	cmp	r3, #12
 80101dc:	d024      	beq.n	8010228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_OFF_CMD   	|| Copy_Command == CLCD_DISPLAY_OFF_CURSOR_OFF_CMD    	||
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	2b08      	cmp	r3, #8
 80101e2:	d021      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 80101e4:	79fb      	ldrb	r3, [r7, #7]
 80101e6:	2b0e      	cmp	r3, #14
 80101e8:	d01e      	beq.n	8010228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_DISPLAY_ON_CURSOR_ON_CMD   	    || Copy_Command == CLCD_DISPLAY_OFF_CURSOR_ON_CMD    	||
 80101ea:	79fb      	ldrb	r3, [r7, #7]
 80101ec:	2b0a      	cmp	r3, #10
 80101ee:	d01b      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	2b0f      	cmp	r3, #15
 80101f4:	d018      	beq.n	8010228 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_BLINK_CURSOR_CMD				|| Copy_Command == CLCD_SHIFT_LEFT_CURSOR_CMD			||
 80101f6:	79fb      	ldrb	r3, [r7, #7]
 80101f8:	2b10      	cmp	r3, #16
 80101fa:	d015      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 80101fc:	79fb      	ldrb	r3, [r7, #7]
 80101fe:	2b14      	cmp	r3, #20
 8010200:	d012      	beq.n	8010228 <CLCD_SendCommand+0x6a>
	   Copy_Command == CLCD_SHIFT_RIGHT_CURSOR_CMD			|| Copy_Command == CLCD_SHIFT_LEFT_DISPLAY_CMD			||
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	2b18      	cmp	r3, #24
 8010206:	d00f      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b1c      	cmp	r3, #28
 801020c:	d00c      	beq.n	8010228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_SHIFT_RIGHT_DISPLAY_CMD		    || Copy_Command == CLCD_BEGIN_AT_FIRST_LINE_CMD		    ||
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	2b80      	cmp	r3, #128	; 0x80
 8010212:	d009      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	2bc0      	cmp	r3, #192	; 0xc0
 8010218:	d006      	beq.n	8010228 <CLCD_SendCommand+0x6a>
       Copy_Command == CLCD_BEGIN_AT_SECOND_LINE_CMD		|| Copy_Command == CLCD_DISPLAY_CLEAR_CMD 				||
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d003      	beq.n	8010228 <CLCD_SendCommand+0x6a>
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	2b06      	cmp	r3, #6
 8010224:	f040 8092 	bne.w	801034c <CLCD_SendCommand+0x18e>
       Copy_Command == CLCD_ENTRY_MODE_CMD)
	{
		/* Set RS to LOW to tell CLCD to receive a command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_LOW);
 8010228:	2200      	movs	r2, #0
 801022a:	2109      	movs	r1, #9
 801022c:	2000      	movs	r0, #0
 801022e:	f000 fa97 	bl	8010760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8010232:	2001      	movs	r0, #1
 8010234:	f000 fb4c 	bl	80108d0 <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the command */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8010238:	2200      	movs	r2, #0
 801023a:	2108      	movs	r1, #8
 801023c:	2000      	movs	r0, #0
 801023e:	f000 fa8f 	bl	8010760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8010242:	2001      	movs	r0, #1
 8010244:	f000 fb44 	bl	80108d0 <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get command most significant bits */
			Local_Bit7 = READ_BIT(Copy_Command,7);
 8010248:	79fb      	ldrb	r3, [r7, #7]
 801024a:	09db      	lsrs	r3, r3, #7
 801024c:	75bb      	strb	r3, [r7, #22]
			Local_Bit6 = READ_BIT(Copy_Command,6);
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	099b      	lsrs	r3, r3, #6
 8010252:	b2db      	uxtb	r3, r3
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	757b      	strb	r3, [r7, #21]
			Local_Bit5 = READ_BIT(Copy_Command,5);
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	095b      	lsrs	r3, r3, #5
 801025e:	b2db      	uxtb	r3, r3
 8010260:	f003 0301 	and.w	r3, r3, #1
 8010264:	753b      	strb	r3, [r7, #20]
			Local_Bit4 = READ_BIT(Copy_Command,4);
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	091b      	lsrs	r3, r3, #4
 801026a:	b2db      	uxtb	r3, r3
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	74fb      	strb	r3, [r7, #19]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8010272:	2201      	movs	r2, #1
 8010274:	2108      	movs	r1, #8
 8010276:	2000      	movs	r0, #0
 8010278:	f000 fa72 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 801027c:	2001      	movs	r0, #1
 801027e:	f000 fb27 	bl	80108d0 <SERV_Delay_ms>

			/* Set command most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8010282:	7dbb      	ldrb	r3, [r7, #22]
 8010284:	461a      	mov	r2, r3
 8010286:	210c      	movs	r1, #12
 8010288:	2001      	movs	r0, #1
 801028a:	f000 fa69 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 801028e:	7d7b      	ldrb	r3, [r7, #21]
 8010290:	461a      	mov	r2, r3
 8010292:	210d      	movs	r1, #13
 8010294:	2001      	movs	r0, #1
 8010296:	f000 fa63 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 801029a:	7d3b      	ldrb	r3, [r7, #20]
 801029c:	461a      	mov	r2, r3
 801029e:	210e      	movs	r1, #14
 80102a0:	2001      	movs	r0, #1
 80102a2:	f000 fa5d 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 80102a6:	7cfb      	ldrb	r3, [r7, #19]
 80102a8:	461a      	mov	r2, r3
 80102aa:	210f      	movs	r1, #15
 80102ac:	2001      	movs	r0, #1
 80102ae:	f000 fa57 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80102b2:	2001      	movs	r0, #1
 80102b4:	f000 fb0c 	bl	80108d0 <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 80102b8:	2200      	movs	r2, #0
 80102ba:	2108      	movs	r1, #8
 80102bc:	2000      	movs	r0, #0
 80102be:	f000 fa4f 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80102c2:	2001      	movs	r0, #1
 80102c4:	f000 fb04 	bl	80108d0 <SERV_Delay_ms>

			/* Get command least significant bits */
			Local_Bit3 = READ_BIT(Copy_Command,3);
 80102c8:	79fb      	ldrb	r3, [r7, #7]
 80102ca:	08db      	lsrs	r3, r3, #3
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	74bb      	strb	r3, [r7, #18]
			Local_Bit2 = READ_BIT(Copy_Command,2);
 80102d4:	79fb      	ldrb	r3, [r7, #7]
 80102d6:	089b      	lsrs	r3, r3, #2
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	747b      	strb	r3, [r7, #17]
			Local_Bit1 = READ_BIT(Copy_Command,1);
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	085b      	lsrs	r3, r3, #1
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	f003 0301 	and.w	r3, r3, #1
 80102ea:	743b      	strb	r3, [r7, #16]
			Local_Bit0 = READ_BIT(Copy_Command,0);
 80102ec:	79fb      	ldrb	r3, [r7, #7]
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	73fb      	strb	r3, [r7, #15]

			/* Set E to HIGH tell CLCD to start reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 80102f4:	2201      	movs	r2, #1
 80102f6:	2108      	movs	r1, #8
 80102f8:	2000      	movs	r0, #0
 80102fa:	f000 fa31 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80102fe:	2001      	movs	r0, #1
 8010300:	f000 fae6 	bl	80108d0 <SERV_Delay_ms>

			/* Set command least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit3);
 8010304:	7cbb      	ldrb	r3, [r7, #18]
 8010306:	461a      	mov	r2, r3
 8010308:	210c      	movs	r1, #12
 801030a:	2001      	movs	r0, #1
 801030c:	f000 fa28 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit2);
 8010310:	7c7b      	ldrb	r3, [r7, #17]
 8010312:	461a      	mov	r2, r3
 8010314:	210d      	movs	r1, #13
 8010316:	2001      	movs	r0, #1
 8010318:	f000 fa22 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit1);
 801031c:	7c3b      	ldrb	r3, [r7, #16]
 801031e:	461a      	mov	r2, r3
 8010320:	210e      	movs	r1, #14
 8010322:	2001      	movs	r0, #1
 8010324:	f000 fa1c 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit0);
 8010328:	7bfb      	ldrb	r3, [r7, #15]
 801032a:	461a      	mov	r2, r3
 801032c:	210f      	movs	r1, #15
 801032e:	2001      	movs	r0, #1
 8010330:	f000 fa16 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8010334:	2001      	movs	r0, #1
 8010336:	f000 facb 	bl	80108d0 <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the command */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 801033a:	2200      	movs	r2, #0
 801033c:	2108      	movs	r1, #8
 801033e:	2000      	movs	r0, #0
 8010340:	f000 fa0e 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8010344:	2002      	movs	r0, #2
 8010346:	f000 fac3 	bl	80108d0 <SERV_Delay_ms>
 801034a:	e001      	b.n	8010350 <CLCD_SendCommand+0x192>

	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 801034c:	2301      	movs	r3, #1
 801034e:	75fb      	strb	r3, [r7, #23]
	}

	return Local_Status;
 8010350:	7dfb      	ldrb	r3, [r7, #23]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <CLCD_WriteCharacter>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a character on Character CLCD		                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteCharacter(uint8_t Copy_Character)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	4603      	mov	r3, r0
 8010362:	71fb      	strb	r3, [r7, #7]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 8010364:	2300      	movs	r3, #0
 8010366:	73fb      	strb	r3, [r7, #15]

	/* Check if passed command is valid or not */
	if(Copy_Character >= 0 && Copy_Character <= 255)
	{
		/* Set RS to HIGH to tell CLCD to receive character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_RS_PIN , GPIO_PIN_HIGH);
 8010368:	2201      	movs	r2, #1
 801036a:	2109      	movs	r1, #9
 801036c:	2000      	movs	r0, #0
 801036e:	f000 f9f7 	bl	8010760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8010372:	2001      	movs	r0, #1
 8010374:	f000 faac 	bl	80108d0 <SERV_Delay_ms>

		/* Set E to LOW tell CLCD to stop reading the character */
		GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 8010378:	2200      	movs	r2, #0
 801037a:	2108      	movs	r1, #8
 801037c:	2000      	movs	r0, #0
 801037e:	f000 f9ef 	bl	8010760 <GPIO_SetPinVal>

		/* Delay for 1 ms */
		SERV_Delay_ms(1);
 8010382:	2001      	movs	r0, #1
 8010384:	f000 faa4 	bl	80108d0 <SERV_Delay_ms>

		/* Check Selected CLCD Mode */
		#if CLCD_MODE == FOUR_BIT_MODE

			/* Get character most significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,7);
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	09db      	lsrs	r3, r3, #7
 801038c:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,6);
 801038e:	79fb      	ldrb	r3, [r7, #7]
 8010390:	099b      	lsrs	r3, r3, #6
 8010392:	b2db      	uxtb	r3, r3
 8010394:	f003 0301 	and.w	r3, r3, #1
 8010398:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,5);
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	095b      	lsrs	r3, r3, #5
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,4);
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	091b      	lsrs	r3, r3, #4
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 80103b2:	2201      	movs	r2, #1
 80103b4:	2108      	movs	r1, #8
 80103b6:	2000      	movs	r0, #0
 80103b8:	f000 f9d2 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80103bc:	2001      	movs	r0, #1
 80103be:	f000 fa87 	bl	80108d0 <SERV_Delay_ms>

			/* Set character most significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 80103c2:	7bbb      	ldrb	r3, [r7, #14]
 80103c4:	461a      	mov	r2, r3
 80103c6:	210c      	movs	r1, #12
 80103c8:	2001      	movs	r0, #1
 80103ca:	f000 f9c9 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 80103ce:	7b7b      	ldrb	r3, [r7, #13]
 80103d0:	461a      	mov	r2, r3
 80103d2:	210d      	movs	r1, #13
 80103d4:	2001      	movs	r0, #1
 80103d6:	f000 f9c3 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 80103da:	7b3b      	ldrb	r3, [r7, #12]
 80103dc:	461a      	mov	r2, r3
 80103de:	210e      	movs	r1, #14
 80103e0:	2001      	movs	r0, #1
 80103e2:	f000 f9bd 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 80103e6:	7afb      	ldrb	r3, [r7, #11]
 80103e8:	461a      	mov	r2, r3
 80103ea:	210f      	movs	r1, #15
 80103ec:	2001      	movs	r0, #1
 80103ee:	f000 f9b7 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 80103f2:	2001      	movs	r0, #1
 80103f4:	f000 fa6c 	bl	80108d0 <SERV_Delay_ms>

			/* Set E to LOW tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 80103f8:	2200      	movs	r2, #0
 80103fa:	2108      	movs	r1, #8
 80103fc:	2000      	movs	r0, #0
 80103fe:	f000 f9af 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8010402:	2001      	movs	r0, #1
 8010404:	f000 fa64 	bl	80108d0 <SERV_Delay_ms>

			/* Get character least significant bits */
			Local_Bit7 = READ_BIT(Copy_Character,3);
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	08db      	lsrs	r3, r3, #3
 801040c:	b2db      	uxtb	r3, r3
 801040e:	f003 0301 	and.w	r3, r3, #1
 8010412:	73bb      	strb	r3, [r7, #14]
			Local_Bit6 = READ_BIT(Copy_Character,2);
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	089b      	lsrs	r3, r3, #2
 8010418:	b2db      	uxtb	r3, r3
 801041a:	f003 0301 	and.w	r3, r3, #1
 801041e:	737b      	strb	r3, [r7, #13]
			Local_Bit5 = READ_BIT(Copy_Character,1);
 8010420:	79fb      	ldrb	r3, [r7, #7]
 8010422:	085b      	lsrs	r3, r3, #1
 8010424:	b2db      	uxtb	r3, r3
 8010426:	f003 0301 	and.w	r3, r3, #1
 801042a:	733b      	strb	r3, [r7, #12]
			Local_Bit4 = READ_BIT(Copy_Character,0);
 801042c:	79fb      	ldrb	r3, [r7, #7]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	72fb      	strb	r3, [r7, #11]

			/* Set E to HIGH tell CLCD to start reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_HIGH);
 8010434:	2201      	movs	r2, #1
 8010436:	2108      	movs	r1, #8
 8010438:	2000      	movs	r0, #0
 801043a:	f000 f991 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 801043e:	2001      	movs	r0, #1
 8010440:	f000 fa46 	bl	80108d0 <SERV_Delay_ms>

			/* Set character least significant bits on CLCD data port */
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D7_PIN,Local_Bit7);
 8010444:	7bbb      	ldrb	r3, [r7, #14]
 8010446:	461a      	mov	r2, r3
 8010448:	210c      	movs	r1, #12
 801044a:	2001      	movs	r0, #1
 801044c:	f000 f988 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D6_PIN,Local_Bit6);
 8010450:	7b7b      	ldrb	r3, [r7, #13]
 8010452:	461a      	mov	r2, r3
 8010454:	210d      	movs	r1, #13
 8010456:	2001      	movs	r0, #1
 8010458:	f000 f982 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D5_PIN,Local_Bit5);
 801045c:	7b3b      	ldrb	r3, [r7, #12]
 801045e:	461a      	mov	r2, r3
 8010460:	210e      	movs	r1, #14
 8010462:	2001      	movs	r0, #1
 8010464:	f000 f97c 	bl	8010760 <GPIO_SetPinVal>
			GPIO_SetPinVal(CLCD_DATA_PORT,CLCD_D4_PIN,Local_Bit4);
 8010468:	7afb      	ldrb	r3, [r7, #11]
 801046a:	461a      	mov	r2, r3
 801046c:	210f      	movs	r1, #15
 801046e:	2001      	movs	r0, #1
 8010470:	f000 f976 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 1 ms */
			SERV_Delay_ms(1);
 8010474:	2001      	movs	r0, #1
 8010476:	f000 fa2b 	bl	80108d0 <SERV_Delay_ms>

			/* Clear E to tell CLCD to stop reading the character */
			GPIO_SetPinVal(CLCD_CTRL_PINS_PORT , CLCD_E_PIN , GPIO_PIN_LOW);
 801047a:	2200      	movs	r2, #0
 801047c:	2108      	movs	r1, #8
 801047e:	2000      	movs	r0, #0
 8010480:	f000 f96e 	bl	8010760 <GPIO_SetPinVal>

			/* Delay for 2 ms */
			SERV_Delay_ms(2);
 8010484:	2002      	movs	r0, #2
 8010486:	f000 fa23 	bl	80108d0 <SERV_Delay_ms>
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
	}

	return Local_Status;
 801048a:	7bfb      	ldrb	r3, [r7, #15]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <CLCD_SetFourBitMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up Character LCD on 4-bit mode							  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetFourBitMode(void)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_FUNCTION_SET_FOUR_BIT_MODE_CMD);
 8010498:	2028      	movs	r0, #40	; 0x28
 801049a:	f7ff fe90 	bl	80101be <CLCD_SendCommand>
}
 801049e:	bf00      	nop
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <CLCD_DisplayOnCursorOff>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Turn on display and turn off cursor							  */
/*--------------------------------------------------------------------------------*/
void CLCD_DisplayOnCursorOff(void)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	af00      	add	r7, sp, #0
	 CLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF_CMD);
 80104a6:	200c      	movs	r0, #12
 80104a8:	f7ff fe89 	bl	80101be <CLCD_SendCommand>
}
 80104ac:	bf00      	nop
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <CLCD_BeginAtSecondLine>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Force cursor to be at the beginning of the second line		  */
/*--------------------------------------------------------------------------------*/
void CLCD_BeginAtSecondLine(void)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_BEGIN_AT_SECOND_LINE_CMD);
 80104b4:	20c0      	movs	r0, #192	; 0xc0
 80104b6:	f7ff fe82 	bl	80101be <CLCD_SendCommand>
}
 80104ba:	bf00      	nop
 80104bc:	bd80      	pop	{r7, pc}

080104be <CLCD_ClearDisplay>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Clear the entire display of character LCD		 			  */
/*--------------------------------------------------------------------------------*/
void CLCD_ClearDisplay(void)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_DISPLAY_CLEAR_CMD);
 80104c2:	2001      	movs	r0, #1
 80104c4:	f7ff fe7b 	bl	80101be <CLCD_SendCommand>
}
 80104c8:	bf00      	nop
 80104ca:	bd80      	pop	{r7, pc}

080104cc <CLCD_SetEntryMode>:
/* @Return		 : void                                          				  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Set up character LCD to operate on the entry mode		 	  */
/*--------------------------------------------------------------------------------*/
void CLCD_SetEntryMode(void)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	af00      	add	r7, sp, #0
	CLCD_SendCommand(CLCD_ENTRY_MODE_CMD);
 80104d0:	2006      	movs	r0, #6
 80104d2:	f7ff fe74 	bl	80101be <CLCD_SendCommand>
}
 80104d6:	bf00      	nop
 80104d8:	bd80      	pop	{r7, pc}

080104da <CLCD_WriteString>:
/* @Return		 : ERROR_STATUS_t                                          		  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Write a string on the Character LCD display      		 	  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_WriteString(uint8_t* Copy_pString)
{
 80104da:	b580      	push	{r7, lr}
 80104dc:	b084      	sub	sp, #16
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 80104e2:	2300      	movs	r3, #0
 80104e4:	73fb      	strb	r3, [r7, #15]
	uint32_t Local_CharacterCounter = 0 ;
 80104e6:	2300      	movs	r3, #0
 80104e8:	60bb      	str	r3, [r7, #8]

	/* Check if passed pointer is NULL pointer or not */
	if(Copy_pString != NULL)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d016      	beq.n	801051e <CLCD_WriteString+0x44>
	{
		/* Write the passed string on the CLCD display */
		while(Copy_pString[Local_CharacterCounter] != '\0')
 80104f0:	e00e      	b.n	8010510 <CLCD_WriteString+0x36>
		{
			/* Write a character */
			CLCD_WriteCharacter(Copy_pString[Local_CharacterCounter]);
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	4413      	add	r3, r2
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff ff2d 	bl	801035a <CLCD_WriteCharacter>

			/* Increment the character counter */
			Local_CharacterCounter++;
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	3301      	adds	r3, #1
 8010504:	60bb      	str	r3, [r7, #8]

			/* Check if the character counter reached 16 or not */
			if(Local_CharacterCounter == 20)
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b14      	cmp	r3, #20
 801050a:	d101      	bne.n	8010510 <CLCD_WriteString+0x36>
			{
				/* Force CLCD cursor to begin at second line */
				CLCD_BeginAtSecondLine();
 801050c:	f7ff ffd0 	bl	80104b0 <CLCD_BeginAtSecondLine>
		while(Copy_pString[Local_CharacterCounter] != '\0')
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4413      	add	r3, r2
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1ea      	bne.n	80104f2 <CLCD_WriteString+0x18>
 801051c:	e001      	b.n	8010522 <CLCD_WriteString+0x48>
		}
	}
	else
	{
		/* Passed pointer is NULL pointer */
		Local_Status = NULL_POINTER;
 801051e:	2302      	movs	r3, #2
 8010520:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8010522:	7bfb      	ldrb	r3, [r7, #15]
}
 8010524:	4618      	mov	r0, r3
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <CLCD_MoveCursor>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : Put the cursor at a specific location (segment) on the         */
/*                 character LCD display					                      */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t CLCD_MoveCursor(uint8_t Copy_RowNumber , uint8_t Copy_ColumnNumber)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	4603      	mov	r3, r0
 8010534:	460a      	mov	r2, r1
 8010536:	71fb      	strb	r3, [r7, #7]
 8010538:	4613      	mov	r3, r2
 801053a:	71bb      	strb	r3, [r7, #6]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK ;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed column number is within valid range or not */
	if((Copy_ColumnNumber >= 0) && (Copy_ColumnNumber <= 19))
 8010540:	79bb      	ldrb	r3, [r7, #6]
 8010542:	2b13      	cmp	r3, #19
 8010544:	d816      	bhi.n	8010574 <CLCD_MoveCursor+0x48>
	{
		switch(Copy_RowNumber)
 8010546:	79fb      	ldrb	r3, [r7, #7]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d002      	beq.n	8010552 <CLCD_MoveCursor+0x26>
 801054c:	2b01      	cmp	r3, #1
 801054e:	d007      	beq.n	8010560 <CLCD_MoveCursor+0x34>
 8010550:	e00d      	b.n	801056e <CLCD_MoveCursor+0x42>
		{
			case 0:

				/* Move the cursor to desired cell number on row 0 */
				CLCD_SendCommand(Copy_ColumnNumber+0x80);
 8010552:	79bb      	ldrb	r3, [r7, #6]
 8010554:	3b80      	subs	r3, #128	; 0x80
 8010556:	b2db      	uxtb	r3, r3
 8010558:	4618      	mov	r0, r3
 801055a:	f7ff fe30 	bl	80101be <CLCD_SendCommand>
				break;
 801055e:	e00b      	b.n	8010578 <CLCD_MoveCursor+0x4c>

			case 1:

				/* Move the cursor to desired cell number on row 1 */
				CLCD_SendCommand(Copy_ColumnNumber+0xC0);
 8010560:	79bb      	ldrb	r3, [r7, #6]
 8010562:	3b40      	subs	r3, #64	; 0x40
 8010564:	b2db      	uxtb	r3, r3
 8010566:	4618      	mov	r0, r3
 8010568:	f7ff fe29 	bl	80101be <CLCD_SendCommand>
				break;
 801056c:	e004      	b.n	8010578 <CLCD_MoveCursor+0x4c>

			default:

				/* Function is not behaving as expected */
				Local_Status = RT_NOK;
 801056e:	2301      	movs	r3, #1
 8010570:	73fb      	strb	r3, [r7, #15]
 8010572:	e001      	b.n	8010578 <CLCD_MoveCursor+0x4c>
		}
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8010574:	2301      	movs	r3, #1
 8010576:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status ;
 8010578:	7bfb      	ldrb	r3, [r7, #15]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
	...

08010584 <GPIO_SetPinMode>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets the mode of operation of GPIO pin                         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinMode(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Mode)
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	4603      	mov	r3, r0
 801058c:	71fb      	strb	r3, [r7, #7]
 801058e:	460b      	mov	r3, r1
 8010590:	71bb      	strb	r3, [r7, #6]
 8010592:	4613      	mov	r3, r2
 8010594:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and mode are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 801059a:	79fb      	ldrb	r3, [r7, #7]
 801059c:	2b02      	cmp	r3, #2
 801059e:	f200 80d0 	bhi.w	8010742 <GPIO_SetPinMode+0x1be>
 80105a2:	79bb      	ldrb	r3, [r7, #6]
 80105a4:	2b0f      	cmp	r3, #15
 80105a6:	f200 80cc 	bhi.w	8010742 <GPIO_SetPinMode+0x1be>
 80105aa:	797b      	ldrb	r3, [r7, #5]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d02a      	beq.n	8010606 <GPIO_SetPinMode+0x82>
	   (Copy_Mode == GPIO_PIN_INPUT_ANALOG || Copy_Mode == GPIO_PIN_INPUT_FLOATING || Copy_Mode == GPIO_PIN_INPUT_PULLUP_PULLDOWN ||
 80105b0:	797b      	ldrb	r3, [r7, #5]
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	d027      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105b6:	797b      	ldrb	r3, [r7, #5]
 80105b8:	2b08      	cmp	r3, #8
 80105ba:	d024      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105bc:	797b      	ldrb	r3, [r7, #5]
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d021      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_OPENDRAIN    ||
 80105c2:	797b      	ldrb	r3, [r7, #5]
 80105c4:	2b05      	cmp	r3, #5
 80105c6:	d01e      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105c8:	797b      	ldrb	r3, [r7, #5]
 80105ca:	2b09      	cmp	r3, #9
 80105cc:	d01b      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_10MHZ_AF_OPENDRAIN ||
 80105ce:	797b      	ldrb	r3, [r7, #5]
 80105d0:	2b0d      	cmp	r3, #13
 80105d2:	d018      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105d4:	797b      	ldrb	r3, [r7, #5]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	d015      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_PUSHPULL     || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_OPENDRAIN     ||
 80105da:	797b      	ldrb	r3, [r7, #5]
 80105dc:	2b06      	cmp	r3, #6
 80105de:	d012      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105e0:	797b      	ldrb	r3, [r7, #5]
 80105e2:	2b0a      	cmp	r3, #10
 80105e4:	d00f      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_PUSHPULL  || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_2MHZ_AF_OPENDRAIN  ||
 80105e6:	797b      	ldrb	r3, [r7, #5]
 80105e8:	2b0e      	cmp	r3, #14
 80105ea:	d00c      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105ec:	797b      	ldrb	r3, [r7, #5]
 80105ee:	2b03      	cmp	r3, #3
 80105f0:	d009      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_PUSHPULL    || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_OPENDRAIN    ||
 80105f2:	797b      	ldrb	r3, [r7, #5]
 80105f4:	2b07      	cmp	r3, #7
 80105f6:	d006      	beq.n	8010606 <GPIO_SetPinMode+0x82>
 80105f8:	797b      	ldrb	r3, [r7, #5]
 80105fa:	2b0b      	cmp	r3, #11
 80105fc:	d003      	beq.n	8010606 <GPIO_SetPinMode+0x82>
		Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_PUSHPULL || Copy_Mode == GPIO_PIN_OUTPUT_SPEED_50MHZ_AF_OPENDRAIN))
 80105fe:	797b      	ldrb	r3, [r7, #5]
 8010600:	2b0f      	cmp	r3, #15
 8010602:	f040 809e 	bne.w	8010742 <GPIO_SetPinMode+0x1be>
	{
		/* Check port number */
		switch(Copy_Port)
 8010606:	79fb      	ldrb	r3, [r7, #7]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d03c      	beq.n	8010686 <GPIO_SetPinMode+0x102>
 801060c:	2b02      	cmp	r3, #2
 801060e:	d072      	beq.n	80106f6 <GPIO_SetPinMode+0x172>
 8010610:	2b00      	cmp	r3, #0
 8010612:	d000      	beq.n	8010616 <GPIO_SetPinMode+0x92>
					/* Set the four bits of mode concerned with the pin in CRH register */
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
				}
				break;
		}
	}
 8010614:	e097      	b.n	8010746 <GPIO_SetPinMode+0x1c2>
				if(Copy_Pin < 8)
 8010616:	79bb      	ldrb	r3, [r7, #6]
 8010618:	2b07      	cmp	r3, #7
 801061a:	d817      	bhi.n	801064c <GPIO_SetPinMode+0xc8>
					GPIOA->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 801061c:	4b4d      	ldr	r3, [pc, #308]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	79ba      	ldrb	r2, [r7, #6]
 8010622:	0092      	lsls	r2, r2, #2
 8010624:	210f      	movs	r1, #15
 8010626:	fa01 f202 	lsl.w	r2, r1, r2
 801062a:	43d2      	mvns	r2, r2
 801062c:	4611      	mov	r1, r2
 801062e:	4a49      	ldr	r2, [pc, #292]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010630:	400b      	ands	r3, r1
 8010632:	6013      	str	r3, [r2, #0]
					GPIOA->CRL |= (Copy_Mode << (4*Copy_Pin));
 8010634:	4b47      	ldr	r3, [pc, #284]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	7979      	ldrb	r1, [r7, #5]
 801063a:	79ba      	ldrb	r2, [r7, #6]
 801063c:	0092      	lsls	r2, r2, #2
 801063e:	fa01 f202 	lsl.w	r2, r1, r2
 8010642:	4611      	mov	r1, r2
 8010644:	4a43      	ldr	r2, [pc, #268]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010646:	430b      	orrs	r3, r1
 8010648:	6013      	str	r3, [r2, #0]
				break;
 801064a:	e074      	b.n	8010736 <GPIO_SetPinMode+0x1b2>
				else if(Copy_Pin < 16)
 801064c:	79bb      	ldrb	r3, [r7, #6]
 801064e:	2b0f      	cmp	r3, #15
 8010650:	d871      	bhi.n	8010736 <GPIO_SetPinMode+0x1b2>
					GPIOA->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8010652:	4b40      	ldr	r3, [pc, #256]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	79ba      	ldrb	r2, [r7, #6]
 8010658:	3a08      	subs	r2, #8
 801065a:	0092      	lsls	r2, r2, #2
 801065c:	210f      	movs	r1, #15
 801065e:	fa01 f202 	lsl.w	r2, r1, r2
 8010662:	43d2      	mvns	r2, r2
 8010664:	4611      	mov	r1, r2
 8010666:	4a3b      	ldr	r2, [pc, #236]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010668:	400b      	ands	r3, r1
 801066a:	6053      	str	r3, [r2, #4]
					GPIOA->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 801066c:	4b39      	ldr	r3, [pc, #228]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	7979      	ldrb	r1, [r7, #5]
 8010672:	79ba      	ldrb	r2, [r7, #6]
 8010674:	3a08      	subs	r2, #8
 8010676:	0092      	lsls	r2, r2, #2
 8010678:	fa01 f202 	lsl.w	r2, r1, r2
 801067c:	4611      	mov	r1, r2
 801067e:	4a35      	ldr	r2, [pc, #212]	; (8010754 <GPIO_SetPinMode+0x1d0>)
 8010680:	430b      	orrs	r3, r1
 8010682:	6053      	str	r3, [r2, #4]
				break;
 8010684:	e057      	b.n	8010736 <GPIO_SetPinMode+0x1b2>
				if(Copy_Pin < 8)
 8010686:	79bb      	ldrb	r3, [r7, #6]
 8010688:	2b07      	cmp	r3, #7
 801068a:	d817      	bhi.n	80106bc <GPIO_SetPinMode+0x138>
					GPIOB->CRL &= ~(GPIO_PIN_MODE_MASK << (4*Copy_Pin));
 801068c:	4b32      	ldr	r3, [pc, #200]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	79ba      	ldrb	r2, [r7, #6]
 8010692:	0092      	lsls	r2, r2, #2
 8010694:	210f      	movs	r1, #15
 8010696:	fa01 f202 	lsl.w	r2, r1, r2
 801069a:	43d2      	mvns	r2, r2
 801069c:	4611      	mov	r1, r2
 801069e:	4a2e      	ldr	r2, [pc, #184]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106a0:	400b      	ands	r3, r1
 80106a2:	6013      	str	r3, [r2, #0]
					GPIOB->CRL |= (Copy_Mode << (4*Copy_Pin));
 80106a4:	4b2c      	ldr	r3, [pc, #176]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	7979      	ldrb	r1, [r7, #5]
 80106aa:	79ba      	ldrb	r2, [r7, #6]
 80106ac:	0092      	lsls	r2, r2, #2
 80106ae:	fa01 f202 	lsl.w	r2, r1, r2
 80106b2:	4611      	mov	r1, r2
 80106b4:	4a28      	ldr	r2, [pc, #160]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106b6:	430b      	orrs	r3, r1
 80106b8:	6013      	str	r3, [r2, #0]
				break;
 80106ba:	e03e      	b.n	801073a <GPIO_SetPinMode+0x1b6>
				else if(Copy_Pin < 16)
 80106bc:	79bb      	ldrb	r3, [r7, #6]
 80106be:	2b0f      	cmp	r3, #15
 80106c0:	d83b      	bhi.n	801073a <GPIO_SetPinMode+0x1b6>
					GPIOB->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 80106c2:	4b25      	ldr	r3, [pc, #148]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	79ba      	ldrb	r2, [r7, #6]
 80106c8:	3a08      	subs	r2, #8
 80106ca:	0092      	lsls	r2, r2, #2
 80106cc:	210f      	movs	r1, #15
 80106ce:	fa01 f202 	lsl.w	r2, r1, r2
 80106d2:	43d2      	mvns	r2, r2
 80106d4:	4611      	mov	r1, r2
 80106d6:	4a20      	ldr	r2, [pc, #128]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106d8:	400b      	ands	r3, r1
 80106da:	6053      	str	r3, [r2, #4]
					GPIOB->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 80106dc:	4b1e      	ldr	r3, [pc, #120]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	7979      	ldrb	r1, [r7, #5]
 80106e2:	79ba      	ldrb	r2, [r7, #6]
 80106e4:	3a08      	subs	r2, #8
 80106e6:	0092      	lsls	r2, r2, #2
 80106e8:	fa01 f202 	lsl.w	r2, r1, r2
 80106ec:	4611      	mov	r1, r2
 80106ee:	4a1a      	ldr	r2, [pc, #104]	; (8010758 <GPIO_SetPinMode+0x1d4>)
 80106f0:	430b      	orrs	r3, r1
 80106f2:	6053      	str	r3, [r2, #4]
				break;
 80106f4:	e021      	b.n	801073a <GPIO_SetPinMode+0x1b6>
				if(Copy_Pin >= 13 && Copy_Pin <= 15)
 80106f6:	79bb      	ldrb	r3, [r7, #6]
 80106f8:	2b0c      	cmp	r3, #12
 80106fa:	d920      	bls.n	801073e <GPIO_SetPinMode+0x1ba>
 80106fc:	79bb      	ldrb	r3, [r7, #6]
 80106fe:	2b0f      	cmp	r3, #15
 8010700:	d81d      	bhi.n	801073e <GPIO_SetPinMode+0x1ba>
					GPIOC->CRH &= ~(GPIO_PIN_MODE_MASK << (4*(Copy_Pin-8)));
 8010702:	4b16      	ldr	r3, [pc, #88]	; (801075c <GPIO_SetPinMode+0x1d8>)
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	79ba      	ldrb	r2, [r7, #6]
 8010708:	3a08      	subs	r2, #8
 801070a:	0092      	lsls	r2, r2, #2
 801070c:	210f      	movs	r1, #15
 801070e:	fa01 f202 	lsl.w	r2, r1, r2
 8010712:	43d2      	mvns	r2, r2
 8010714:	4611      	mov	r1, r2
 8010716:	4a11      	ldr	r2, [pc, #68]	; (801075c <GPIO_SetPinMode+0x1d8>)
 8010718:	400b      	ands	r3, r1
 801071a:	6053      	str	r3, [r2, #4]
					GPIOC->CRH |= (Copy_Mode << (4*(Copy_Pin-8)));
 801071c:	4b0f      	ldr	r3, [pc, #60]	; (801075c <GPIO_SetPinMode+0x1d8>)
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	7979      	ldrb	r1, [r7, #5]
 8010722:	79ba      	ldrb	r2, [r7, #6]
 8010724:	3a08      	subs	r2, #8
 8010726:	0092      	lsls	r2, r2, #2
 8010728:	fa01 f202 	lsl.w	r2, r1, r2
 801072c:	4611      	mov	r1, r2
 801072e:	4a0b      	ldr	r2, [pc, #44]	; (801075c <GPIO_SetPinMode+0x1d8>)
 8010730:	430b      	orrs	r3, r1
 8010732:	6053      	str	r3, [r2, #4]
				break;
 8010734:	e003      	b.n	801073e <GPIO_SetPinMode+0x1ba>
				break;
 8010736:	bf00      	nop
 8010738:	e005      	b.n	8010746 <GPIO_SetPinMode+0x1c2>
				break;
 801073a:	bf00      	nop
 801073c:	e003      	b.n	8010746 <GPIO_SetPinMode+0x1c2>
				break;
 801073e:	bf00      	nop
	}
 8010740:	e001      	b.n	8010746 <GPIO_SetPinMode+0x1c2>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8010742:	2301      	movs	r3, #1
 8010744:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 8010746:	7bfb      	ldrb	r3, [r7, #15]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3714      	adds	r7, #20
 801074c:	46bd      	mov	sp, r7
 801074e:	bc80      	pop	{r7}
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	40010800 	.word	0x40010800
 8010758:	40010c00 	.word	0x40010c00
 801075c:	40011000 	.word	0x40011000

08010760 <GPIO_SetPinVal>:
/* @Return		 : ERROR_STATUS_t												  */
/*--------------------------------------------------------------------------------*/
/* @Description	 : Sets a value (Logical High or Logical Low) on GPIO pin         */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t GPIO_SetPinVal(uint8_t Copy_Port , uint8_t Copy_Pin , uint8_t Copy_Value)
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	71fb      	strb	r3, [r7, #7]
 801076a:	460b      	mov	r3, r1
 801076c:	71bb      	strb	r3, [r7, #6]
 801076e:	4613      	mov	r3, r2
 8010770:	717b      	strb	r3, [r7, #5]
	/* Local Variables Definitions */
	ERROR_STATUS_t Local_Status = RT_OK;
 8010772:	2300      	movs	r3, #0
 8010774:	73fb      	strb	r3, [r7, #15]

	/* Check if passed port, pin and value are valid or not */
	if((Copy_Port >= GPIO_PORT_A && Copy_Port <= GPIO_PORT_C) && (Copy_Pin >= GPIO_PIN_0 && Copy_Pin <= GPIO_PIN_15) &&
 8010776:	79fb      	ldrb	r3, [r7, #7]
 8010778:	2b02      	cmp	r3, #2
 801077a:	d87c      	bhi.n	8010876 <GPIO_SetPinVal+0x116>
 801077c:	79bb      	ldrb	r3, [r7, #6]
 801077e:	2b0f      	cmp	r3, #15
 8010780:	d879      	bhi.n	8010876 <GPIO_SetPinVal+0x116>
 8010782:	797b      	ldrb	r3, [r7, #5]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d00e      	beq.n	80107a6 <GPIO_SetPinVal+0x46>
	   (Copy_Value == GPIO_PIN_HIGH   ||  Copy_Value == GPIO_PIN_LOW    || Copy_Value == GPIO_PIN_OD_HIGH ||
 8010788:	797b      	ldrb	r3, [r7, #5]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00b      	beq.n	80107a6 <GPIO_SetPinVal+0x46>
 801078e:	797b      	ldrb	r3, [r7, #5]
 8010790:	2b01      	cmp	r3, #1
 8010792:	d008      	beq.n	80107a6 <GPIO_SetPinVal+0x46>
 8010794:	797b      	ldrb	r3, [r7, #5]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d005      	beq.n	80107a6 <GPIO_SetPinVal+0x46>
	    Copy_Value == GPIO_PIN_OD_LOW ||  Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_PULLDOWN))
 801079a:	797b      	ldrb	r3, [r7, #5]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d002      	beq.n	80107a6 <GPIO_SetPinVal+0x46>
 80107a0:	797b      	ldrb	r3, [r7, #5]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d167      	bne.n	8010876 <GPIO_SetPinVal+0x116>
	{
			/* Check port number */
			switch(Copy_Port)
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d022      	beq.n	80107f2 <GPIO_SetPinVal+0x92>
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d03e      	beq.n	801082e <GPIO_SetPinVal+0xce>
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d000      	beq.n	80107b6 <GPIO_SetPinVal+0x56>
						/* Set pin in BRR register */
						GPIOC->BRR = (1 << Copy_Pin);
					}
					break;
			}
	}
 80107b4:	e061      	b.n	801087a <GPIO_SetPinVal+0x11a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 80107b6:	797b      	ldrb	r3, [r7, #5]
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d005      	beq.n	80107c8 <GPIO_SetPinVal+0x68>
 80107bc:	797b      	ldrb	r3, [r7, #5]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d002      	beq.n	80107c8 <GPIO_SetPinVal+0x68>
 80107c2:	797b      	ldrb	r3, [r7, #5]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d105      	bne.n	80107d4 <GPIO_SetPinVal+0x74>
						GPIOA->BSRR = (1 << Copy_Pin);
 80107c8:	79bb      	ldrb	r3, [r7, #6]
 80107ca:	2201      	movs	r2, #1
 80107cc:	409a      	lsls	r2, r3
 80107ce:	4b2e      	ldr	r3, [pc, #184]	; (8010888 <GPIO_SetPinVal+0x128>)
 80107d0:	611a      	str	r2, [r3, #16]
					break;
 80107d2:	e04a      	b.n	801086a <GPIO_SetPinVal+0x10a>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 80107d4:	797b      	ldrb	r3, [r7, #5]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d005      	beq.n	80107e6 <GPIO_SetPinVal+0x86>
 80107da:	797b      	ldrb	r3, [r7, #5]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <GPIO_SetPinVal+0x86>
 80107e0:	797b      	ldrb	r3, [r7, #5]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d141      	bne.n	801086a <GPIO_SetPinVal+0x10a>
						GPIOA->BRR = (1 << Copy_Pin);
 80107e6:	79bb      	ldrb	r3, [r7, #6]
 80107e8:	2201      	movs	r2, #1
 80107ea:	409a      	lsls	r2, r3
 80107ec:	4b26      	ldr	r3, [pc, #152]	; (8010888 <GPIO_SetPinVal+0x128>)
 80107ee:	615a      	str	r2, [r3, #20]
					break;
 80107f0:	e03b      	b.n	801086a <GPIO_SetPinVal+0x10a>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 80107f2:	797b      	ldrb	r3, [r7, #5]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d005      	beq.n	8010804 <GPIO_SetPinVal+0xa4>
 80107f8:	797b      	ldrb	r3, [r7, #5]
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d002      	beq.n	8010804 <GPIO_SetPinVal+0xa4>
 80107fe:	797b      	ldrb	r3, [r7, #5]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d105      	bne.n	8010810 <GPIO_SetPinVal+0xb0>
						GPIOB->BSRR = (1 << Copy_Pin);
 8010804:	79bb      	ldrb	r3, [r7, #6]
 8010806:	2201      	movs	r2, #1
 8010808:	409a      	lsls	r2, r3
 801080a:	4b20      	ldr	r3, [pc, #128]	; (801088c <GPIO_SetPinVal+0x12c>)
 801080c:	611a      	str	r2, [r3, #16]
					break;
 801080e:	e02e      	b.n	801086e <GPIO_SetPinVal+0x10e>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 8010810:	797b      	ldrb	r3, [r7, #5]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d005      	beq.n	8010822 <GPIO_SetPinVal+0xc2>
 8010816:	797b      	ldrb	r3, [r7, #5]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <GPIO_SetPinVal+0xc2>
 801081c:	797b      	ldrb	r3, [r7, #5]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d125      	bne.n	801086e <GPIO_SetPinVal+0x10e>
						GPIOB->BRR = (1 << Copy_Pin);
 8010822:	79bb      	ldrb	r3, [r7, #6]
 8010824:	2201      	movs	r2, #1
 8010826:	409a      	lsls	r2, r3
 8010828:	4b18      	ldr	r3, [pc, #96]	; (801088c <GPIO_SetPinVal+0x12c>)
 801082a:	615a      	str	r2, [r3, #20]
					break;
 801082c:	e01f      	b.n	801086e <GPIO_SetPinVal+0x10e>
					if(Copy_Value == GPIO_PIN_HIGH || Copy_Value == GPIO_PIN_PULLUP || Copy_Value == GPIO_PIN_OD_HIGH)
 801082e:	797b      	ldrb	r3, [r7, #5]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d005      	beq.n	8010840 <GPIO_SetPinVal+0xe0>
 8010834:	797b      	ldrb	r3, [r7, #5]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d002      	beq.n	8010840 <GPIO_SetPinVal+0xe0>
 801083a:	797b      	ldrb	r3, [r7, #5]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d105      	bne.n	801084c <GPIO_SetPinVal+0xec>
						GPIOC->BSRR = (1 << Copy_Pin);
 8010840:	79bb      	ldrb	r3, [r7, #6]
 8010842:	2201      	movs	r2, #1
 8010844:	409a      	lsls	r2, r3
 8010846:	4b12      	ldr	r3, [pc, #72]	; (8010890 <GPIO_SetPinVal+0x130>)
 8010848:	611a      	str	r2, [r3, #16]
					break;
 801084a:	e012      	b.n	8010872 <GPIO_SetPinVal+0x112>
					else if(Copy_Value == GPIO_PIN_LOW || Copy_Value == GPIO_PIN_PULLDOWN || Copy_Value == GPIO_PIN_OD_LOW)
 801084c:	797b      	ldrb	r3, [r7, #5]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <GPIO_SetPinVal+0xfe>
 8010852:	797b      	ldrb	r3, [r7, #5]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <GPIO_SetPinVal+0xfe>
 8010858:	797b      	ldrb	r3, [r7, #5]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d109      	bne.n	8010872 <GPIO_SetPinVal+0x112>
						GPIOC->BRR = (1 << Copy_Pin);
 801085e:	79bb      	ldrb	r3, [r7, #6]
 8010860:	2201      	movs	r2, #1
 8010862:	409a      	lsls	r2, r3
 8010864:	4b0a      	ldr	r3, [pc, #40]	; (8010890 <GPIO_SetPinVal+0x130>)
 8010866:	615a      	str	r2, [r3, #20]
					break;
 8010868:	e003      	b.n	8010872 <GPIO_SetPinVal+0x112>
					break;
 801086a:	bf00      	nop
 801086c:	e005      	b.n	801087a <GPIO_SetPinVal+0x11a>
					break;
 801086e:	bf00      	nop
 8010870:	e003      	b.n	801087a <GPIO_SetPinVal+0x11a>
					break;
 8010872:	bf00      	nop
	}
 8010874:	e001      	b.n	801087a <GPIO_SetPinVal+0x11a>
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 8010876:	2301      	movs	r3, #1
 8010878:	73fb      	strb	r3, [r7, #15]
	}

	return Local_Status;
 801087a:	7bfb      	ldrb	r3, [r7, #15]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	bc80      	pop	{r7}
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	40010800 	.word	0x40010800
 801088c:	40010c00 	.word	0x40010c00
 8010890:	40011000 	.word	0x40011000

08010894 <SCB_ShiftInterruptVectorTable>:
/*--------------------------------------------------------------------------------*/
/* @Description	 : This function is intended to force a large system software	  */
/* 				   reset of all major components								  */
/*--------------------------------------------------------------------------------*/
ERROR_STATUS_t SCB_ShiftInterruptVectorTable(uint32_t Copy_VectorTableOffset)
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
	/* Local Variables Definitions */
	uint8_t Local_Status = RT_OK;
 801089c:	2300      	movs	r3, #0
 801089e:	73fb      	strb	r3, [r7, #15]

	/* Check if passed vector table offset is within the valid range */
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4a09      	ldr	r2, [pc, #36]	; (80108c8 <SCB_ShiftInterruptVectorTable+0x34>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d807      	bhi.n	80108b8 <SCB_ShiftInterruptVectorTable+0x24>
	   ((Copy_VectorTableOffset & 0x000000FF) == 0))
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	b2db      	uxtb	r3, r3
	if((Copy_VectorTableOffset >= 0x00000000 && Copy_VectorTableOffset <= 0x3FFFFE00) &&
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d103      	bne.n	80108b8 <SCB_ShiftInterruptVectorTable+0x24>
	{
		SCB->VTOR = Copy_VectorTableOffset;
 80108b0:	4a06      	ldr	r2, [pc, #24]	; (80108cc <SCB_ShiftInterruptVectorTable+0x38>)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6093      	str	r3, [r2, #8]
 80108b6:	e001      	b.n	80108bc <SCB_ShiftInterruptVectorTable+0x28>
	}
	else
	{
		/* Function is not behaving as expected */
		Local_Status = RT_NOK;
 80108b8:	2301      	movs	r3, #1
 80108ba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_Status;
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bc80      	pop	{r7}
 80108c6:	4770      	bx	lr
 80108c8:	3ffffe00 	.word	0x3ffffe00
 80108cc:	e000ed00 	.word	0xe000ed00

080108d0 <SERV_Delay_ms>:
/* @Return          : uint32_t  	        	      		        			  */
/*--------------------------------------------------------------------------------*/
/* @Description     : Function to block the processor for specified delay in ms	  */
/*--------------------------------------------------------------------------------*/
uint32_t SERV_Delay_ms(uint32_t Copy_Time)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
	uint32_t Local_Ticks = (500 * Copy_Time);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80108de:	fb02 f303 	mul.w	r3, r2, r3
 80108e2:	60bb      	str	r3, [r7, #8]
	uint32_t Local_TicksCounter;

	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	e003      	b.n	80108f2 <SERV_Delay_ms+0x22>
	{
		__asm("NOP");
 80108ea:	bf00      	nop
	for(Local_TicksCounter = 0 ; Local_TicksCounter < Local_Ticks ;Local_TicksCounter++)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	3301      	adds	r3, #1
 80108f0:	60fb      	str	r3, [r7, #12]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d3f7      	bcc.n	80108ea <SERV_Delay_ms+0x1a>
	}
	return Local_TicksCounter;
 80108fa:	68fb      	ldr	r3, [r7, #12]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	bc80      	pop	{r7}
 8010904:	4770      	bx	lr
	...

08010908 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
/* Local variables: */
	uint8_t Flag_once = 1;
 801090e:	2301      	movs	r3, #1
 8010910:	71fb      	strb	r3, [r7, #7]

	/* CAN RX header parameters */
	RxHeader.DLC = 1;
 8010912:	4b25      	ldr	r3, [pc, #148]	; (80109a8 <main+0xa0>)
 8010914:	2201      	movs	r2, #1
 8010916:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8010918:	4b23      	ldr	r3, [pc, #140]	; (80109a8 <main+0xa0>)
 801091a:	2200      	movs	r2, #0
 801091c:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 801091e:	4b22      	ldr	r3, [pc, #136]	; (80109a8 <main+0xa0>)
 8010920:	2200      	movs	r2, #0
 8010922:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x100;
 8010924:	4b20      	ldr	r3, [pc, #128]	; (80109a8 <main+0xa0>)
 8010926:	f44f 7280 	mov.w	r2, #256	; 0x100
 801092a:	601a      	str	r2, [r3, #0]

/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 801092c:	f000 fa52 	bl	8010dd4 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8010930:	f000 f89a 	bl	8010a68 <MX_GPIO_Init>
/* CAN: */
	/* initializing the CAN driver. */
	MX_CAN_Init();
 8010934:	f000 f846 	bl	80109c4 <MX_CAN_Init>
	/* Start the CAN driver */
	HAL_CAN_Start(&hcan);
 8010938:	481c      	ldr	r0, [pc, #112]	; (80109ac <main+0xa4>)
 801093a:	f000 fcb1 	bl	80112a0 <HAL_CAN_Start>
	/* Enable the CAN interrupt mode */
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 801093e:	2102      	movs	r1, #2
 8010940:	481a      	ldr	r0, [pc, #104]	; (80109ac <main+0xa4>)
 8010942:	f000 fe02 	bl	801154a <HAL_CAN_ActivateNotification>

/* LCD: */
	/* initialize the LCD */
	CLCD_Init();
 8010946:	f7ff fc01 	bl	801014c <CLCD_Init>
	/* clear the LCD */
	CLCD_ClearDisplay();
 801094a:	f7ff fdb8 	bl	80104be <CLCD_ClearDisplay>
	/* write the string on the LCD */
	CLCD_WriteString("App_2");
 801094e:	4818      	ldr	r0, [pc, #96]	; (80109b0 <main+0xa8>)
 8010950:	f7ff fdc3 	bl	80104da <CLCD_WriteString>

/* Super loop */
	while (1)
	{
		/* if the button is pressed */
		if(FLAG_buttonPressed)
 8010954:	4b17      	ldr	r3, [pc, #92]	; (80109b4 <main+0xac>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d005      	beq.n	8010968 <main+0x60>
		{
			/* delay for debouncing */
			HAL_Delay(100);
 801095c:	2064      	movs	r0, #100	; 0x64
 801095e:	f000 fab9 	bl	8010ed4 <HAL_Delay>
			/* jump to the bootloader */
			JumpToBootLoader();
 8010962:	f000 f8ef 	bl	8010b44 <JumpToBootLoader>
 8010966:	e7f5      	b.n	8010954 <main+0x4c>
		}
		else
		{
			/* if the CAN flag is raised */
			if(Flag_CAN)
 8010968:	4b13      	ldr	r3, [pc, #76]	; (80109b8 <main+0xb0>)
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0f1      	beq.n	8010954 <main+0x4c>
			{
				if(Flag_once){
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00d      	beq.n	8010992 <main+0x8a>
					Flag_once = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	71fb      	strb	r3, [r7, #7]
					/* clear the LCD */
					CLCD_ClearDisplay();
 801097a:	f7ff fda0 	bl	80104be <CLCD_ClearDisplay>
					/* write the string on the LCD */
					CLCD_WriteString("available update");
 801097e:	480f      	ldr	r0, [pc, #60]	; (80109bc <main+0xb4>)
 8010980:	f7ff fdab 	bl	80104da <CLCD_WriteString>
					/* moving cursor to the second raw */
					CLCD_MoveCursor(1, 0);
 8010984:	2100      	movs	r1, #0
 8010986:	2001      	movs	r0, #1
 8010988:	f7ff fdd0 	bl	801052c <CLCD_MoveCursor>
					/* write the string on the LCD */
					CLCD_WriteString("press the button");
 801098c:	480c      	ldr	r0, [pc, #48]	; (80109c0 <main+0xb8>)
 801098e:	f7ff fda4 	bl	80104da <CLCD_WriteString>
				}
				if(FLAG_buttonPressed){
 8010992:	4b08      	ldr	r3, [pc, #32]	; (80109b4 <main+0xac>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0dc      	beq.n	8010954 <main+0x4c>
					HAL_Delay(100);
 801099a:	2064      	movs	r0, #100	; 0x64
 801099c:	f000 fa9a 	bl	8010ed4 <HAL_Delay>
					JumpToBootLoader();
 80109a0:	f000 f8d0 	bl	8010b44 <JumpToBootLoader>
		if(FLAG_buttonPressed)
 80109a4:	e7d6      	b.n	8010954 <main+0x4c>
 80109a6:	bf00      	nop
 80109a8:	2000005c 	.word	0x2000005c
 80109ac:	20000030 	.word	0x20000030
 80109b0:	08011f94 	.word	0x08011f94
 80109b4:	20000029 	.word	0x20000029
 80109b8:	20000028 	.word	0x20000028
 80109bc:	08011f9c 	.word	0x08011f9c
 80109c0:	08011fb0 	.word	0x08011fb0

080109c4 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b08a      	sub	sp, #40	; 0x28
 80109c8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80109ca:	4b25      	ldr	r3, [pc, #148]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109cc:	4a25      	ldr	r2, [pc, #148]	; (8010a64 <MX_CAN_Init+0xa0>)
 80109ce:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 80109d0:	4b23      	ldr	r3, [pc, #140]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109d2:	2210      	movs	r2, #16
 80109d4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80109d6:	4b22      	ldr	r3, [pc, #136]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109d8:	2200      	movs	r2, #0
 80109da:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80109dc:	4b20      	ldr	r3, [pc, #128]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109de:	2200      	movs	r2, #0
 80109e0:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80109e2:	4b1f      	ldr	r3, [pc, #124]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80109e8:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80109ea:	4b1d      	ldr	r3, [pc, #116]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80109f0:	4b1b      	ldr	r3, [pc, #108]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80109f6:	4b1a      	ldr	r3, [pc, #104]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80109fc:	4b18      	ldr	r3, [pc, #96]	; (8010a60 <MX_CAN_Init+0x9c>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8010a02:	4b17      	ldr	r3, [pc, #92]	; (8010a60 <MX_CAN_Init+0x9c>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8010a08:	4b15      	ldr	r3, [pc, #84]	; (8010a60 <MX_CAN_Init+0x9c>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8010a0e:	4b14      	ldr	r3, [pc, #80]	; (8010a60 <MX_CAN_Init+0x9c>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8010a14:	4812      	ldr	r0, [pc, #72]	; (8010a60 <MX_CAN_Init+0x9c>)
 8010a16:	f000 fa7f 	bl	8010f18 <HAL_CAN_Init>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d001      	beq.n	8010a24 <MX_CAN_Init+0x60>
	{
		Error_Handler();
 8010a20:	f000 f8d4 	bl	8010bcc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;


	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8010a24:	2301      	movs	r3, #1
 8010a26:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8010a28:	230a      	movs	r3, #10
 8010a2a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8010a30:	2300      	movs	r3, #0
 8010a32:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8010a34:	2300      	movs	r3, #0
 8010a36:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8010a44:	2301      	movs	r3, #1
 8010a46:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assigned to CAN1
 8010a48:	2300      	movs	r3, #0
 8010a4a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8010a4c:	463b      	mov	r3, r7
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4803      	ldr	r0, [pc, #12]	; (8010a60 <MX_CAN_Init+0x9c>)
 8010a52:	f000 fb5c 	bl	801110e <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8010a56:	bf00      	nop
 8010a58:	3728      	adds	r7, #40	; 0x28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20000030 	.word	0x20000030
 8010a64:	40006400 	.word	0x40006400

08010a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a6e:	f107 0308 	add.w	r3, r7, #8
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
 8010a76:	605a      	str	r2, [r3, #4]
 8010a78:	609a      	str	r2, [r3, #8]
 8010a7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a7c:	4b2d      	ldr	r3, [pc, #180]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010a7e:	699b      	ldr	r3, [r3, #24]
 8010a80:	4a2c      	ldr	r2, [pc, #176]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010a82:	f043 0304 	orr.w	r3, r3, #4
 8010a86:	6193      	str	r3, [r2, #24]
 8010a88:	4b2a      	ldr	r3, [pc, #168]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010a8a:	699b      	ldr	r3, [r3, #24]
 8010a8c:	f003 0304 	and.w	r3, r3, #4
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010a94:	4b27      	ldr	r3, [pc, #156]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010a96:	699b      	ldr	r3, [r3, #24]
 8010a98:	4a26      	ldr	r2, [pc, #152]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010a9a:	f043 0308 	orr.w	r3, r3, #8
 8010a9e:	6193      	str	r3, [r2, #24]
 8010aa0:	4b24      	ldr	r3, [pc, #144]	; (8010b34 <MX_GPIO_Init+0xcc>)
 8010aa2:	699b      	ldr	r3, [r3, #24]
 8010aa4:	f003 0308 	and.w	r3, r3, #8
 8010aa8:	603b      	str	r3, [r7, #0]
 8010aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8010aac:	2200      	movs	r2, #0
 8010aae:	f240 3106 	movw	r1, #774	; 0x306
 8010ab2:	4821      	ldr	r0, [pc, #132]	; (8010b38 <MX_GPIO_Init+0xd0>)
 8010ab4:	f001 f9f4 	bl	8011ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8010abe:	481f      	ldr	r0, [pc, #124]	; (8010b3c <MX_GPIO_Init+0xd4>)
 8010ac0:	f001 f9ee 	bl	8011ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 8010ac4:	f240 3306 	movw	r3, #774	; 0x306
 8010ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010aca:	2301      	movs	r3, #1
 8010acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ad2:	2302      	movs	r3, #2
 8010ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ad6:	f107 0308 	add.w	r3, r7, #8
 8010ada:	4619      	mov	r1, r3
 8010adc:	4816      	ldr	r0, [pc, #88]	; (8010b38 <MX_GPIO_Init+0xd0>)
 8010ade:	f001 f885 	bl	8011bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8010ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010ae8:	4b15      	ldr	r3, [pc, #84]	; (8010b40 <MX_GPIO_Init+0xd8>)
 8010aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aec:	2300      	movs	r3, #0
 8010aee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010af0:	f107 0308 	add.w	r3, r7, #8
 8010af4:	4619      	mov	r1, r3
 8010af6:	4811      	ldr	r0, [pc, #68]	; (8010b3c <MX_GPIO_Init+0xd4>)
 8010af8:	f001 f878 	bl	8011bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8010afc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8010b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b02:	2301      	movs	r3, #1
 8010b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b06:	2300      	movs	r3, #0
 8010b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b0a:	2302      	movs	r3, #2
 8010b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b0e:	f107 0308 	add.w	r3, r7, #8
 8010b12:	4619      	mov	r1, r3
 8010b14:	4809      	ldr	r0, [pc, #36]	; (8010b3c <MX_GPIO_Init+0xd4>)
 8010b16:	f001 f869 	bl	8011bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	2028      	movs	r0, #40	; 0x28
 8010b20:	f001 f82d 	bl	8011b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010b24:	2028      	movs	r0, #40	; 0x28
 8010b26:	f001 f846 	bl	8011bb6 <HAL_NVIC_EnableIRQ>

}
 8010b2a:	bf00      	nop
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	40021000 	.word	0x40021000
 8010b38:	40010800 	.word	0x40010800
 8010b3c:	40010c00 	.word	0x40010c00
 8010b40:	10210000 	.word	0x10210000

08010b44 <JumpToBootLoader>:

/* USER CODE BEGIN 4 */

void JumpToBootLoader(void){
 8010b44:	b580      	push	{r7, lr}
 8010b46:	af00      	add	r7, sp, #0
	/* shift the vector table to that of APP_1 */
	SCB_ShiftInterruptVectorTable(0x08000000);
 8010b48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8010b4c:	f7ff fea2 	bl	8010894 <SCB_ShiftInterruptVectorTable>
	/* assign the address to call variable to the address of APP_1 */
	addr_to_call = *(fun_ptr*)(0x08000004);
 8010b50:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <JumpToBootLoader+0x24>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a05      	ldr	r2, [pc, #20]	; (8010b6c <JumpToBootLoader+0x28>)
 8010b56:	6013      	str	r3, [r2, #0]
	/* deinitializing the HAL */
	HAL_DeInit();
 8010b58:	f000 f952 	bl	8010e00 <HAL_DeInit>
	/* jump to APP_1 by calling this pointer */
	addr_to_call();
 8010b5c:	4b03      	ldr	r3, [pc, #12]	; (8010b6c <JumpToBootLoader+0x28>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4798      	blx	r3
}
 8010b62:	bf00      	nop
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	08000004 	.word	0x08000004
 8010b6c:	2000002c 	.word	0x2000002c

08010b70 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * return: void
 *
 * description: CAN callback function
 ***************************************************************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	/* raise the CAN flag */
	Flag_CAN = 1;
 8010b78:	4b08      	ldr	r3, [pc, #32]	; (8010b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	701a      	strb	r2, [r3, #0]
	/* toggle a led that indicates a reception*/
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8010b7e:	2102      	movs	r1, #2
 8010b80:	4807      	ldr	r0, [pc, #28]	; (8010ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8010b82:	f001 f9a5 	bl	8011ed0 <HAL_GPIO_TogglePin>
	/* receive in the CAN RX buffer */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, &CAN_RxBuffer);
 8010b86:	4b07      	ldr	r3, [pc, #28]	; (8010ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8010b88:	4a07      	ldr	r2, [pc, #28]	; (8010ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8010b8a:	2100      	movs	r1, #0
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fbcb 	bl	8011328 <HAL_CAN_GetRxMessage>

}
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000028 	.word	0x20000028
 8010ba0:	40010800 	.word	0x40010800
 8010ba4:	20000058 	.word	0x20000058
 8010ba8:	2000005c 	.word	0x2000005c

08010bac <HAL_GPIO_EXTI_Callback>:
 *
 * return: void
 *
 * description: External callback function
 ***************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pins){
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	80fb      	strh	r3, [r7, #6]
	/* raise the switch flag */
	FLAG_buttonPressed = 1;
 8010bb6:	4b04      	ldr	r3, [pc, #16]	; (8010bc8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8010bb8:	2201      	movs	r2, #1
 8010bba:	701a      	strb	r2, [r3, #0]
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bc80      	pop	{r7}
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	20000029 	.word	0x20000029

08010bcc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010bd0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8010bd2:	e7fe      	b.n	8010bd2 <Error_Handler+0x6>

08010bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b085      	sub	sp, #20
 8010bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8010bda:	4b15      	ldr	r3, [pc, #84]	; (8010c30 <HAL_MspInit+0x5c>)
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	4a14      	ldr	r2, [pc, #80]	; (8010c30 <HAL_MspInit+0x5c>)
 8010be0:	f043 0301 	orr.w	r3, r3, #1
 8010be4:	6193      	str	r3, [r2, #24]
 8010be6:	4b12      	ldr	r3, [pc, #72]	; (8010c30 <HAL_MspInit+0x5c>)
 8010be8:	699b      	ldr	r3, [r3, #24]
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	60bb      	str	r3, [r7, #8]
 8010bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010bf2:	4b0f      	ldr	r3, [pc, #60]	; (8010c30 <HAL_MspInit+0x5c>)
 8010bf4:	69db      	ldr	r3, [r3, #28]
 8010bf6:	4a0e      	ldr	r2, [pc, #56]	; (8010c30 <HAL_MspInit+0x5c>)
 8010bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bfc:	61d3      	str	r3, [r2, #28]
 8010bfe:	4b0c      	ldr	r3, [pc, #48]	; (8010c30 <HAL_MspInit+0x5c>)
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c06:	607b      	str	r3, [r7, #4]
 8010c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8010c0a:	4b0a      	ldr	r3, [pc, #40]	; (8010c34 <HAL_MspInit+0x60>)
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8010c16:	60fb      	str	r3, [r7, #12]
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	4a04      	ldr	r2, [pc, #16]	; (8010c34 <HAL_MspInit+0x60>)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bc80      	pop	{r7}
 8010c2e:	4770      	bx	lr
 8010c30:	40021000 	.word	0x40021000
 8010c34:	40010000 	.word	0x40010000

08010c38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c40:	f107 0310 	add.w	r3, r7, #16
 8010c44:	2200      	movs	r2, #0
 8010c46:	601a      	str	r2, [r3, #0]
 8010c48:	605a      	str	r2, [r3, #4]
 8010c4a:	609a      	str	r2, [r3, #8]
 8010c4c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a24      	ldr	r2, [pc, #144]	; (8010ce4 <HAL_CAN_MspInit+0xac>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d141      	bne.n	8010cdc <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8010c58:	4b23      	ldr	r3, [pc, #140]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c5a:	69db      	ldr	r3, [r3, #28]
 8010c5c:	4a22      	ldr	r2, [pc, #136]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c62:	61d3      	str	r3, [r2, #28]
 8010c64:	4b20      	ldr	r3, [pc, #128]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c66:	69db      	ldr	r3, [r3, #28]
 8010c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c6c:	60fb      	str	r3, [r7, #12]
 8010c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c70:	4b1d      	ldr	r3, [pc, #116]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c72:	699b      	ldr	r3, [r3, #24]
 8010c74:	4a1c      	ldr	r2, [pc, #112]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c76:	f043 0304 	orr.w	r3, r3, #4
 8010c7a:	6193      	str	r3, [r2, #24]
 8010c7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <HAL_CAN_MspInit+0xb0>)
 8010c7e:	699b      	ldr	r3, [r3, #24]
 8010c80:	f003 0304 	and.w	r3, r3, #4
 8010c84:	60bb      	str	r3, [r7, #8]
 8010c86:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8010c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c92:	2300      	movs	r3, #0
 8010c94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c96:	f107 0310 	add.w	r3, r7, #16
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4813      	ldr	r0, [pc, #76]	; (8010cec <HAL_CAN_MspInit+0xb4>)
 8010c9e:	f000 ffa5 	bl	8011bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8010ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ca8:	2302      	movs	r3, #2
 8010caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010cac:	2303      	movs	r3, #3
 8010cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cb0:	f107 0310 	add.w	r3, r7, #16
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	480d      	ldr	r0, [pc, #52]	; (8010cec <HAL_CAN_MspInit+0xb4>)
 8010cb8:	f000 ff98 	bl	8011bec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	2014      	movs	r0, #20
 8010cc2:	f000 ff5c 	bl	8011b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8010cc6:	2014      	movs	r0, #20
 8010cc8:	f000 ff75 	bl	8011bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2100      	movs	r1, #0
 8010cd0:	2015      	movs	r0, #21
 8010cd2:	f000 ff54 	bl	8011b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8010cd6:	2015      	movs	r0, #21
 8010cd8:	f000 ff6d 	bl	8011bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8010cdc:	bf00      	nop
 8010cde:	3720      	adds	r7, #32
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	40006400 	.word	0x40006400
 8010ce8:	40021000 	.word	0x40021000
 8010cec:	40010800 	.word	0x40010800

08010cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bc80      	pop	{r7}
 8010cfa:	4770      	bx	lr

08010cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d00:	e7fe      	b.n	8010d00 <HardFault_Handler+0x4>

08010d02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010d02:	b480      	push	{r7}
 8010d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010d06:	e7fe      	b.n	8010d06 <MemManage_Handler+0x4>

08010d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010d0c:	e7fe      	b.n	8010d0c <BusFault_Handler+0x4>

08010d0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010d12:	e7fe      	b.n	8010d12 <UsageFault_Handler+0x4>

08010d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010d14:	b480      	push	{r7}
 8010d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010d18:	bf00      	nop
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bc80      	pop	{r7}
 8010d1e:	4770      	bx	lr

08010d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010d24:	bf00      	nop
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bc80      	pop	{r7}
 8010d2a:	4770      	bx	lr

08010d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010d30:	bf00      	nop
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bc80      	pop	{r7}
 8010d36:	4770      	bx	lr

08010d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010d3c:	f000 f8ae 	bl	8010e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010d40:	bf00      	nop
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8010d48:	4802      	ldr	r0, [pc, #8]	; (8010d54 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8010d4a:	f000 fc23 	bl	8011594 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8010d4e:	bf00      	nop
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20000030 	.word	0x20000030

08010d58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8010d5c:	4802      	ldr	r0, [pc, #8]	; (8010d68 <CAN1_RX1_IRQHandler+0x10>)
 8010d5e:	f000 fc19 	bl	8011594 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8010d62:	bf00      	nop
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20000030 	.word	0x20000030

08010d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8010d70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d74:	f001 f8c6 	bl	8011f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010d78:	bf00      	nop
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010d80:	bf00      	nop
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bc80      	pop	{r7}
 8010d86:	4770      	bx	lr

08010d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010d88:	480c      	ldr	r0, [pc, #48]	; (8010dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010d8a:	490d      	ldr	r1, [pc, #52]	; (8010dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010d8c:	4a0d      	ldr	r2, [pc, #52]	; (8010dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010d90:	e002      	b.n	8010d98 <LoopCopyDataInit>

08010d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010d96:	3304      	adds	r3, #4

08010d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010d9c:	d3f9      	bcc.n	8010d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010d9e:	4a0a      	ldr	r2, [pc, #40]	; (8010dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010da0:	4c0a      	ldr	r4, [pc, #40]	; (8010dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8010da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010da4:	e001      	b.n	8010daa <LoopFillZerobss>

08010da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010da8:	3204      	adds	r2, #4

08010daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010dac:	d3fb      	bcc.n	8010da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8010dae:	f7ff ffe5 	bl	8010d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010db2:	f001 f8bf 	bl	8011f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8010db6:	f7ff fda7 	bl	8010908 <main>
  bx lr
 8010dba:	4770      	bx	lr
  ldr r0, =_sdata
 8010dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8010dc4:	08011fcc 	.word	0x08011fcc
  ldr r2, =_sbss
 8010dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010dcc:	2000007c 	.word	0x2000007c

08010dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8010dd0:	e7fe      	b.n	8010dd0 <ADC1_2_IRQHandler>
	...

08010dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010dd8:	4b08      	ldr	r3, [pc, #32]	; (8010dfc <HAL_Init+0x28>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a07      	ldr	r2, [pc, #28]	; (8010dfc <HAL_Init+0x28>)
 8010dde:	f043 0310 	orr.w	r3, r3, #16
 8010de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010de4:	2003      	movs	r0, #3
 8010de6:	f000 febf 	bl	8011b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010dea:	2000      	movs	r0, #0
 8010dec:	f000 f826 	bl	8010e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010df0:	f7ff fef0 	bl	8010bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	40022000 	.word	0x40022000

08010e00 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8010e04:	4b09      	ldr	r3, [pc, #36]	; (8010e2c <HAL_DeInit+0x2c>)
 8010e06:	f04f 32ff 	mov.w	r2, #4294967295
 8010e0a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8010e0c:	4b07      	ldr	r3, [pc, #28]	; (8010e2c <HAL_DeInit+0x2c>)
 8010e0e:	2200      	movs	r2, #0
 8010e10:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8010e12:	4b06      	ldr	r3, [pc, #24]	; (8010e2c <HAL_DeInit+0x2c>)
 8010e14:	f04f 32ff 	mov.w	r2, #4294967295
 8010e18:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8010e1a:	4b04      	ldr	r3, [pc, #16]	; (8010e2c <HAL_DeInit+0x2c>)
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8010e20:	f000 f806 	bl	8010e30 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	40021000 	.word	0x40021000

08010e30 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8010e30:	b480      	push	{r7}
 8010e32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8010e34:	bf00      	nop
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bc80      	pop	{r7}
 8010e3a:	4770      	bx	lr

08010e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010e44:	4b12      	ldr	r3, [pc, #72]	; (8010e90 <HAL_InitTick+0x54>)
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	4b12      	ldr	r3, [pc, #72]	; (8010e94 <HAL_InitTick+0x58>)
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f000 feb9 	bl	8011bd2 <HAL_SYSTICK_Config>
 8010e60:	4603      	mov	r3, r0
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010e66:	2301      	movs	r3, #1
 8010e68:	e00e      	b.n	8010e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b0f      	cmp	r3, #15
 8010e6e:	d80a      	bhi.n	8010e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010e70:	2200      	movs	r2, #0
 8010e72:	6879      	ldr	r1, [r7, #4]
 8010e74:	f04f 30ff 	mov.w	r0, #4294967295
 8010e78:	f000 fe81 	bl	8011b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010e7c:	4a06      	ldr	r2, [pc, #24]	; (8010e98 <HAL_InitTick+0x5c>)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	e000      	b.n	8010e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010e86:	2301      	movs	r3, #1
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	20000000 	.word	0x20000000
 8010e94:	20000008 	.word	0x20000008
 8010e98:	20000004 	.word	0x20000004

08010e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010ea0:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <HAL_IncTick+0x1c>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	4b05      	ldr	r3, [pc, #20]	; (8010ebc <HAL_IncTick+0x20>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4413      	add	r3, r2
 8010eac:	4a03      	ldr	r2, [pc, #12]	; (8010ebc <HAL_IncTick+0x20>)
 8010eae:	6013      	str	r3, [r2, #0]
}
 8010eb0:	bf00      	nop
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bc80      	pop	{r7}
 8010eb6:	4770      	bx	lr
 8010eb8:	20000008 	.word	0x20000008
 8010ebc:	20000078 	.word	0x20000078

08010ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8010ec4:	4b02      	ldr	r3, [pc, #8]	; (8010ed0 <HAL_GetTick+0x10>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bc80      	pop	{r7}
 8010ece:	4770      	bx	lr
 8010ed0:	20000078 	.word	0x20000078

08010ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010edc:	f7ff fff0 	bl	8010ec0 <HAL_GetTick>
 8010ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eec:	d005      	beq.n	8010efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <HAL_Delay+0x40>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010efa:	bf00      	nop
 8010efc:	f7ff ffe0 	bl	8010ec0 <HAL_GetTick>
 8010f00:	4602      	mov	r2, r0
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	1ad3      	subs	r3, r2, r3
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d8f7      	bhi.n	8010efc <HAL_Delay+0x28>
  {
  }
}
 8010f0c:	bf00      	nop
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	20000008 	.word	0x20000008

08010f18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8010f26:	2301      	movs	r3, #1
 8010f28:	e0ed      	b.n	8011106 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d102      	bne.n	8010f3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7ff fe7e 	bl	8010c38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f042 0201 	orr.w	r2, r2, #1
 8010f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010f4c:	f7ff ffb8 	bl	8010ec0 <HAL_GetTick>
 8010f50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010f52:	e012      	b.n	8010f7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010f54:	f7ff ffb4 	bl	8010ec0 <HAL_GetTick>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	2b0a      	cmp	r3, #10
 8010f60:	d90b      	bls.n	8010f7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2205      	movs	r2, #5
 8010f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010f76:	2301      	movs	r3, #1
 8010f78:	e0c5      	b.n	8011106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	f003 0301 	and.w	r3, r3, #1
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d0e5      	beq.n	8010f54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f022 0202 	bic.w	r2, r2, #2
 8010f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010f98:	f7ff ff92 	bl	8010ec0 <HAL_GetTick>
 8010f9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010f9e:	e012      	b.n	8010fc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010fa0:	f7ff ff8e 	bl	8010ec0 <HAL_GetTick>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	2b0a      	cmp	r3, #10
 8010fac:	d90b      	bls.n	8010fc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2205      	movs	r2, #5
 8010fbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e09f      	b.n	8011106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d1e5      	bne.n	8010fa0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	7e1b      	ldrb	r3, [r3, #24]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d108      	bne.n	8010fee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	e007      	b.n	8010ffe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	7e5b      	ldrb	r3, [r3, #25]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d108      	bne.n	8011018 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	e007      	b.n	8011028 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011026:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	7e9b      	ldrb	r3, [r3, #26]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d108      	bne.n	8011042 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f042 0220 	orr.w	r2, r2, #32
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	e007      	b.n	8011052 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f022 0220 	bic.w	r2, r2, #32
 8011050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	7edb      	ldrb	r3, [r3, #27]
 8011056:	2b01      	cmp	r3, #1
 8011058:	d108      	bne.n	801106c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f022 0210 	bic.w	r2, r2, #16
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	e007      	b.n	801107c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f042 0210 	orr.w	r2, r2, #16
 801107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	7f1b      	ldrb	r3, [r3, #28]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d108      	bne.n	8011096 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f042 0208 	orr.w	r2, r2, #8
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	e007      	b.n	80110a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f022 0208 	bic.w	r2, r2, #8
 80110a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	7f5b      	ldrb	r3, [r3, #29]
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d108      	bne.n	80110c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f042 0204 	orr.w	r2, r2, #4
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	e007      	b.n	80110d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f022 0204 	bic.w	r2, r2, #4
 80110ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	689a      	ldr	r2, [r3, #8]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	431a      	orrs	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	431a      	orrs	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	695b      	ldr	r3, [r3, #20]
 80110e4:	ea42 0103 	orr.w	r1, r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	1e5a      	subs	r2, r3, #1
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	430a      	orrs	r2, r1
 80110f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2200      	movs	r2, #0
 80110fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2201      	movs	r2, #1
 8011100:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 801110e:	b480      	push	{r7}
 8011110:	b087      	sub	sp, #28
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011124:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8011126:	7cfb      	ldrb	r3, [r7, #19]
 8011128:	2b01      	cmp	r3, #1
 801112a:	d003      	beq.n	8011134 <HAL_CAN_ConfigFilter+0x26>
 801112c:	7cfb      	ldrb	r3, [r7, #19]
 801112e:	2b02      	cmp	r3, #2
 8011130:	f040 80aa 	bne.w	8011288 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801113a:	f043 0201 	orr.w	r2, r3, #1
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	f003 031f 	and.w	r3, r3, #31
 801114c:	2201      	movs	r2, #1
 801114e:	fa02 f303 	lsl.w	r3, r2, r3
 8011152:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	43db      	mvns	r3, r3
 801115e:	401a      	ands	r2, r3
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d123      	bne.n	80111b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	43db      	mvns	r3, r3
 8011178:	401a      	ands	r2, r3
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011190:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	3248      	adds	r2, #72	; 0x48
 8011196:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	689b      	ldr	r3, [r3, #8]
 801119e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80111aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80111ac:	6979      	ldr	r1, [r7, #20]
 80111ae:	3348      	adds	r3, #72	; 0x48
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	440b      	add	r3, r1
 80111b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	69db      	ldr	r3, [r3, #28]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d122      	bne.n	8011204 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	431a      	orrs	r2, r3
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80111de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3248      	adds	r2, #72	; 0x48
 80111e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80111f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80111fa:	6979      	ldr	r1, [r7, #20]
 80111fc:	3348      	adds	r3, #72	; 0x48
 80111fe:	00db      	lsls	r3, r3, #3
 8011200:	440b      	add	r3, r1
 8011202:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	699b      	ldr	r3, [r3, #24]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d109      	bne.n	8011220 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	43db      	mvns	r3, r3
 8011216:	401a      	ands	r2, r3
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801121e:	e007      	b.n	8011230 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	431a      	orrs	r2, r3
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d109      	bne.n	801124c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	43db      	mvns	r3, r3
 8011242:	401a      	ands	r2, r3
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801124a:	e007      	b.n	801125c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	431a      	orrs	r2, r3
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	6a1b      	ldr	r3, [r3, #32]
 8011260:	2b01      	cmp	r3, #1
 8011262:	d107      	bne.n	8011274 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	431a      	orrs	r2, r3
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801127a:	f023 0201 	bic.w	r2, r3, #1
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	e006      	b.n	8011296 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011294:	2301      	movs	r3, #1
  }
}
 8011296:	4618      	mov	r0, r3
 8011298:	371c      	adds	r7, #28
 801129a:	46bd      	mov	sp, r7
 801129c:	bc80      	pop	{r7}
 801129e:	4770      	bx	lr

080112a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d12e      	bne.n	8011312 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2202      	movs	r2, #2
 80112b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f022 0201 	bic.w	r2, r2, #1
 80112ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80112cc:	f7ff fdf8 	bl	8010ec0 <HAL_GetTick>
 80112d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80112d2:	e012      	b.n	80112fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80112d4:	f7ff fdf4 	bl	8010ec0 <HAL_GetTick>
 80112d8:	4602      	mov	r2, r0
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	1ad3      	subs	r3, r2, r3
 80112de:	2b0a      	cmp	r3, #10
 80112e0:	d90b      	bls.n	80112fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2205      	movs	r2, #5
 80112f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80112f6:	2301      	movs	r3, #1
 80112f8:	e012      	b.n	8011320 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	f003 0301 	and.w	r3, r3, #1
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1e5      	bne.n	80112d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	e006      	b.n	8011320 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011316:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801131e:	2301      	movs	r3, #1
  }
}
 8011320:	4618      	mov	r0, r3
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8011328:	b480      	push	{r7}
 801132a:	b087      	sub	sp, #28
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f893 3020 	ldrb.w	r3, [r3, #32]
 801133c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801133e:	7dfb      	ldrb	r3, [r7, #23]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d003      	beq.n	801134c <HAL_CAN_GetRxMessage+0x24>
 8011344:	7dfb      	ldrb	r3, [r7, #23]
 8011346:	2b02      	cmp	r3, #2
 8011348:	f040 80f3 	bne.w	8011532 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10e      	bne.n	8011370 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	f003 0303 	and.w	r3, r3, #3
 801135c:	2b00      	cmp	r3, #0
 801135e:	d116      	bne.n	801138e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011364:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801136c:	2301      	movs	r3, #1
 801136e:	e0e7      	b.n	8011540 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	f003 0303 	and.w	r3, r3, #3
 801137a:	2b00      	cmp	r3, #0
 801137c:	d107      	bne.n	801138e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801138a:	2301      	movs	r3, #1
 801138c:	e0d8      	b.n	8011540 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	331b      	adds	r3, #27
 8011396:	011b      	lsls	r3, r3, #4
 8011398:	4413      	add	r3, r2
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f003 0204 	and.w	r2, r3, #4
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d10c      	bne.n	80113c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	331b      	adds	r3, #27
 80113b4:	011b      	lsls	r3, r3, #4
 80113b6:	4413      	add	r3, r2
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	0d5b      	lsrs	r3, r3, #21
 80113bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	601a      	str	r2, [r3, #0]
 80113c4:	e00b      	b.n	80113de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	331b      	adds	r3, #27
 80113ce:	011b      	lsls	r3, r3, #4
 80113d0:	4413      	add	r3, r2
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	08db      	lsrs	r3, r3, #3
 80113d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	331b      	adds	r3, #27
 80113e6:	011b      	lsls	r3, r3, #4
 80113e8:	4413      	add	r3, r2
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 0202 	and.w	r2, r3, #2
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	331b      	adds	r3, #27
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	4413      	add	r3, r2
 8011400:	3304      	adds	r3, #4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f003 020f 	and.w	r2, r3, #15
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	331b      	adds	r3, #27
 8011414:	011b      	lsls	r3, r3, #4
 8011416:	4413      	add	r3, r2
 8011418:	3304      	adds	r3, #4
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	0a1b      	lsrs	r3, r3, #8
 801141e:	b2da      	uxtb	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	331b      	adds	r3, #27
 801142c:	011b      	lsls	r3, r3, #4
 801142e:	4413      	add	r3, r2
 8011430:	3304      	adds	r3, #4
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	0c1b      	lsrs	r3, r3, #16
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	011b      	lsls	r3, r3, #4
 8011444:	4413      	add	r3, r2
 8011446:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	b2da      	uxtb	r2, r3
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	011b      	lsls	r3, r3, #4
 801145a:	4413      	add	r3, r2
 801145c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	0a1a      	lsrs	r2, r3, #8
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	3301      	adds	r3, #1
 8011468:	b2d2      	uxtb	r2, r2
 801146a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	011b      	lsls	r3, r3, #4
 8011474:	4413      	add	r3, r2
 8011476:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	0c1a      	lsrs	r2, r3, #16
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	3302      	adds	r3, #2
 8011482:	b2d2      	uxtb	r2, r2
 8011484:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	011b      	lsls	r3, r3, #4
 801148e:	4413      	add	r3, r2
 8011490:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	0e1a      	lsrs	r2, r3, #24
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	3303      	adds	r3, #3
 801149c:	b2d2      	uxtb	r2, r2
 801149e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	3304      	adds	r3, #4
 80114b4:	b2d2      	uxtb	r2, r2
 80114b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	011b      	lsls	r3, r3, #4
 80114c0:	4413      	add	r3, r2
 80114c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	0a1a      	lsrs	r2, r3, #8
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	3305      	adds	r3, #5
 80114ce:	b2d2      	uxtb	r2, r2
 80114d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	011b      	lsls	r3, r3, #4
 80114da:	4413      	add	r3, r2
 80114dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	0c1a      	lsrs	r2, r3, #16
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	3306      	adds	r3, #6
 80114e8:	b2d2      	uxtb	r2, r2
 80114ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	011b      	lsls	r3, r3, #4
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	0e1a      	lsrs	r2, r3, #24
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	3307      	adds	r3, #7
 8011502:	b2d2      	uxtb	r2, r2
 8011504:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d108      	bne.n	801151e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	68da      	ldr	r2, [r3, #12]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f042 0220 	orr.w	r2, r2, #32
 801151a:	60da      	str	r2, [r3, #12]
 801151c:	e007      	b.n	801152e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	691a      	ldr	r2, [r3, #16]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f042 0220 	orr.w	r2, r2, #32
 801152c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	e006      	b.n	8011540 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801153e:	2301      	movs	r3, #1
  }
}
 8011540:	4618      	mov	r0, r3
 8011542:	371c      	adds	r7, #28
 8011544:	46bd      	mov	sp, r7
 8011546:	bc80      	pop	{r7}
 8011548:	4770      	bx	lr

0801154a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801154a:	b480      	push	{r7}
 801154c:	b085      	sub	sp, #20
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
 8011552:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f893 3020 	ldrb.w	r3, [r3, #32]
 801155a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801155c:	7bfb      	ldrb	r3, [r7, #15]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d002      	beq.n	8011568 <HAL_CAN_ActivateNotification+0x1e>
 8011562:	7bfb      	ldrb	r3, [r7, #15]
 8011564:	2b02      	cmp	r3, #2
 8011566:	d109      	bne.n	801157c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6959      	ldr	r1, [r3, #20]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	430a      	orrs	r2, r1
 8011576:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	e006      	b.n	801158a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011580:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011588:	2301      	movs	r3, #1
  }
}
 801158a:	4618      	mov	r0, r3
 801158c:	3714      	adds	r7, #20
 801158e:	46bd      	mov	sp, r7
 8011590:	bc80      	pop	{r7}
 8011592:	4770      	bx	lr

08011594 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b08a      	sub	sp, #40	; 0x28
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801159c:	2300      	movs	r3, #0
 801159e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	695b      	ldr	r3, [r3, #20]
 80115a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	699b      	ldr	r3, [r3, #24]
 80115ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	f003 0301 	and.w	r3, r3, #1
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d07c      	beq.n	80116d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	f003 0301 	and.w	r3, r3, #1
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d023      	beq.n	801162c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2201      	movs	r2, #1
 80115ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	f003 0302 	and.w	r3, r3, #2
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 f97d 	bl	80118f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80115fc:	e016      	b.n	801162c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	f003 0304 	and.w	r3, r3, #4
 8011604:	2b00      	cmp	r3, #0
 8011606:	d004      	beq.n	8011612 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801160e:	627b      	str	r3, [r7, #36]	; 0x24
 8011610:	e00c      	b.n	801162c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	f003 0308 	and.w	r3, r3, #8
 8011618:	2b00      	cmp	r3, #0
 801161a:	d004      	beq.n	8011626 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 801161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011622:	627b      	str	r3, [r7, #36]	; 0x24
 8011624:	e002      	b.n	801162c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 f980 	bl	801192c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011632:	2b00      	cmp	r3, #0
 8011634:	d024      	beq.n	8011680 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801163e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f95c 	bl	8011908 <HAL_CAN_TxMailbox1CompleteCallback>
 8011650:	e016      	b.n	8011680 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011658:	2b00      	cmp	r3, #0
 801165a:	d004      	beq.n	8011666 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011662:	627b      	str	r3, [r7, #36]	; 0x24
 8011664:	e00c      	b.n	8011680 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801166c:	2b00      	cmp	r3, #0
 801166e:	d004      	beq.n	801167a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011676:	627b      	str	r3, [r7, #36]	; 0x24
 8011678:	e002      	b.n	8011680 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 f95f 	bl	801193e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011686:	2b00      	cmp	r3, #0
 8011688:	d024      	beq.n	80116d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011692:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801169a:	2b00      	cmp	r3, #0
 801169c:	d003      	beq.n	80116a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f93b 	bl	801191a <HAL_CAN_TxMailbox2CompleteCallback>
 80116a4:	e016      	b.n	80116d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d004      	beq.n	80116ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80116b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116b6:	627b      	str	r3, [r7, #36]	; 0x24
 80116b8:	e00c      	b.n	80116d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d004      	beq.n	80116ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80116c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
 80116cc:	e002      	b.n	80116d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f93e 	bl	8011950 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80116d4:	6a3b      	ldr	r3, [r7, #32]
 80116d6:	f003 0308 	and.w	r3, r3, #8
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00c      	beq.n	80116f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	f003 0310 	and.w	r3, r3, #16
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d007      	beq.n	80116f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2210      	movs	r2, #16
 80116f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80116f8:	6a3b      	ldr	r3, [r7, #32]
 80116fa:	f003 0304 	and.w	r3, r3, #4
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00b      	beq.n	801171a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	f003 0308 	and.w	r3, r3, #8
 8011708:	2b00      	cmp	r3, #0
 801170a:	d006      	beq.n	801171a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2208      	movs	r2, #8
 8011712:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f924 	bl	8011962 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801171a:	6a3b      	ldr	r3, [r7, #32]
 801171c:	f003 0302 	and.w	r3, r3, #2
 8011720:	2b00      	cmp	r3, #0
 8011722:	d009      	beq.n	8011738 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	f003 0303 	and.w	r3, r3, #3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d002      	beq.n	8011738 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7ff fa1c 	bl	8010b70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00c      	beq.n	801175c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	f003 0310 	and.w	r3, r3, #16
 8011748:	2b00      	cmp	r3, #0
 801174a:	d007      	beq.n	801175c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011752:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2210      	movs	r2, #16
 801175a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801175c:	6a3b      	ldr	r3, [r7, #32]
 801175e:	f003 0320 	and.w	r3, r3, #32
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00b      	beq.n	801177e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	f003 0308 	and.w	r3, r3, #8
 801176c:	2b00      	cmp	r3, #0
 801176e:	d006      	beq.n	801177e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2208      	movs	r2, #8
 8011776:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f904 	bl	8011986 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801177e:	6a3b      	ldr	r3, [r7, #32]
 8011780:	f003 0310 	and.w	r3, r3, #16
 8011784:	2b00      	cmp	r3, #0
 8011786:	d009      	beq.n	801179c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	691b      	ldr	r3, [r3, #16]
 801178e:	f003 0303 	and.w	r3, r3, #3
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 f8ec 	bl	8011974 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801179c:	6a3b      	ldr	r3, [r7, #32]
 801179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00b      	beq.n	80117be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	f003 0310 	and.w	r3, r3, #16
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d006      	beq.n	80117be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2210      	movs	r2, #16
 80117b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 f8ed 	bl	8011998 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80117be:	6a3b      	ldr	r3, [r7, #32]
 80117c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00b      	beq.n	80117e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	f003 0308 	and.w	r3, r3, #8
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d006      	beq.n	80117e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2208      	movs	r2, #8
 80117d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 f8e5 	bl	80119aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80117e0:	6a3b      	ldr	r3, [r7, #32]
 80117e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d075      	beq.n	80118d6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	f003 0304 	and.w	r3, r3, #4
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d06c      	beq.n	80118ce <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d008      	beq.n	8011810 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011804:	2b00      	cmp	r3, #0
 8011806:	d003      	beq.n	8011810 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180a:	f043 0301 	orr.w	r3, r3, #1
 801180e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011816:	2b00      	cmp	r3, #0
 8011818:	d008      	beq.n	801182c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011820:	2b00      	cmp	r3, #0
 8011822:	d003      	beq.n	801182c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	f043 0302 	orr.w	r3, r3, #2
 801182a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801182c:	6a3b      	ldr	r3, [r7, #32]
 801182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011832:	2b00      	cmp	r3, #0
 8011834:	d008      	beq.n	8011848 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801183c:	2b00      	cmp	r3, #0
 801183e:	d003      	beq.n	8011848 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011842:	f043 0304 	orr.w	r3, r3, #4
 8011846:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801184e:	2b00      	cmp	r3, #0
 8011850:	d03d      	beq.n	80118ce <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011858:	2b00      	cmp	r3, #0
 801185a:	d038      	beq.n	80118ce <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011862:	2b30      	cmp	r3, #48	; 0x30
 8011864:	d017      	beq.n	8011896 <HAL_CAN_IRQHandler+0x302>
 8011866:	2b30      	cmp	r3, #48	; 0x30
 8011868:	d804      	bhi.n	8011874 <HAL_CAN_IRQHandler+0x2e0>
 801186a:	2b10      	cmp	r3, #16
 801186c:	d009      	beq.n	8011882 <HAL_CAN_IRQHandler+0x2ee>
 801186e:	2b20      	cmp	r3, #32
 8011870:	d00c      	beq.n	801188c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011872:	e024      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8011874:	2b50      	cmp	r3, #80	; 0x50
 8011876:	d018      	beq.n	80118aa <HAL_CAN_IRQHandler+0x316>
 8011878:	2b60      	cmp	r3, #96	; 0x60
 801187a:	d01b      	beq.n	80118b4 <HAL_CAN_IRQHandler+0x320>
 801187c:	2b40      	cmp	r3, #64	; 0x40
 801187e:	d00f      	beq.n	80118a0 <HAL_CAN_IRQHandler+0x30c>
            break;
 8011880:	e01d      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8011882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011884:	f043 0308 	orr.w	r3, r3, #8
 8011888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801188a:	e018      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 801188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188e:	f043 0310 	orr.w	r3, r3, #16
 8011892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011894:	e013      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011898:	f043 0320 	orr.w	r3, r3, #32
 801189c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801189e:	e00e      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118a8:	e009      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118b2:	e004      	b.n	80118be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80118b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	699a      	ldr	r2, [r3, #24]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80118cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2204      	movs	r2, #4
 80118d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80118d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d008      	beq.n	80118ee <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	431a      	orrs	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f867 	bl	80119bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80118ee:	bf00      	nop
 80118f0:	3728      	adds	r7, #40	; 0x28
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80118f6:	b480      	push	{r7}
 80118f8:	b083      	sub	sp, #12
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80118fe:	bf00      	nop
 8011900:	370c      	adds	r7, #12
 8011902:	46bd      	mov	sp, r7
 8011904:	bc80      	pop	{r7}
 8011906:	4770      	bx	lr

08011908 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8011910:	bf00      	nop
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	bc80      	pop	{r7}
 8011918:	4770      	bx	lr

0801191a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801191a:	b480      	push	{r7}
 801191c:	b083      	sub	sp, #12
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011922:	bf00      	nop
 8011924:	370c      	adds	r7, #12
 8011926:	46bd      	mov	sp, r7
 8011928:	bc80      	pop	{r7}
 801192a:	4770      	bx	lr

0801192c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011934:	bf00      	nop
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	bc80      	pop	{r7}
 801193c:	4770      	bx	lr

0801193e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801193e:	b480      	push	{r7}
 8011940:	b083      	sub	sp, #12
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011946:	bf00      	nop
 8011948:	370c      	adds	r7, #12
 801194a:	46bd      	mov	sp, r7
 801194c:	bc80      	pop	{r7}
 801194e:	4770      	bx	lr

08011950 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011958:	bf00      	nop
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	bc80      	pop	{r7}
 8011960:	4770      	bx	lr

08011962 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801196a:	bf00      	nop
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	bc80      	pop	{r7}
 8011972:	4770      	bx	lr

08011974 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 801197c:	bf00      	nop
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	bc80      	pop	{r7}
 8011984:	4770      	bx	lr

08011986 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011986:	b480      	push	{r7}
 8011988:	b083      	sub	sp, #12
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801198e:	bf00      	nop
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	bc80      	pop	{r7}
 8011996:	4770      	bx	lr

08011998 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011998:	b480      	push	{r7}
 801199a:	b083      	sub	sp, #12
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80119a0:	bf00      	nop
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bc80      	pop	{r7}
 80119a8:	4770      	bx	lr

080119aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80119aa:	b480      	push	{r7}
 80119ac:	b083      	sub	sp, #12
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80119b2:	bf00      	nop
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bc80      	pop	{r7}
 80119ba:	4770      	bx	lr

080119bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bc80      	pop	{r7}
 80119cc:	4770      	bx	lr
	...

080119d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f003 0307 	and.w	r3, r3, #7
 80119de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80119e0:	4b0c      	ldr	r3, [pc, #48]	; (8011a14 <__NVIC_SetPriorityGrouping+0x44>)
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80119e6:	68ba      	ldr	r2, [r7, #8]
 80119e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80119ec:	4013      	ands	r3, r2
 80119ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80119f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80119fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011a02:	4a04      	ldr	r2, [pc, #16]	; (8011a14 <__NVIC_SetPriorityGrouping+0x44>)
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	60d3      	str	r3, [r2, #12]
}
 8011a08:	bf00      	nop
 8011a0a:	3714      	adds	r7, #20
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bc80      	pop	{r7}
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	e000ed00 	.word	0xe000ed00

08011a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011a1c:	4b04      	ldr	r3, [pc, #16]	; (8011a30 <__NVIC_GetPriorityGrouping+0x18>)
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	0a1b      	lsrs	r3, r3, #8
 8011a22:	f003 0307 	and.w	r3, r3, #7
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bc80      	pop	{r7}
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	e000ed00 	.word	0xe000ed00

08011a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	db0b      	blt.n	8011a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a46:	79fb      	ldrb	r3, [r7, #7]
 8011a48:	f003 021f 	and.w	r2, r3, #31
 8011a4c:	4906      	ldr	r1, [pc, #24]	; (8011a68 <__NVIC_EnableIRQ+0x34>)
 8011a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a52:	095b      	lsrs	r3, r3, #5
 8011a54:	2001      	movs	r0, #1
 8011a56:	fa00 f202 	lsl.w	r2, r0, r2
 8011a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011a5e:	bf00      	nop
 8011a60:	370c      	adds	r7, #12
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bc80      	pop	{r7}
 8011a66:	4770      	bx	lr
 8011a68:	e000e100 	.word	0xe000e100

08011a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	4603      	mov	r3, r0
 8011a74:	6039      	str	r1, [r7, #0]
 8011a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	db0a      	blt.n	8011a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	b2da      	uxtb	r2, r3
 8011a84:	490c      	ldr	r1, [pc, #48]	; (8011ab8 <__NVIC_SetPriority+0x4c>)
 8011a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a8a:	0112      	lsls	r2, r2, #4
 8011a8c:	b2d2      	uxtb	r2, r2
 8011a8e:	440b      	add	r3, r1
 8011a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011a94:	e00a      	b.n	8011aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	b2da      	uxtb	r2, r3
 8011a9a:	4908      	ldr	r1, [pc, #32]	; (8011abc <__NVIC_SetPriority+0x50>)
 8011a9c:	79fb      	ldrb	r3, [r7, #7]
 8011a9e:	f003 030f 	and.w	r3, r3, #15
 8011aa2:	3b04      	subs	r3, #4
 8011aa4:	0112      	lsls	r2, r2, #4
 8011aa6:	b2d2      	uxtb	r2, r2
 8011aa8:	440b      	add	r3, r1
 8011aaa:	761a      	strb	r2, [r3, #24]
}
 8011aac:	bf00      	nop
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bc80      	pop	{r7}
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	e000e100 	.word	0xe000e100
 8011abc:	e000ed00 	.word	0xe000ed00

08011ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b089      	sub	sp, #36	; 0x24
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f003 0307 	and.w	r3, r3, #7
 8011ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	f1c3 0307 	rsb	r3, r3, #7
 8011ada:	2b04      	cmp	r3, #4
 8011adc:	bf28      	it	cs
 8011ade:	2304      	movcs	r3, #4
 8011ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	2b06      	cmp	r3, #6
 8011ae8:	d902      	bls.n	8011af0 <NVIC_EncodePriority+0x30>
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	3b03      	subs	r3, #3
 8011aee:	e000      	b.n	8011af2 <NVIC_EncodePriority+0x32>
 8011af0:	2300      	movs	r3, #0
 8011af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011af4:	f04f 32ff 	mov.w	r2, #4294967295
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	fa02 f303 	lsl.w	r3, r2, r3
 8011afe:	43da      	mvns	r2, r3
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	401a      	ands	r2, r3
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011b08:	f04f 31ff 	mov.w	r1, #4294967295
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b12:	43d9      	mvns	r1, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b18:	4313      	orrs	r3, r2
         );
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3724      	adds	r7, #36	; 0x24
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bc80      	pop	{r7}
 8011b22:	4770      	bx	lr

08011b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b34:	d301      	bcc.n	8011b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011b36:	2301      	movs	r3, #1
 8011b38:	e00f      	b.n	8011b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011b3a:	4a0a      	ldr	r2, [pc, #40]	; (8011b64 <SysTick_Config+0x40>)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011b42:	210f      	movs	r1, #15
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	f7ff ff90 	bl	8011a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011b4c:	4b05      	ldr	r3, [pc, #20]	; (8011b64 <SysTick_Config+0x40>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011b52:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <SysTick_Config+0x40>)
 8011b54:	2207      	movs	r2, #7
 8011b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	e000e010 	.word	0xe000e010

08011b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7ff ff2d 	bl	80119d0 <__NVIC_SetPriorityGrouping>
}
 8011b76:	bf00      	nop
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b086      	sub	sp, #24
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	4603      	mov	r3, r0
 8011b86:	60b9      	str	r1, [r7, #8]
 8011b88:	607a      	str	r2, [r7, #4]
 8011b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011b90:	f7ff ff42 	bl	8011a18 <__NVIC_GetPriorityGrouping>
 8011b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	68b9      	ldr	r1, [r7, #8]
 8011b9a:	6978      	ldr	r0, [r7, #20]
 8011b9c:	f7ff ff90 	bl	8011ac0 <NVIC_EncodePriority>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7ff ff5f 	bl	8011a6c <__NVIC_SetPriority>
}
 8011bae:	bf00      	nop
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b082      	sub	sp, #8
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff ff35 	bl	8011a34 <__NVIC_EnableIRQ>
}
 8011bca:	bf00      	nop
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b082      	sub	sp, #8
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff ffa2 	bl	8011b24 <SysTick_Config>
 8011be0:	4603      	mov	r3, r0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b08b      	sub	sp, #44	; 0x2c
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011bfe:	e127      	b.n	8011e50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8011c00:	2201      	movs	r2, #1
 8011c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c04:	fa02 f303 	lsl.w	r3, r2, r3
 8011c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	4013      	ands	r3, r2
 8011c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8011c14:	69ba      	ldr	r2, [r7, #24]
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	f040 8116 	bne.w	8011e4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	2b12      	cmp	r3, #18
 8011c24:	d034      	beq.n	8011c90 <HAL_GPIO_Init+0xa4>
 8011c26:	2b12      	cmp	r3, #18
 8011c28:	d80d      	bhi.n	8011c46 <HAL_GPIO_Init+0x5a>
 8011c2a:	2b02      	cmp	r3, #2
 8011c2c:	d02b      	beq.n	8011c86 <HAL_GPIO_Init+0x9a>
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	d804      	bhi.n	8011c3c <HAL_GPIO_Init+0x50>
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d031      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d01c      	beq.n	8011c74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8011c3a:	e048      	b.n	8011cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8011c3c:	2b03      	cmp	r3, #3
 8011c3e:	d043      	beq.n	8011cc8 <HAL_GPIO_Init+0xdc>
 8011c40:	2b11      	cmp	r3, #17
 8011c42:	d01b      	beq.n	8011c7c <HAL_GPIO_Init+0x90>
          break;
 8011c44:	e043      	b.n	8011cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8011c46:	4a89      	ldr	r2, [pc, #548]	; (8011e6c <HAL_GPIO_Init+0x280>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d026      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
 8011c4c:	4a87      	ldr	r2, [pc, #540]	; (8011e6c <HAL_GPIO_Init+0x280>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d806      	bhi.n	8011c60 <HAL_GPIO_Init+0x74>
 8011c52:	4a87      	ldr	r2, [pc, #540]	; (8011e70 <HAL_GPIO_Init+0x284>)
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d020      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
 8011c58:	4a86      	ldr	r2, [pc, #536]	; (8011e74 <HAL_GPIO_Init+0x288>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d01d      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
          break;
 8011c5e:	e036      	b.n	8011cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8011c60:	4a85      	ldr	r2, [pc, #532]	; (8011e78 <HAL_GPIO_Init+0x28c>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d019      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
 8011c66:	4a85      	ldr	r2, [pc, #532]	; (8011e7c <HAL_GPIO_Init+0x290>)
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d016      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
 8011c6c:	4a84      	ldr	r2, [pc, #528]	; (8011e80 <HAL_GPIO_Init+0x294>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d013      	beq.n	8011c9a <HAL_GPIO_Init+0xae>
          break;
 8011c72:	e02c      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	623b      	str	r3, [r7, #32]
          break;
 8011c7a:	e028      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	3304      	adds	r3, #4
 8011c82:	623b      	str	r3, [r7, #32]
          break;
 8011c84:	e023      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	3308      	adds	r3, #8
 8011c8c:	623b      	str	r3, [r7, #32]
          break;
 8011c8e:	e01e      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	330c      	adds	r3, #12
 8011c96:	623b      	str	r3, [r7, #32]
          break;
 8011c98:	e019      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8011ca2:	2304      	movs	r3, #4
 8011ca4:	623b      	str	r3, [r7, #32]
          break;
 8011ca6:	e012      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d105      	bne.n	8011cbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011cb0:	2308      	movs	r3, #8
 8011cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	69fa      	ldr	r2, [r7, #28]
 8011cb8:	611a      	str	r2, [r3, #16]
          break;
 8011cba:	e008      	b.n	8011cce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011cbc:	2308      	movs	r3, #8
 8011cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	69fa      	ldr	r2, [r7, #28]
 8011cc4:	615a      	str	r2, [r3, #20]
          break;
 8011cc6:	e002      	b.n	8011cce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	623b      	str	r3, [r7, #32]
          break;
 8011ccc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	2bff      	cmp	r3, #255	; 0xff
 8011cd2:	d801      	bhi.n	8011cd8 <HAL_GPIO_Init+0xec>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	e001      	b.n	8011cdc <HAL_GPIO_Init+0xf0>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	3304      	adds	r3, #4
 8011cdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	2bff      	cmp	r3, #255	; 0xff
 8011ce2:	d802      	bhi.n	8011cea <HAL_GPIO_Init+0xfe>
 8011ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	e002      	b.n	8011cf0 <HAL_GPIO_Init+0x104>
 8011cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cec:	3b08      	subs	r3, #8
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	210f      	movs	r1, #15
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8011cfe:	43db      	mvns	r3, r3
 8011d00:	401a      	ands	r2, r3
 8011d02:	6a39      	ldr	r1, [r7, #32]
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	fa01 f303 	lsl.w	r3, r1, r3
 8011d0a:	431a      	orrs	r2, r3
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 8096 	beq.w	8011e4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8011d1e:	4b59      	ldr	r3, [pc, #356]	; (8011e84 <HAL_GPIO_Init+0x298>)
 8011d20:	699b      	ldr	r3, [r3, #24]
 8011d22:	4a58      	ldr	r2, [pc, #352]	; (8011e84 <HAL_GPIO_Init+0x298>)
 8011d24:	f043 0301 	orr.w	r3, r3, #1
 8011d28:	6193      	str	r3, [r2, #24]
 8011d2a:	4b56      	ldr	r3, [pc, #344]	; (8011e84 <HAL_GPIO_Init+0x298>)
 8011d2c:	699b      	ldr	r3, [r3, #24]
 8011d2e:	f003 0301 	and.w	r3, r3, #1
 8011d32:	60bb      	str	r3, [r7, #8]
 8011d34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8011d36:	4a54      	ldr	r2, [pc, #336]	; (8011e88 <HAL_GPIO_Init+0x29c>)
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	089b      	lsrs	r3, r3, #2
 8011d3c:	3302      	adds	r3, #2
 8011d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8011d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d46:	f003 0303 	and.w	r3, r3, #3
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	220f      	movs	r2, #15
 8011d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011d52:	43db      	mvns	r3, r3
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	4013      	ands	r3, r2
 8011d58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4a4b      	ldr	r2, [pc, #300]	; (8011e8c <HAL_GPIO_Init+0x2a0>)
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d013      	beq.n	8011d8a <HAL_GPIO_Init+0x19e>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4a4a      	ldr	r2, [pc, #296]	; (8011e90 <HAL_GPIO_Init+0x2a4>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d00d      	beq.n	8011d86 <HAL_GPIO_Init+0x19a>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4a49      	ldr	r2, [pc, #292]	; (8011e94 <HAL_GPIO_Init+0x2a8>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d007      	beq.n	8011d82 <HAL_GPIO_Init+0x196>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	4a48      	ldr	r2, [pc, #288]	; (8011e98 <HAL_GPIO_Init+0x2ac>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d101      	bne.n	8011d7e <HAL_GPIO_Init+0x192>
 8011d7a:	2303      	movs	r3, #3
 8011d7c:	e006      	b.n	8011d8c <HAL_GPIO_Init+0x1a0>
 8011d7e:	2304      	movs	r3, #4
 8011d80:	e004      	b.n	8011d8c <HAL_GPIO_Init+0x1a0>
 8011d82:	2302      	movs	r3, #2
 8011d84:	e002      	b.n	8011d8c <HAL_GPIO_Init+0x1a0>
 8011d86:	2301      	movs	r3, #1
 8011d88:	e000      	b.n	8011d8c <HAL_GPIO_Init+0x1a0>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8e:	f002 0203 	and.w	r2, r2, #3
 8011d92:	0092      	lsls	r2, r2, #2
 8011d94:	4093      	lsls	r3, r2
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8011d9c:	493a      	ldr	r1, [pc, #232]	; (8011e88 <HAL_GPIO_Init+0x29c>)
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	089b      	lsrs	r3, r3, #2
 8011da2:	3302      	adds	r3, #2
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d006      	beq.n	8011dc4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8011db6:	4b39      	ldr	r3, [pc, #228]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	4938      	ldr	r1, [pc, #224]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	600b      	str	r3, [r1, #0]
 8011dc2:	e006      	b.n	8011dd2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8011dc4:	4b35      	ldr	r3, [pc, #212]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	43db      	mvns	r3, r3
 8011dcc:	4933      	ldr	r1, [pc, #204]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011dce:	4013      	ands	r3, r2
 8011dd0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d006      	beq.n	8011dec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8011dde:	4b2f      	ldr	r3, [pc, #188]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011de0:	685a      	ldr	r2, [r3, #4]
 8011de2:	492e      	ldr	r1, [pc, #184]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	604b      	str	r3, [r1, #4]
 8011dea:	e006      	b.n	8011dfa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8011dec:	4b2b      	ldr	r3, [pc, #172]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011dee:	685a      	ldr	r2, [r3, #4]
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	43db      	mvns	r3, r3
 8011df4:	4929      	ldr	r1, [pc, #164]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011df6:	4013      	ands	r3, r2
 8011df8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d006      	beq.n	8011e14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8011e06:	4b25      	ldr	r3, [pc, #148]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e08:	689a      	ldr	r2, [r3, #8]
 8011e0a:	4924      	ldr	r1, [pc, #144]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	608b      	str	r3, [r1, #8]
 8011e12:	e006      	b.n	8011e22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8011e14:	4b21      	ldr	r3, [pc, #132]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e16:	689a      	ldr	r2, [r3, #8]
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	43db      	mvns	r3, r3
 8011e1c:	491f      	ldr	r1, [pc, #124]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e1e:	4013      	ands	r3, r2
 8011e20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d006      	beq.n	8011e3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8011e2e:	4b1b      	ldr	r3, [pc, #108]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e30:	68da      	ldr	r2, [r3, #12]
 8011e32:	491a      	ldr	r1, [pc, #104]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	60cb      	str	r3, [r1, #12]
 8011e3a:	e006      	b.n	8011e4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8011e3c:	4b17      	ldr	r3, [pc, #92]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e3e:	68da      	ldr	r2, [r3, #12]
 8011e40:	69bb      	ldr	r3, [r7, #24]
 8011e42:	43db      	mvns	r3, r3
 8011e44:	4915      	ldr	r1, [pc, #84]	; (8011e9c <HAL_GPIO_Init+0x2b0>)
 8011e46:	4013      	ands	r3, r2
 8011e48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8011e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	fa22 f303 	lsr.w	r3, r2, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f47f aed0 	bne.w	8011c00 <HAL_GPIO_Init+0x14>
  }
}
 8011e60:	bf00      	nop
 8011e62:	372c      	adds	r7, #44	; 0x2c
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bc80      	pop	{r7}
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	10210000 	.word	0x10210000
 8011e70:	10110000 	.word	0x10110000
 8011e74:	10120000 	.word	0x10120000
 8011e78:	10310000 	.word	0x10310000
 8011e7c:	10320000 	.word	0x10320000
 8011e80:	10220000 	.word	0x10220000
 8011e84:	40021000 	.word	0x40021000
 8011e88:	40010000 	.word	0x40010000
 8011e8c:	40010800 	.word	0x40010800
 8011e90:	40010c00 	.word	0x40010c00
 8011e94:	40011000 	.word	0x40011000
 8011e98:	40011400 	.word	0x40011400
 8011e9c:	40010400 	.word	0x40010400

08011ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	807b      	strh	r3, [r7, #2]
 8011eac:	4613      	mov	r3, r2
 8011eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011eb0:	787b      	ldrb	r3, [r7, #1]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d003      	beq.n	8011ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011eb6:	887a      	ldrh	r2, [r7, #2]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8011ebc:	e003      	b.n	8011ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8011ebe:	887b      	ldrh	r3, [r7, #2]
 8011ec0:	041a      	lsls	r2, r3, #16
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	611a      	str	r2, [r3, #16]
}
 8011ec6:	bf00      	nop
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bc80      	pop	{r7}
 8011ece:	4770      	bx	lr

08011ed0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b085      	sub	sp, #20
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	460b      	mov	r3, r1
 8011eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011ee2:	887a      	ldrh	r2, [r7, #2]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	4013      	ands	r3, r2
 8011ee8:	041a      	lsls	r2, r3, #16
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	43d9      	mvns	r1, r3
 8011eee:	887b      	ldrh	r3, [r7, #2]
 8011ef0:	400b      	ands	r3, r1
 8011ef2:	431a      	orrs	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	611a      	str	r2, [r3, #16]
}
 8011ef8:	bf00      	nop
 8011efa:	3714      	adds	r7, #20
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bc80      	pop	{r7}
 8011f00:	4770      	bx	lr
	...

08011f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8011f0e:	4b08      	ldr	r3, [pc, #32]	; (8011f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011f10:	695a      	ldr	r2, [r3, #20]
 8011f12:	88fb      	ldrh	r3, [r7, #6]
 8011f14:	4013      	ands	r3, r2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d006      	beq.n	8011f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011f1a:	4a05      	ldr	r2, [pc, #20]	; (8011f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011f1c:	88fb      	ldrh	r3, [r7, #6]
 8011f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011f20:	88fb      	ldrh	r3, [r7, #6]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe fe42 	bl	8010bac <HAL_GPIO_EXTI_Callback>
  }
}
 8011f28:	bf00      	nop
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	40010400 	.word	0x40010400

08011f34 <__libc_init_array>:
 8011f34:	b570      	push	{r4, r5, r6, lr}
 8011f36:	2500      	movs	r5, #0
 8011f38:	4e0c      	ldr	r6, [pc, #48]	; (8011f6c <__libc_init_array+0x38>)
 8011f3a:	4c0d      	ldr	r4, [pc, #52]	; (8011f70 <__libc_init_array+0x3c>)
 8011f3c:	1ba4      	subs	r4, r4, r6
 8011f3e:	10a4      	asrs	r4, r4, #2
 8011f40:	42a5      	cmp	r5, r4
 8011f42:	d109      	bne.n	8011f58 <__libc_init_array+0x24>
 8011f44:	f000 f81a 	bl	8011f7c <_init>
 8011f48:	2500      	movs	r5, #0
 8011f4a:	4e0a      	ldr	r6, [pc, #40]	; (8011f74 <__libc_init_array+0x40>)
 8011f4c:	4c0a      	ldr	r4, [pc, #40]	; (8011f78 <__libc_init_array+0x44>)
 8011f4e:	1ba4      	subs	r4, r4, r6
 8011f50:	10a4      	asrs	r4, r4, #2
 8011f52:	42a5      	cmp	r5, r4
 8011f54:	d105      	bne.n	8011f62 <__libc_init_array+0x2e>
 8011f56:	bd70      	pop	{r4, r5, r6, pc}
 8011f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011f5c:	4798      	blx	r3
 8011f5e:	3501      	adds	r5, #1
 8011f60:	e7ee      	b.n	8011f40 <__libc_init_array+0xc>
 8011f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011f66:	4798      	blx	r3
 8011f68:	3501      	adds	r5, #1
 8011f6a:	e7f2      	b.n	8011f52 <__libc_init_array+0x1e>
 8011f6c:	08011fc4 	.word	0x08011fc4
 8011f70:	08011fc4 	.word	0x08011fc4
 8011f74:	08011fc4 	.word	0x08011fc4
 8011f78:	08011fc8 	.word	0x08011fc8

08011f7c <_init>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	bf00      	nop
 8011f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f82:	bc08      	pop	{r3}
 8011f84:	469e      	mov	lr, r3
 8011f86:	4770      	bx	lr

08011f88 <_fini>:
 8011f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f8a:	bf00      	nop
 8011f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f8e:	bc08      	pop	{r3}
 8011f90:	469e      	mov	lr, r3
 8011f92:	4770      	bx	lr
